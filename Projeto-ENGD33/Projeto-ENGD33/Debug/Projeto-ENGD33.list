
Projeto-ENGD33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b864  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800ba04  0800ba04  0000ca04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb98  0800bb98  0000d06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb98  0800bb98  0000cb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bba0  0800bba0  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba0  0800bba0  0000cba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bba4  0800bba4  0000cba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800bba8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de8  2000006c  0800bc14  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e54  0800bc14  0000de54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020679  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043a6  00000000  00000000  0002d715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd0  00000000  00000000  00031ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001691  00000000  00000000  00033790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dbd  00000000  00000000  00034e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002158c  00000000  00000000  0003abde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1480  00000000  00000000  0005c16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d5ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000844c  00000000  00000000  0010d630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00115a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b9ec 	.word	0x0800b9ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800b9ec 	.word	0x0800b9ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 fdc4 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f82c 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fbde 	bl	8000d78 <MX_GPIO_Init>
  MX_RTC_Init();
 80005bc:	f000 f944 	bl	8000848 <MX_RTC_Init>
  MX_ADC1_Init();
 80005c0:	f000 f890 	bl	80006e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005c4:	f000 f912 	bl	80007ec <MX_I2C1_Init>
  MX_SPI1_Init();
 80005c8:	f000 f998 	bl	80008fc <MX_SPI1_Init>
  MX_TIM1_Init();
 80005cc:	f000 f9cc 	bl	8000968 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005d0:	f000 fa82 	bl	8000ad8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d4:	f000 fad4 	bl	8000b80 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005d8:	f000 fb26 	bl	8000c28 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 fb78 	bl	8000cd0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005e0:	f000 fba0 	bl	8000d24 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SetupTarefasPortaCOMM();
 80005e4:	f000 ffca 	bl	800157c <SetupTarefasPortaCOMM>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f007 fbd8 	bl	8007d9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <main+0x58>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <main+0x5c>)
 80005f2:	f007 fc1d 	bl	8007e30 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <main+0x60>)
 80005fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f007 fbf2 	bl	8007de4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x54>
 8000604:	0800ba7c 	.word	0x0800ba7c
 8000608:	08000e89 	.word	0x08000e89
 800060c:	2000034c 	.word	0x2000034c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00a fb3d 	bl	800ac9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	@ (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800066c:	2305      	movs	r3, #5
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000676:	2301      	movs	r3, #1
 8000678:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000684:	2319      	movs	r3, #25
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000688:	23a0      	movs	r3, #160	@ 0xa0
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f004 f999 	bl	80049d0 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fc0a 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fbfb 	bl	8004ec0 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d0:	f000 fbf4 	bl	8000ebc <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	@ 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f6:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 80006f8:	4a3a      	ldr	r2, [pc, #232]	@ (80007e4 <MX_ADC1_Init+0x100>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b38      	ldr	r3, [pc, #224]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 80006fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000704:	4b36      	ldr	r3, [pc, #216]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000706:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070c:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b33      	ldr	r3, [pc, #204]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b31      	ldr	r3, [pc, #196]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000720:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b2e      	ldr	r3, [pc, #184]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000728:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <MX_ADC1_Init+0x104>)
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072c:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000734:	2201      	movs	r2, #1
 8000736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000742:	2201      	movs	r2, #1
 8000744:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000746:	4826      	ldr	r0, [pc, #152]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000748:	f001 fd3a 	bl	80021c0 <HAL_ADC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000752:	f000 fbb3 	bl	8000ebc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000756:	2304      	movs	r3, #4
 8000758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	481e      	ldr	r0, [pc, #120]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000768:	f001 fd6e 	bl	8002248 <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000772:	f000 fba3 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_5;
 8000776:	2305      	movs	r3, #5
 8000778:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800077e:	2305      	movs	r3, #5
 8000780:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000788:	f001 fd5e 	bl	8002248 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xb2>
    {
      Error_Handler();
 8000792:	f000 fb93 	bl	8000ebc <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_8;
 8000796:	2308      	movs	r3, #8
 8000798:	603b      	str	r3, [r7, #0]
      sConfig.Rank = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
      sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800079e:	2305      	movs	r3, #5
 80007a0:	60bb      	str	r3, [r7, #8]
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	480e      	ldr	r0, [pc, #56]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 80007a8:	f001 fd4e 	bl	8002248 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0xd2>
      {
        Error_Handler();
 80007b2:	f000 fb83 	bl	8000ebc <Error_Handler>
      }

      sConfig.Channel = ADC_CHANNEL_9;
 80007b6:	2309      	movs	r3, #9
 80007b8:	603b      	str	r3, [r7, #0]
        sConfig.Rank = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
        sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80007be:	2305      	movs	r3, #5
 80007c0:	60bb      	str	r3, [r7, #8]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 80007c8:	f001 fd3e 	bl	8002248 <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0xf2>
        {
          Error_Handler();
 80007d2:	f000 fb73 	bl	8000ebc <Error_Handler>
        }

  /* USER CODE END ADC1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000088 	.word	0x20000088
 80007e4:	40012000 	.word	0x40012000
 80007e8:	0f000001 	.word	0x0f000001

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_I2C1_Init+0x50>)
 800082a:	f002 fa7f 	bl	8002d2c <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 fb42 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000d0 	.word	0x200000d0
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000862:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <MX_RTC_Init+0xb0>)
 8000864:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800086c:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_RTC_Init+0xac>)
 800086e:	227f      	movs	r2, #127	@ 0x7f
 8000870:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000874:	22ff      	movs	r2, #255	@ 0xff
 8000876:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_RTC_Init+0xac>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800088a:	481a      	ldr	r0, [pc, #104]	@ (80008f4 <MX_RTC_Init+0xac>)
 800088c:	f004 fe1a 	bl	80054c4 <HAL_RTC_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 fb11 	bl	8000ebc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800089a:	2300      	movs	r3, #0
 800089c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800089e:	2300      	movs	r3, #0
 80008a0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2201      	movs	r2, #1
 80008b2:	4619      	mov	r1, r3
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <MX_RTC_Init+0xac>)
 80008b6:	f004 fe86 	bl	80055c6 <HAL_RTC_SetTime>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 fafc 	bl	8000ebc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008c4:	2301      	movs	r3, #1
 80008c6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008c8:	2301      	movs	r3, #1
 80008ca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	2201      	movs	r2, #1
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	@ (80008f4 <MX_RTC_Init+0xac>)
 80008dc:	f004 ff0d 	bl	80056fa <HAL_RTC_SetDate>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008e6:	f000 fae9 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000124 	.word	0x20000124
 80008f8:	40002800 	.word	0x40002800

080008fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000902:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <MX_SPI1_Init+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000908:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800090c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000928:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800092c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000948:	220a      	movs	r2, #10
 800094a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_SPI1_Init+0x64>)
 800094e:	f004 fff9 	bl	8005944 <HAL_SPI_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000958:	f000 fab0 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000144 	.word	0x20000144
 8000964:	40013000 	.word	0x40013000

08000968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b096      	sub	sp, #88	@ 0x58
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2220      	movs	r2, #32
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00a f97c 	bl	800ac9e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009a8:	4a4a      	ldr	r2, [pc, #296]	@ (8000ad4 <MX_TIM1_Init+0x16c>)
 80009aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ac:	4b48      	ldr	r3, [pc, #288]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b47      	ldr	r3, [pc, #284]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009b8:	4b45      	ldr	r3, [pc, #276]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b43      	ldr	r3, [pc, #268]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c6:	4b42      	ldr	r3, [pc, #264]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b40      	ldr	r3, [pc, #256]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d2:	483f      	ldr	r0, [pc, #252]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009d4:	f005 f95e 	bl	8005c94 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009de:	f000 fa6d 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009ec:	4619      	mov	r1, r3
 80009ee:	4838      	ldr	r0, [pc, #224]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009f0:	f005 fcb4 	bl	800635c <HAL_TIM_ConfigClockSource>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009fa:	f000 fa5f 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009fe:	4834      	ldr	r0, [pc, #208]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a00:	f005 f9fa 	bl	8005df8 <HAL_TIM_PWM_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a0a:	f000 fa57 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	482c      	ldr	r0, [pc, #176]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a1e:	f006 f839 	bl	8006a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a28:	f000 fa48 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2c:	2360      	movs	r3, #96	@ 0x60
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481f      	ldr	r0, [pc, #124]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a52:	f005 fbc1 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a5c:	f000 fa2e 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	2204      	movs	r2, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a6a:	f005 fbb5 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a74:	f000 fa22 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7c:	2208      	movs	r2, #8
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a82:	f005 fba9 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a8c:	f000 fa16 	bl	8000ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000ab4:	f006 f85c 	bl	8006b70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000abe:	f000 f9fd 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac2:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000ac4:	f001 f87a 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 8000ac8:	bf00      	nop
 8000aca:	3758      	adds	r7, #88	@ 0x58
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000019c 	.word	0x2000019c
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	@ 0x30
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2224      	movs	r2, #36	@ 0x24
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00a f8d9 	bl	800ac9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af4:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000af6:	4a21      	ldr	r2, [pc, #132]	@ (8000b7c <MX_TIM3_Init+0xa4>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b22:	2301      	movs	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b32:	2301      	movs	r3, #1
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b46:	f005 f9b0 	bl	8005eaa <HAL_TIM_Encoder_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 f9b4 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b62:	f005 ff97 	bl	8006a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b6c:	f000 f9a6 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3730      	adds	r7, #48	@ 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001e4 	.word	0x200001e4
 8000b7c:	40000400 	.word	0x40000400

08000b80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2224      	movs	r2, #36	@ 0x24
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00a f885 	bl	800ac9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000b9e:	4a21      	ldr	r2, [pc, #132]	@ (8000c24 <MX_TIM4_Init+0xa4>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000bee:	f005 f95c 	bl	8005eaa <HAL_TIM_Encoder_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f000 f960 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000c0a:	f005 ff43 	bl	8006a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c14:	f000 f952 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3730      	adds	r7, #48	@ 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000022c 	.word	0x2000022c
 8000c24:	40000800 	.word	0x40000800

08000c28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2224      	movs	r2, #36	@ 0x24
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00a f831 	bl	800ac9e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c44:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c46:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <MX_TIM5_Init+0xa4>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c96:	f005 f908 	bl	8005eaa <HAL_TIM_Encoder_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ca0:	f000 f90c 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000cb2:	f005 feef 	bl	8006a94 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000cbc:	f000 f8fe 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	@ 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000274 	.word	0x20000274
 8000ccc:	40000c00 	.word	0x40000c00

08000cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <MX_USART2_UART_Init+0x50>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d08:	f005 ff98 	bl	8006c3c <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d12:	f000 f8d3 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200002bc 	.word	0x200002bc
 8000d20:	40004400 	.word	0x40004400

08000d24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <MX_USART6_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d5c:	f005 ff6e 	bl	8006c3c <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f000 f8a9 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000304 	.word	0x20000304
 8000d74:	40011400 	.word	0x40011400

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a39      	ldr	r2, [pc, #228]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b37      	ldr	r3, [pc, #220]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a32      	ldr	r2, [pc, #200]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a2b      	ldr	r2, [pc, #172]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a24      	ldr	r2, [pc, #144]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relays_Motores_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000e04:	481e      	ldr	r0, [pc, #120]	@ (8000e80 <MX_GPIO_Init+0x108>)
 8000e06:	f001 ff53 	bl	8002cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_DRDY_EXTI13_Pin */
  GPIO_InitStruct.Pin = IMU_DRDY_EXTI13_Pin;
 8000e0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_DRDY_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4818      	ldr	r0, [pc, #96]	@ (8000e84 <MX_GPIO_Init+0x10c>)
 8000e22:	f001 fdc1 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relays_Motores_Pin */
  GPIO_InitStruct.Pin = Relays_Motores_Pin;
 8000e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relays_Motores_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4810      	ldr	r0, [pc, #64]	@ (8000e80 <MX_GPIO_Init+0x108>)
 8000e40:	f001 fdb2 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4808      	ldr	r0, [pc, #32]	@ (8000e80 <MX_GPIO_Init+0x108>)
 8000e5e:	f001 fda3 	bl	80029a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2105      	movs	r1, #5
 8000e66:	2028      	movs	r0, #40	@ 0x28
 8000e68:	f001 fcd4 	bl	8002814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e6c:	2028      	movs	r0, #40	@ 0x28
 8000e6e:	f001 fced 	bl	800284c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	@ 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800

08000e88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f007 f85f 	bl	8007f54 <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <StartDefaultTask+0x8>

08000e98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000eaa:	f001 f969 	bl	8002180 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40014400 	.word	0x40014400

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <Error_Handler+0x8>

08000ec8 <vTaskGeraDadosMotor>:

TaskHandle_t xHandleRecepcao = NULL;

uint8_t comando_recebido;

void vTaskGeraDadosMotor(void *pvParameters) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	@ 0x50
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    DadosMotor_t dados;
    const TickType_t xPeriod = pdMS_TO_TICKS(1);
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	647b      	str	r3, [r7, #68]	@ 0x44
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8000ed4:	f008 f9e8 	bl	80092a8 <xTaskGetTickCount>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60fb      	str	r3, [r7, #12]

    while (1) {
        dados.timestamp = xTaskGetTickCount();
 8000edc:	f008 f9e4 	bl	80092a8 <xTaskGetTickCount>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	613b      	str	r3, [r7, #16]

        for (int i = 0; i < 3; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ee8:	e05e      	b.n	8000fa8 <vTaskGeraDadosMotor+0xe0>
            dados.corrente[i] = rand() % 1000;
 8000eea:	f009 fd95 	bl	800aa18 <rand>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a37      	ldr	r2, [pc, #220]	@ (8000fd0 <vTaskGeraDadosMotor+0x108>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	1191      	asrs	r1, r2, #6
 8000ef8:	17da      	asrs	r2, r3, #31
 8000efa:	1a8a      	subs	r2, r1, r2
 8000efc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f00:	fb01 f202 	mul.w	r2, r1, r2
 8000f04:	1a9a      	subs	r2, r3, r2
 8000f06:	b212      	sxth	r2, r2
 8000f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	3350      	adds	r3, #80	@ 0x50
 8000f0e:	443b      	add	r3, r7
 8000f10:	f823 2c3c 	strh.w	r2, [r3, #-60]
            dados.controle_tracao[i] = rand() % 200 - 100;
 8000f14:	f009 fd80 	bl	800aa18 <rand>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000fd4 <vTaskGeraDadosMotor+0x10c>)
 8000f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f20:	1191      	asrs	r1, r2, #6
 8000f22:	17da      	asrs	r2, r3, #31
 8000f24:	1a8a      	subs	r2, r1, r2
 8000f26:	21c8      	movs	r1, #200	@ 0xc8
 8000f28:	fb01 f202 	mul.w	r2, r1, r2
 8000f2c:	1a9a      	subs	r2, r3, r2
 8000f2e:	b293      	uxth	r3, r2
 8000f30:	3b64      	subs	r3, #100	@ 0x64
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f38:	3304      	adds	r3, #4
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	3350      	adds	r3, #80	@ 0x50
 8000f3e:	443b      	add	r3, r7
 8000f40:	f823 2c3e 	strh.w	r2, [r3, #-62]
            for (int j = 0; j < 3; j++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f48:	e028      	b.n	8000f9c <vTaskGeraDadosMotor+0xd4>
                dados.ganho_tracao[3 * i + j] = 0.1f * ((rand() % 100) / 10.0f);
 8000f4a:	f009 fd65 	bl	800aa18 <rand>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a20      	ldr	r2, [pc, #128]	@ (8000fd4 <vTaskGeraDadosMotor+0x10c>)
 8000f52:	fb82 1203 	smull	r1, r2, r2, r3
 8000f56:	1151      	asrs	r1, r2, #5
 8000f58:	17da      	asrs	r2, r3, #31
 8000f5a:	1a8a      	subs	r2, r1, r2
 8000f5c:	2164      	movs	r1, #100	@ 0x64
 8000f5e:	fb01 f202 	mul.w	r2, r1, r2
 8000f62:	1a9a      	subs	r2, r3, r2
 8000f64:	ee07 2a90 	vmov	s15, r2
 8000f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	441a      	add	r2, r3
 8000f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f7e:	4413      	add	r3, r2
 8000f80:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000fd8 <vTaskGeraDadosMotor+0x110>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	3304      	adds	r3, #4
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	3350      	adds	r3, #80	@ 0x50
 8000f8e:	443b      	add	r3, r7
 8000f90:	3b40      	subs	r3, #64	@ 0x40
 8000f92:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8000f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f98:	3301      	adds	r3, #1
 8000f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	ddd3      	ble.n	8000f4a <vTaskGeraDadosMotor+0x82>
        for (int i = 0; i < 3; i++) {
 8000fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dd9d      	ble.n	8000eea <vTaskGeraDadosMotor+0x22>
            }
        }

        xQueueSend(xFilaDadosMotor, &dados, portMAX_DELAY);
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <vTaskGeraDadosMotor+0x114>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f107 0110 	add.w	r1, r7, #16
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	f007 fa14 	bl	80083e8 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f007 ffa4 	bl	8008f14 <vTaskDelayUntil>
        dados.timestamp = xTaskGetTickCount();
 8000fcc:	e786      	b.n	8000edc <vTaskGeraDadosMotor+0x14>
 8000fce:	bf00      	nop
 8000fd0:	10624dd3 	.word	0x10624dd3
 8000fd4:	51eb851f 	.word	0x51eb851f
 8000fd8:	3dcccccd 	.word	0x3dcccccd
 8000fdc:	20000350 	.word	0x20000350

08000fe0 <vTaskGeraDadosVel>:
    }
}

void vTaskGeraDadosVel(void *pvParameters) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09c      	sub	sp, #112	@ 0x70
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    DadosVelocidade_t dados;
    const TickType_t xPeriod = pdMS_TO_TICKS(10);
 8000fe8:	230a      	movs	r3, #10
 8000fea:	667b      	str	r3, [r7, #100]	@ 0x64
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8000fec:	f008 f95c 	bl	80092a8 <xTaskGetTickCount>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]

    while (1) {
        dados.timestamp = xTaskGetTickCount();
 8000ff4:	f008 f958 	bl	80092a8 <xTaskGetTickCount>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	613b      	str	r3, [r7, #16]

        for (int i = 0; i < 3; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001000:	e0ce      	b.n	80011a0 <vTaskGeraDadosVel+0x1c0>
            dados.velocidade_angular[i] = rand() % 500;
 8001002:	f009 fd09 	bl	800aa18 <rand>
 8001006:	4603      	mov	r3, r0
 8001008:	4a6f      	ldr	r2, [pc, #444]	@ (80011c8 <vTaskGeraDadosVel+0x1e8>)
 800100a:	fb82 1203 	smull	r1, r2, r2, r3
 800100e:	1151      	asrs	r1, r2, #5
 8001010:	17da      	asrs	r2, r3, #31
 8001012:	1a8a      	subs	r2, r1, r2
 8001014:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001018:	fb01 f202 	mul.w	r2, r1, r2
 800101c:	1a9a      	subs	r2, r3, r2
 800101e:	b212      	sxth	r2, r2
 8001020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	3370      	adds	r3, #112	@ 0x70
 8001026:	443b      	add	r3, r7
 8001028:	f823 2c5c 	strh.w	r2, [r3, #-92]
            dados.aceleracao_linear[i] = rand() % 100;
 800102c:	f009 fcf4 	bl	800aa18 <rand>
 8001030:	4603      	mov	r3, r0
 8001032:	4a66      	ldr	r2, [pc, #408]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 8001034:	fb82 1203 	smull	r1, r2, r2, r3
 8001038:	1151      	asrs	r1, r2, #5
 800103a:	17da      	asrs	r2, r3, #31
 800103c:	1a8a      	subs	r2, r1, r2
 800103e:	2164      	movs	r1, #100	@ 0x64
 8001040:	fb01 f202 	mul.w	r2, r1, r2
 8001044:	1a9a      	subs	r2, r3, r2
 8001046:	b212      	sxth	r2, r2
 8001048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800104a:	3304      	adds	r3, #4
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	3370      	adds	r3, #112	@ 0x70
 8001050:	443b      	add	r3, r7
 8001052:	f823 2c5e 	strh.w	r2, [r3, #-94]
            dados.giroscopio[i] = rand() % 360;
 8001056:	f009 fcdf 	bl	800aa18 <rand>
 800105a:	4603      	mov	r3, r0
 800105c:	4a5c      	ldr	r2, [pc, #368]	@ (80011d0 <vTaskGeraDadosVel+0x1f0>)
 800105e:	fb82 1203 	smull	r1, r2, r2, r3
 8001062:	441a      	add	r2, r3
 8001064:	1211      	asrs	r1, r2, #8
 8001066:	17da      	asrs	r2, r3, #31
 8001068:	1a8a      	subs	r2, r1, r2
 800106a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800106e:	fb01 f202 	mul.w	r2, r1, r2
 8001072:	1a9a      	subs	r2, r3, r2
 8001074:	b212      	sxth	r2, r2
 8001076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001078:	3308      	adds	r3, #8
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	3370      	adds	r3, #112	@ 0x70
 800107e:	443b      	add	r3, r7
 8001080:	f823 2c60 	strh.w	r2, [r3, #-96]
            dados.campo_magnetico[i] = rand() % 100;
 8001084:	f009 fcc8 	bl	800aa18 <rand>
 8001088:	4603      	mov	r3, r0
 800108a:	4a50      	ldr	r2, [pc, #320]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 800108c:	fb82 1203 	smull	r1, r2, r2, r3
 8001090:	1151      	asrs	r1, r2, #5
 8001092:	17da      	asrs	r2, r3, #31
 8001094:	1a8a      	subs	r2, r1, r2
 8001096:	2164      	movs	r1, #100	@ 0x64
 8001098:	fb01 f202 	mul.w	r2, r1, r2
 800109c:	1a9a      	subs	r2, r3, r2
 800109e:	b212      	sxth	r2, r2
 80010a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010a2:	3308      	adds	r3, #8
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	3370      	adds	r3, #112	@ 0x70
 80010a8:	443b      	add	r3, r7
 80010aa:	f823 2c5a 	strh.w	r2, [r3, #-90]
            dados.controle_velocidade[i] = rand() % 200 - 100;
 80010ae:	f009 fcb3 	bl	800aa18 <rand>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a45      	ldr	r2, [pc, #276]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 80010b6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ba:	1191      	asrs	r1, r2, #6
 80010bc:	17da      	asrs	r2, r3, #31
 80010be:	1a8a      	subs	r2, r1, r2
 80010c0:	21c8      	movs	r1, #200	@ 0xc8
 80010c2:	fb01 f202 	mul.w	r2, r1, r2
 80010c6:	1a9a      	subs	r2, r3, r2
 80010c8:	b293      	uxth	r3, r2
 80010ca:	3b64      	subs	r3, #100	@ 0x64
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010d2:	330c      	adds	r3, #12
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	3370      	adds	r3, #112	@ 0x70
 80010d8:	443b      	add	r3, r7
 80010da:	f823 2c5c 	strh.w	r2, [r3, #-92]
            dados.setpoint_velocidade[i] = 100 + rand() % 200;
 80010de:	f009 fc9b 	bl	800aa18 <rand>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a39      	ldr	r2, [pc, #228]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 80010e6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ea:	1191      	asrs	r1, r2, #6
 80010ec:	17da      	asrs	r2, r3, #31
 80010ee:	1a8a      	subs	r2, r1, r2
 80010f0:	21c8      	movs	r1, #200	@ 0xc8
 80010f2:	fb01 f202 	mul.w	r2, r1, r2
 80010f6:	1a9a      	subs	r2, r3, r2
 80010f8:	b293      	uxth	r3, r2
 80010fa:	3364      	adds	r3, #100	@ 0x64
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b21a      	sxth	r2, r3
 8001100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001102:	3310      	adds	r3, #16
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	3370      	adds	r3, #112	@ 0x70
 8001108:	443b      	add	r3, r7
 800110a:	f823 2c5e 	strh.w	r2, [r3, #-94]
            dados.angulo_rotacao[i] = rand() % 360;
 800110e:	f009 fc83 	bl	800aa18 <rand>
 8001112:	4603      	mov	r3, r0
 8001114:	4a2e      	ldr	r2, [pc, #184]	@ (80011d0 <vTaskGeraDadosVel+0x1f0>)
 8001116:	fb82 1203 	smull	r1, r2, r2, r3
 800111a:	441a      	add	r2, r3
 800111c:	1211      	asrs	r1, r2, #8
 800111e:	17da      	asrs	r2, r3, #31
 8001120:	1a8a      	subs	r2, r1, r2
 8001122:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001126:	fb01 f202 	mul.w	r2, r1, r2
 800112a:	1a9a      	subs	r2, r3, r2
 800112c:	b212      	sxth	r2, r2
 800112e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001130:	3324      	adds	r3, #36	@ 0x24
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	3370      	adds	r3, #112	@ 0x70
 8001136:	443b      	add	r3, r7
 8001138:	f823 2c5c 	strh.w	r2, [r3, #-92]
            for (int j = 0; j < 3; j++) {
 800113c:	2300      	movs	r3, #0
 800113e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001140:	e028      	b.n	8001194 <vTaskGeraDadosVel+0x1b4>
                dados.ganho_velocidade[3 * i + j] = 0.05f * ((rand() % 100) / 10.0f);
 8001142:	f009 fc69 	bl	800aa18 <rand>
 8001146:	4603      	mov	r3, r0
 8001148:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1151      	asrs	r1, r2, #5
 8001150:	17da      	asrs	r2, r3, #31
 8001152:	1a8a      	subs	r2, r1, r2
 8001154:	2164      	movs	r1, #100	@ 0x64
 8001156:	fb01 f202 	mul.w	r2, r1, r2
 800115a:	1a9a      	subs	r2, r3, r2
 800115c:	ee07 2a90 	vmov	s15, r2
 8001160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001164:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	441a      	add	r2, r3
 8001174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001176:	4413      	add	r3, r2
 8001178:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80011d4 <vTaskGeraDadosVel+0x1f4>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	330a      	adds	r3, #10
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	3370      	adds	r3, #112	@ 0x70
 8001186:	443b      	add	r3, r7
 8001188:	3b60      	subs	r3, #96	@ 0x60
 800118a:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 800118e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001190:	3301      	adds	r3, #1
 8001192:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001196:	2b02      	cmp	r3, #2
 8001198:	ddd3      	ble.n	8001142 <vTaskGeraDadosVel+0x162>
        for (int i = 0; i < 3; i++) {
 800119a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800119c:	3301      	adds	r3, #1
 800119e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	f77f af2d 	ble.w	8001002 <vTaskGeraDadosVel+0x22>
            }
        }

        xQueueSend(xFilaDadosVelocidade, &dados, portMAX_DELAY);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <vTaskGeraDadosVel+0x1f8>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f107 0110 	add.w	r1, r7, #16
 80011b0:	2300      	movs	r3, #0
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	f007 f917 	bl	80083e8 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80011c0:	4618      	mov	r0, r3
 80011c2:	f007 fea7 	bl	8008f14 <vTaskDelayUntil>
        dados.timestamp = xTaskGetTickCount();
 80011c6:	e715      	b.n	8000ff4 <vTaskGeraDadosVel+0x14>
 80011c8:	10624dd3 	.word	0x10624dd3
 80011cc:	51eb851f 	.word	0x51eb851f
 80011d0:	b60b60b7 	.word	0xb60b60b7
 80011d4:	3d4ccccd 	.word	0x3d4ccccd
 80011d8:	20000354 	.word	0x20000354

080011dc <vTaskGeraDadosGPS>:
    }
}

void vTaskGeraDadosGPS(void *pvParameters) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b090      	sub	sp, #64	@ 0x40
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    DadosGPS_t dados;
    const TickType_t xPeriod = pdMS_TO_TICKS(100);
 80011e4:	2364      	movs	r3, #100	@ 0x64
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80011e8:	f008 f85e 	bl	80092a8 <xTaskGetTickCount>
 80011ec:	4603      	mov	r3, r0
 80011ee:	60bb      	str	r3, [r7, #8]

    while (1) {
        dados.timestamp = xTaskGetTickCount();
 80011f0:	f008 f85a 	bl	80092a8 <xTaskGetTickCount>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
        dados.x = rand() % 10000;
 80011f8:	f009 fc0e 	bl	800aa18 <rand>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b57      	ldr	r3, [pc, #348]	@ (800135c <vTaskGeraDadosGPS+0x180>)
 8001200:	fb83 1302 	smull	r1, r3, r3, r2
 8001204:	1319      	asrs	r1, r3, #12
 8001206:	17d3      	asrs	r3, r2, #31
 8001208:	1acb      	subs	r3, r1, r3
 800120a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	613b      	str	r3, [r7, #16]
        dados.y = rand() % 10000;
 8001216:	f009 fbff 	bl	800aa18 <rand>
 800121a:	4602      	mov	r2, r0
 800121c:	4b4f      	ldr	r3, [pc, #316]	@ (800135c <vTaskGeraDadosGPS+0x180>)
 800121e:	fb83 1302 	smull	r1, r3, r3, r2
 8001222:	1319      	asrs	r1, r3, #12
 8001224:	17d3      	asrs	r3, r2, #31
 8001226:	1acb      	subs	r3, r1, r3
 8001228:	f242 7110 	movw	r1, #10000	@ 0x2710
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
        dados.z = rand() % 1000;
 8001234:	f009 fbf0 	bl	800aa18 <rand>
 8001238:	4602      	mov	r2, r0
 800123a:	4b49      	ldr	r3, [pc, #292]	@ (8001360 <vTaskGeraDadosGPS+0x184>)
 800123c:	fb83 1302 	smull	r1, r3, r3, r2
 8001240:	1199      	asrs	r1, r3, #6
 8001242:	17d3      	asrs	r3, r2, #31
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 3; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001256:	e03b      	b.n	80012d0 <vTaskGeraDadosGPS+0xf4>
            dados.controle_posicao[i] = rand() % 200 - 100;
 8001258:	f009 fbde 	bl	800aa18 <rand>
 800125c:	4603      	mov	r3, r0
 800125e:	4a41      	ldr	r2, [pc, #260]	@ (8001364 <vTaskGeraDadosGPS+0x188>)
 8001260:	fb82 1203 	smull	r1, r2, r2, r3
 8001264:	1191      	asrs	r1, r2, #6
 8001266:	17da      	asrs	r2, r3, #31
 8001268:	1a8a      	subs	r2, r1, r2
 800126a:	21c8      	movs	r1, #200	@ 0xc8
 800126c:	fb01 f202 	mul.w	r2, r1, r2
 8001270:	1a9a      	subs	r2, r3, r2
 8001272:	b293      	uxth	r3, r2
 8001274:	3b64      	subs	r3, #100	@ 0x64
 8001276:	b29b      	uxth	r3, r3
 8001278:	b21a      	sxth	r2, r3
 800127a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800127c:	3308      	adds	r3, #8
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	3340      	adds	r3, #64	@ 0x40
 8001282:	443b      	add	r3, r7
 8001284:	f823 2c34 	strh.w	r2, [r3, #-52]
            dados.ganho_posicao[i] = 0.01f * ((rand() % 100) / 10.0f);
 8001288:	f009 fbc6 	bl	800aa18 <rand>
 800128c:	4603      	mov	r3, r0
 800128e:	4a35      	ldr	r2, [pc, #212]	@ (8001364 <vTaskGeraDadosGPS+0x188>)
 8001290:	fb82 1203 	smull	r1, r2, r2, r3
 8001294:	1151      	asrs	r1, r2, #5
 8001296:	17da      	asrs	r2, r3, #31
 8001298:	1a8a      	subs	r2, r1, r2
 800129a:	2164      	movs	r1, #100	@ 0x64
 800129c:	fb01 f202 	mul.w	r2, r1, r2
 80012a0:	1a9a      	subs	r2, r3, r2
 80012a2:	ee07 2a90 	vmov	s15, r2
 80012a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012aa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001368 <vTaskGeraDadosGPS+0x18c>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012bc:	3306      	adds	r3, #6
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	3340      	adds	r3, #64	@ 0x40
 80012c2:	443b      	add	r3, r7
 80012c4:	3b34      	subs	r3, #52	@ 0x34
 80012c6:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80012ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012cc:	3301      	adds	r3, #1
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	ddc0      	ble.n	8001258 <vTaskGeraDadosGPS+0x7c>
        }

        dados.roll = rand() % 360;
 80012d6:	f009 fb9f 	bl	800aa18 <rand>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a23      	ldr	r2, [pc, #140]	@ (800136c <vTaskGeraDadosGPS+0x190>)
 80012de:	fb82 1203 	smull	r1, r2, r2, r3
 80012e2:	441a      	add	r2, r3
 80012e4:	1211      	asrs	r1, r2, #8
 80012e6:	17da      	asrs	r2, r3, #31
 80012e8:	1a8a      	subs	r2, r1, r2
 80012ea:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80012ee:	fb01 f202 	mul.w	r2, r1, r2
 80012f2:	1a9a      	subs	r2, r3, r2
 80012f4:	b213      	sxth	r3, r2
 80012f6:	863b      	strh	r3, [r7, #48]	@ 0x30
        dados.pitch = rand() % 360;
 80012f8:	f009 fb8e 	bl	800aa18 <rand>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1b      	ldr	r2, [pc, #108]	@ (800136c <vTaskGeraDadosGPS+0x190>)
 8001300:	fb82 1203 	smull	r1, r2, r2, r3
 8001304:	441a      	add	r2, r3
 8001306:	1211      	asrs	r1, r2, #8
 8001308:	17da      	asrs	r2, r3, #31
 800130a:	1a8a      	subs	r2, r1, r2
 800130c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001310:	fb01 f202 	mul.w	r2, r1, r2
 8001314:	1a9a      	subs	r2, r3, r2
 8001316:	b213      	sxth	r3, r2
 8001318:	867b      	strh	r3, [r7, #50]	@ 0x32
        dados.yaw = rand() % 360;
 800131a:	f009 fb7d 	bl	800aa18 <rand>
 800131e:	4603      	mov	r3, r0
 8001320:	4a12      	ldr	r2, [pc, #72]	@ (800136c <vTaskGeraDadosGPS+0x190>)
 8001322:	fb82 1203 	smull	r1, r2, r2, r3
 8001326:	441a      	add	r2, r3
 8001328:	1211      	asrs	r1, r2, #8
 800132a:	17da      	asrs	r2, r3, #31
 800132c:	1a8a      	subs	r2, r1, r2
 800132e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001332:	fb01 f202 	mul.w	r2, r1, r2
 8001336:	1a9a      	subs	r2, r3, r2
 8001338:	b213      	sxth	r3, r2
 800133a:	86bb      	strh	r3, [r7, #52]	@ 0x34

        xQueueSend(xFilaDadosGPS, &dados, portMAX_DELAY);
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <vTaskGeraDadosGPS+0x194>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	f107 010c 	add.w	r1, r7, #12
 8001344:	2300      	movs	r3, #0
 8001346:	f04f 32ff 	mov.w	r2, #4294967295
 800134a:	f007 f84d 	bl	80083e8 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001354:	4618      	mov	r0, r3
 8001356:	f007 fddd 	bl	8008f14 <vTaskDelayUntil>
        dados.timestamp = xTaskGetTickCount();
 800135a:	e749      	b.n	80011f0 <vTaskGeraDadosGPS+0x14>
 800135c:	68db8bad 	.word	0x68db8bad
 8001360:	10624dd3 	.word	0x10624dd3
 8001364:	51eb851f 	.word	0x51eb851f
 8001368:	3c23d70a 	.word	0x3c23d70a
 800136c:	b60b60b7 	.word	0xb60b60b7
 8001370:	20000358 	.word	0x20000358

08001374 <serializar_bloco>:
    }
}

size_t serializar_bloco(uint8_t tipo, const void *dados, uint16_t tamanho, uint8_t *destino) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4603      	mov	r3, r0
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	4613      	mov	r3, r2
 8001384:	81bb      	strh	r3, [r7, #12]
    destino[0] = tipo;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	701a      	strb	r2, [r3, #0]
    destino[1] = (uint8_t)(tamanho & 0xFF);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	89ba      	ldrh	r2, [r7, #12]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
    destino[2] = (uint8_t)((tamanho >> 8) & 0xFF);
 8001396:	89bb      	ldrh	r3, [r7, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3302      	adds	r3, #2
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
    memcpy(&destino[3], dados, tamanho);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3303      	adds	r3, #3
 80013a8:	89ba      	ldrh	r2, [r7, #12]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f009 fcf2 	bl	800ad96 <memcpy>
    return 3 + tamanho;
 80013b2:	89bb      	ldrh	r3, [r7, #12]
 80013b4:	3303      	adds	r3, #3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <vTaskTransmissao>:

void vTaskTransmissao(void *pvParameters) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0e2      	sub	sp, #392	@ 0x188
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80013ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80013ce:	6018      	str	r0, [r3, #0]
    size_t offset;
    DadosMotor_t motor;
    DadosVelocidade_t velocidade;
    DadosGPS_t gps;

    const TickType_t xPeriod = pdMS_TO_TICKS(100);
 80013d0:	2364      	movs	r3, #100	@ 0x64
 80013d2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80013d6:	f007 ff67 	bl	80092a8 <xTaskGetTickCount>
 80013da:	4602      	mov	r2, r0
 80013dc:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80013e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80013e4:	601a      	str	r2, [r3, #0]

    while (1) {
        offset = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184

        if (xQueueReceive(xFilaDadosMotor, &motor, 0)) {
 80013ec:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <vTaskTransmissao+0x100>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80013f4:	2200      	movs	r2, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f007 f996 	bl	8008728 <xQueueReceive>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d010      	beq.n	8001424 <vTaskTransmissao+0x64>
            offset += serializar_bloco(TIPO_MOTOR, &motor, sizeof(DadosMotor_t), &buffer[offset]);
 8001402:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001406:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800140a:	4413      	add	r3, r2
 800140c:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001410:	2234      	movs	r2, #52	@ 0x34
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff ffae 	bl	8001374 <serializar_bloco>
 8001418:	4602      	mov	r2, r0
 800141a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800141e:	4413      	add	r3, r2
 8001420:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
        }

        if (xQueueReceive(xFilaDadosVelocidade, &velocidade, 0)) {
 8001424:	4b27      	ldr	r3, [pc, #156]	@ (80014c4 <vTaskTransmissao+0x104>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800142c:	2200      	movs	r2, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f007 f97a 	bl	8008728 <xQueueReceive>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <vTaskTransmissao+0x9c>
            offset += serializar_bloco(TIPO_VELOC, &velocidade, sizeof(DadosVelocidade_t), &buffer[offset]);
 800143a:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 800143e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001442:	4413      	add	r3, r2
 8001444:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001448:	2254      	movs	r2, #84	@ 0x54
 800144a:	2002      	movs	r0, #2
 800144c:	f7ff ff92 	bl	8001374 <serializar_bloco>
 8001450:	4602      	mov	r2, r0
 8001452:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001456:	4413      	add	r3, r2
 8001458:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
        }

        if (xQueueReceive(xFilaDadosGPS, &gps, 0)) {
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <vTaskTransmissao+0x108>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f107 010c 	add.w	r1, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f007 f95e 	bl	8008728 <xQueueReceive>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d010      	beq.n	8001494 <vTaskTransmissao+0xd4>
            offset += serializar_bloco(TIPO_GPS, &gps, sizeof(DadosGPS_t), &buffer[offset]);
 8001472:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001476:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800147a:	4413      	add	r3, r2
 800147c:	f107 010c 	add.w	r1, r7, #12
 8001480:	222c      	movs	r2, #44	@ 0x2c
 8001482:	2003      	movs	r0, #3
 8001484:	f7ff ff76 	bl	8001374 <serializar_bloco>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800148e:	4413      	add	r3, r2
 8001490:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
        }

        if (offset > 0) {
 8001494:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <vTaskTransmissao+0xf0>
            HAL_UART_Transmit(&huart6, buffer, offset, HAL_MAX_DELAY);
 800149c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	4808      	ldr	r0, [pc, #32]	@ (80014cc <vTaskTransmissao+0x10c>)
 80014ac:	f005 fc16 	bl	8006cdc <HAL_UART_Transmit>
        }

        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 80014b8:	4618      	mov	r0, r3
 80014ba:	f007 fd2b 	bl	8008f14 <vTaskDelayUntil>
        offset = 0;
 80014be:	e792      	b.n	80013e6 <vTaskTransmissao+0x26>
 80014c0:	20000350 	.word	0x20000350
 80014c4:	20000354 	.word	0x20000354
 80014c8:	20000358 	.word	0x20000358
 80014cc:	20000304 	.word	0x20000304

080014d0 <vTaskRecepcao>:
    }
}

void vTaskRecepcao(void *pvParameters) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    ComandoRecebido_t comando;
    while (1) {
        if (xQueueReceive(xFilaComandos, &comando, portMAX_DELAY)) {
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <vTaskRecepcao+0x44>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f107 010f 	add.w	r1, r7, #15
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	4618      	mov	r0, r3
 80014e6:	f007 f91f 	bl	8008728 <xQueueReceive>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f3      	beq.n	80014d8 <vTaskRecepcao+0x8>
            switch (comando) {
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d006      	beq.n	8001504 <vTaskRecepcao+0x34>
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	dc06      	bgt.n	8001508 <vTaskRecepcao+0x38>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <vTaskRecepcao+0x3c>
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d006      	beq.n	8001510 <vTaskRecepcao+0x40>
                case CMD_RESET: break;
                case CMD_MODO_AUTONOMO: break;
                case CMD_MODO_MANUAL: break;
                default: break;
 8001502:	e001      	b.n	8001508 <vTaskRecepcao+0x38>
                case CMD_MODO_MANUAL: break;
 8001504:	bf00      	nop
 8001506:	e7e7      	b.n	80014d8 <vTaskRecepcao+0x8>
                default: break;
 8001508:	bf00      	nop
 800150a:	e7e5      	b.n	80014d8 <vTaskRecepcao+0x8>
                case CMD_RESET: break;
 800150c:	bf00      	nop
 800150e:	e7e3      	b.n	80014d8 <vTaskRecepcao+0x8>
                case CMD_MODO_AUTONOMO: break;
 8001510:	bf00      	nop
        if (xQueueReceive(xFilaComandos, &comando, portMAX_DELAY)) {
 8001512:	e7e1      	b.n	80014d8 <vTaskRecepcao+0x8>
 8001514:	2000035c 	.word	0x2000035c

08001518 <HAL_UART_RxCpltCallback>:
            }
        }
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <HAL_UART_RxCpltCallback+0x54>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d11d      	bne.n	8001564 <HAL_UART_RxCpltCallback+0x4c>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
        ComandoRecebido_t cmd = (ComandoRecebido_t)comando_recebido;
 800152c:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_UART_RxCpltCallback+0x58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	72fb      	strb	r3, [r7, #11]
        xQueueSendFromISR(xFilaComandos, &cmd, &xHigherPriorityTaskWoken);
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <HAL_UART_RxCpltCallback+0x5c>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	f107 010b 	add.w	r1, r7, #11
 800153e:	2300      	movs	r3, #0
 8001540:	f007 f854 	bl	80085ec <xQueueGenericSendFromISR>
        HAL_UART_Receive_IT(&huart6, &comando_recebido, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	490a      	ldr	r1, [pc, #40]	@ (8001570 <HAL_UART_RxCpltCallback+0x58>)
 8001548:	4808      	ldr	r0, [pc, #32]	@ (800156c <HAL_UART_RxCpltCallback+0x54>)
 800154a:	f005 fc52 	bl	8006df2 <HAL_UART_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <HAL_UART_RxCpltCallback+0x4c>
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_UART_RxCpltCallback+0x60>)
 8001556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f3bf 8f4f 	dsb	sy
 8001560:	f3bf 8f6f 	isb	sy
    }
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000304 	.word	0x20000304
 8001570:	20000364 	.word	0x20000364
 8001574:	2000035c 	.word	0x2000035c
 8001578:	e000ed04 	.word	0xe000ed04

0800157c <SetupTarefasPortaCOMM>:

void SetupTarefasPortaCOMM(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
    xFilaDadosMotor       = xQueueCreate(TAM_FILA_DADOS_MOTOR, sizeof(DadosMotor_t));
 8001582:	2200      	movs	r2, #0
 8001584:	2134      	movs	r1, #52	@ 0x34
 8001586:	2078      	movs	r0, #120	@ 0x78
 8001588:	f006 fecf 	bl	800832a <xQueueGenericCreate>
 800158c:	4603      	mov	r3, r0
 800158e:	4a4d      	ldr	r2, [pc, #308]	@ (80016c4 <SetupTarefasPortaCOMM+0x148>)
 8001590:	6013      	str	r3, [r2, #0]
    xFilaDadosVelocidade  = xQueueCreate(TAM_FILA_DADOS_VELOCIDADE, sizeof(DadosVelocidade_t));
 8001592:	2200      	movs	r2, #0
 8001594:	2154      	movs	r1, #84	@ 0x54
 8001596:	200c      	movs	r0, #12
 8001598:	f006 fec7 	bl	800832a <xQueueGenericCreate>
 800159c:	4603      	mov	r3, r0
 800159e:	4a4a      	ldr	r2, [pc, #296]	@ (80016c8 <SetupTarefasPortaCOMM+0x14c>)
 80015a0:	6013      	str	r3, [r2, #0]
    xFilaDadosGPS         = xQueueCreate(TAM_FILA_DADOS_GPS, sizeof(DadosGPS_t));
 80015a2:	2200      	movs	r2, #0
 80015a4:	212c      	movs	r1, #44	@ 0x2c
 80015a6:	2002      	movs	r0, #2
 80015a8:	f006 febf 	bl	800832a <xQueueGenericCreate>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a47      	ldr	r2, [pc, #284]	@ (80016cc <SetupTarefasPortaCOMM+0x150>)
 80015b0:	6013      	str	r3, [r2, #0]
    xFilaComandos         = xQueueCreate(5, sizeof(ComandoRecebido_t));
 80015b2:	2200      	movs	r2, #0
 80015b4:	2101      	movs	r1, #1
 80015b6:	2005      	movs	r0, #5
 80015b8:	f006 feb7 	bl	800832a <xQueueGenericCreate>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a44      	ldr	r2, [pc, #272]	@ (80016d0 <SetupTarefasPortaCOMM+0x154>)
 80015c0:	6013      	str	r3, [r2, #0]

    configASSERT(xFilaDadosMotor != NULL);
 80015c2:	4b40      	ldr	r3, [pc, #256]	@ (80016c4 <SetupTarefasPortaCOMM+0x148>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10b      	bne.n	80015e2 <SetupTarefasPortaCOMM+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80015ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ce:	f383 8811 	msr	BASEPRI, r3
 80015d2:	f3bf 8f6f 	isb	sy
 80015d6:	f3bf 8f4f 	dsb	sy
 80015da:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	e7fd      	b.n	80015de <SetupTarefasPortaCOMM+0x62>
    configASSERT(xFilaDadosVelocidade != NULL);
 80015e2:	4b39      	ldr	r3, [pc, #228]	@ (80016c8 <SetupTarefasPortaCOMM+0x14c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10b      	bne.n	8001602 <SetupTarefasPortaCOMM+0x86>
	__asm volatile
 80015ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ee:	f383 8811 	msr	BASEPRI, r3
 80015f2:	f3bf 8f6f 	isb	sy
 80015f6:	f3bf 8f4f 	dsb	sy
 80015fa:	60bb      	str	r3, [r7, #8]
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	e7fd      	b.n	80015fe <SetupTarefasPortaCOMM+0x82>
    configASSERT(xFilaDadosGPS != NULL);
 8001602:	4b32      	ldr	r3, [pc, #200]	@ (80016cc <SetupTarefasPortaCOMM+0x150>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10b      	bne.n	8001622 <SetupTarefasPortaCOMM+0xa6>
	__asm volatile
 800160a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800160e:	f383 8811 	msr	BASEPRI, r3
 8001612:	f3bf 8f6f 	isb	sy
 8001616:	f3bf 8f4f 	dsb	sy
 800161a:	607b      	str	r3, [r7, #4]
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	e7fd      	b.n	800161e <SetupTarefasPortaCOMM+0xa2>
    configASSERT(xFilaComandos != NULL);
 8001622:	4b2b      	ldr	r3, [pc, #172]	@ (80016d0 <SetupTarefasPortaCOMM+0x154>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <SetupTarefasPortaCOMM+0xc6>
	__asm volatile
 800162a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800162e:	f383 8811 	msr	BASEPRI, r3
 8001632:	f3bf 8f6f 	isb	sy
 8001636:	f3bf 8f4f 	dsb	sy
 800163a:	603b      	str	r3, [r7, #0]
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	e7fd      	b.n	800163e <SetupTarefasPortaCOMM+0xc2>

    HAL_UART_Receive_IT(&huart6, &comando_recebido, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	4923      	ldr	r1, [pc, #140]	@ (80016d4 <SetupTarefasPortaCOMM+0x158>)
 8001646:	4824      	ldr	r0, [pc, #144]	@ (80016d8 <SetupTarefasPortaCOMM+0x15c>)
 8001648:	f005 fbd3 	bl	8006df2 <HAL_UART_Receive_IT>

    xTaskCreate(vTaskTransmissao,  "Transmite", 256, NULL, 2, NULL);
 800164c:	2300      	movs	r3, #0
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2302      	movs	r3, #2
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800165a:	4920      	ldr	r1, [pc, #128]	@ (80016dc <SetupTarefasPortaCOMM+0x160>)
 800165c:	4820      	ldr	r0, [pc, #128]	@ (80016e0 <SetupTarefasPortaCOMM+0x164>)
 800165e:	f007 fb13 	bl	8008c88 <xTaskCreate>
    xTaskCreate(vTaskRecepcao,    "Recepcao",  256, NULL, 2, &xHandleRecepcao);
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <SetupTarefasPortaCOMM+0x168>)
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	2302      	movs	r3, #2
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001670:	491d      	ldr	r1, [pc, #116]	@ (80016e8 <SetupTarefasPortaCOMM+0x16c>)
 8001672:	481e      	ldr	r0, [pc, #120]	@ (80016ec <SetupTarefasPortaCOMM+0x170>)
 8001674:	f007 fb08 	bl	8008c88 <xTaskCreate>
    xTaskCreate(vTaskGeraDadosMotor, "Gera Dados Motor", 256, NULL, 2, NULL);
 8001678:	2300      	movs	r3, #0
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	2302      	movs	r3, #2
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2300      	movs	r3, #0
 8001682:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001686:	491a      	ldr	r1, [pc, #104]	@ (80016f0 <SetupTarefasPortaCOMM+0x174>)
 8001688:	481a      	ldr	r0, [pc, #104]	@ (80016f4 <SetupTarefasPortaCOMM+0x178>)
 800168a:	f007 fafd 	bl	8008c88 <xTaskCreate>
    xTaskCreate(vTaskGeraDadosVel, "Gera Dados Velocidade", 256, NULL, 2, NULL);
 800168e:	2300      	movs	r3, #0
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	2302      	movs	r3, #2
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800169c:	4916      	ldr	r1, [pc, #88]	@ (80016f8 <SetupTarefasPortaCOMM+0x17c>)
 800169e:	4817      	ldr	r0, [pc, #92]	@ (80016fc <SetupTarefasPortaCOMM+0x180>)
 80016a0:	f007 faf2 	bl	8008c88 <xTaskCreate>
    xTaskCreate(vTaskGeraDadosGPS, "Gera Dados GPS", 256, NULL, 2, NULL);
 80016a4:	2300      	movs	r3, #0
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	2302      	movs	r3, #2
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2300      	movs	r3, #0
 80016ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b2:	4913      	ldr	r1, [pc, #76]	@ (8001700 <SetupTarefasPortaCOMM+0x184>)
 80016b4:	4813      	ldr	r0, [pc, #76]	@ (8001704 <SetupTarefasPortaCOMM+0x188>)
 80016b6:	f007 fae7 	bl	8008c88 <xTaskCreate>
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000350 	.word	0x20000350
 80016c8:	20000354 	.word	0x20000354
 80016cc:	20000358 	.word	0x20000358
 80016d0:	2000035c 	.word	0x2000035c
 80016d4:	20000364 	.word	0x20000364
 80016d8:	20000304 	.word	0x20000304
 80016dc:	0800ba10 	.word	0x0800ba10
 80016e0:	080013c1 	.word	0x080013c1
 80016e4:	20000360 	.word	0x20000360
 80016e8:	0800ba1c 	.word	0x0800ba1c
 80016ec:	080014d1 	.word	0x080014d1
 80016f0:	0800ba28 	.word	0x0800ba28
 80016f4:	08000ec9 	.word	0x08000ec9
 80016f8:	0800ba3c 	.word	0x0800ba3c
 80016fc:	08000fe1 	.word	0x08000fe1
 8001700:	0800ba54 	.word	0x0800ba54
 8001704:	080011dd 	.word	0x080011dd

08001708 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_MspInit+0x54>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	4a11      	ldr	r2, [pc, #68]	@ (800175c <HAL_MspInit+0x54>)
 8001718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800171c:	6453      	str	r3, [r2, #68]	@ 0x44
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_MspInit+0x54>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_MspInit+0x54>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_MspInit+0x54>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <HAL_MspInit+0x54>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	210f      	movs	r1, #15
 800174a:	f06f 0001 	mvn.w	r0, #1
 800174e:	f001 f861 	bl	8002814 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a24      	ldr	r2, [pc, #144]	@ (8001810 <HAL_ADC_MspInit+0xb0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d141      	bne.n	8001806 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	4a22      	ldr	r2, [pc, #136]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001790:	6453      	str	r3, [r2, #68]	@ 0x44
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_ADC_MspInit+0xb4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Corrente_Motor1_ADC1_IN4_Pin|Corrente_Motor2_ADC1_IN5_Pin;
 80017d6:	2330      	movs	r3, #48	@ 0x30
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	480b      	ldr	r0, [pc, #44]	@ (8001818 <HAL_ADC_MspInit+0xb8>)
 80017ea:	f001 f8dd 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Corrente_Motor3_ADC1_IN8_Pin|Monitor_Voltagem_Bateria_Pin;
 80017ee:	2303      	movs	r3, #3
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f2:	2303      	movs	r3, #3
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4806      	ldr	r0, [pc, #24]	@ (800181c <HAL_ADC_MspInit+0xbc>)
 8001802:	f001 f8d1 	bl	80029a8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40012000 	.word	0x40012000
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400

08001820 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a21      	ldr	r2, [pc, #132]	@ (80018c4 <HAL_I2C_MspInit+0xa4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d13c      	bne.n	80018bc <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_I2C_MspInit+0xa8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a1f      	ldr	r2, [pc, #124]	@ (80018c8 <HAL_I2C_MspInit+0xa8>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <HAL_I2C_MspInit+0xa8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 800185e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001864:	2312      	movs	r3, #18
 8001866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001870:	2304      	movs	r3, #4
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4814      	ldr	r0, [pc, #80]	@ (80018cc <HAL_I2C_MspInit+0xac>)
 800187c:	f001 f894 	bl	80029a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_I2C_MspInit+0xa8>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	4a0f      	ldr	r2, [pc, #60]	@ (80018c8 <HAL_I2C_MspInit+0xa8>)
 800188a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800188e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001890:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_I2C_MspInit+0xa8>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2105      	movs	r1, #5
 80018a0:	201f      	movs	r0, #31
 80018a2:	f000 ffb7 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018a6:	201f      	movs	r0, #31
 80018a8:	f000 ffd0 	bl	800284c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2105      	movs	r1, #5
 80018b0:	2020      	movs	r0, #32
 80018b2:	f000 ffaf 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018b6:	2020      	movs	r0, #32
 80018b8:	f000 ffc8 	bl	800284c <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	@ 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400

080018d0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001920 <HAL_RTC_MspInit+0x50>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d111      	bne.n	8001918 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018f4:	2302      	movs	r3, #2
 80018f6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018fc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fcee 	bl	80052e4 <HAL_RCCEx_PeriphCLKConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800190e:	f7ff fad5 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001912:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <HAL_RTC_MspInit+0x54>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001918:	bf00      	nop
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40002800 	.word	0x40002800
 8001924:	42470e3c 	.word	0x42470e3c

08001928 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2c      	ldr	r2, [pc, #176]	@ (80019f8 <HAL_SPI_MspInit+0xd0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d152      	bne.n	80019f0 <HAL_SPI_MspInit+0xc8>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	4a2a      	ldr	r2, [pc, #168]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 8001954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44
 800195a:	4b28      	ldr	r3, [pc, #160]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a23      	ldr	r2, [pc, #140]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <HAL_SPI_MspInit+0xd4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ETH_SPI1_MISO_Pin|ETH_SPI1_MOSI_Pin|ETH_SPI1_NSS_Pin;
 800199e:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b0:	2305      	movs	r3, #5
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4811      	ldr	r0, [pc, #68]	@ (8001a00 <HAL_SPI_MspInit+0xd8>)
 80019bc:	f000 fff4 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_SPI1_SCK_Pin;
 80019c0:	2308      	movs	r3, #8
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d0:	2305      	movs	r3, #5
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ETH_SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <HAL_SPI_MspInit+0xdc>)
 80019dc:	f000 ffe4 	bl	80029a8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2105      	movs	r1, #5
 80019e4:	2023      	movs	r0, #35	@ 0x23
 80019e6:	f000 ff15 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019ea:	2023      	movs	r0, #35	@ 0x23
 80019ec:	f000 ff2e 	bl	800284c <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	@ 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013000 	.word	0x40013000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400

08001a08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0e      	ldr	r2, [pc, #56]	@ (8001a50 <HAL_TIM_Base_MspInit+0x48>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d115      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <HAL_TIM_Base_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	4a0c      	ldr	r2, [pc, #48]	@ (8001a54 <HAL_TIM_Base_MspInit+0x4c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_TIM_Base_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	210f      	movs	r1, #15
 8001a3a:	2019      	movs	r0, #25
 8001a3c:	f000 feea 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a40:	2019      	movs	r0, #25
 8001a42:	f000 ff03 	bl	800284c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40010000 	.word	0x40010000
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	@ 0x38
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba4 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4a49      	ldr	r2, [pc, #292]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a42      	ldr	r2, [pc, #264]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b40      	ldr	r3, [pc, #256]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Motor2_T3_CH1_Pin|Encoder_B_Motor2_T3_CH2_Pin;
 8001ab2:	2330      	movs	r3, #48	@ 0x30
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aca:	4619      	mov	r1, r3
 8001acc:	4837      	ldr	r0, [pc, #220]	@ (8001bac <HAL_TIM_Encoder_MspInit+0x154>)
 8001ace:	f000 ff6b 	bl	80029a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ad2:	e062      	b.n	8001b9a <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM4)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a35      	ldr	r2, [pc, #212]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x158>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12c      	bne.n	8001b38 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	4b31      	ldr	r3, [pc, #196]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a30      	ldr	r2, [pc, #192]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a29      	ldr	r2, [pc, #164]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_A_Motor3_T4_CH1_Pin|Encoder_B_Motor3_T4_CH2_Pin;
 8001b16:	23c0      	movs	r3, #192	@ 0xc0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b26:	2302      	movs	r3, #2
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481e      	ldr	r0, [pc, #120]	@ (8001bac <HAL_TIM_Encoder_MspInit+0x154>)
 8001b32:	f000 ff39 	bl	80029a8 <HAL_GPIO_Init>
}
 8001b36:	e030      	b.n	8001b9a <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM5)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d12b      	bne.n	8001b9a <HAL_TIM_Encoder_MspInit+0x142>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_A_Motor1_T5_CH1_Pin|Encoder_B_Motor1_T5_CH2_Pin;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b92:	4619      	mov	r1, r3
 8001b94:	4808      	ldr	r0, [pc, #32]	@ (8001bb8 <HAL_TIM_Encoder_MspInit+0x160>)
 8001b96:	f000 ff07 	bl	80029a8 <HAL_GPIO_Init>
}
 8001b9a:	bf00      	nop
 8001b9c:	3738      	adds	r7, #56	@ 0x38
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40000c00 	.word	0x40000c00
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <HAL_TIM_MspPostInit+0xa8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d13d      	bne.n	8001c5a <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <HAL_TIM_MspPostInit+0xac>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a20      	ldr	r2, [pc, #128]	@ (8001c68 <HAL_TIM_MspPostInit+0xac>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_TIM_MspPostInit+0xac>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <HAL_TIM_MspPostInit+0xac>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <HAL_TIM_MspPostInit+0xac>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <HAL_TIM_MspPostInit+0xac>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_Motor1_T1_CH1N_Pin|PWM_Motor2_T1_CH2N_Pin|PWM_Motor3_T1_CH2N_Pin;
 8001c16:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	480e      	ldr	r0, [pc, #56]	@ (8001c6c <HAL_TIM_MspPostInit+0xb0>)
 8001c34:	f000 feb8 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_Motor1_T1_CH1_Pin|PWM_Motor2_T1_CH2_Pin|PWM_Motor3_T1_CH3_Pin;
 8001c38:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4806      	ldr	r0, [pc, #24]	@ (8001c70 <HAL_TIM_MspPostInit+0xb4>)
 8001c56:	f000 fea7 	bl	80029a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	@ 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40020000 	.word	0x40020000

08001c74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	@ 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a3a      	ldr	r2, [pc, #232]	@ (8001d7c <HAL_UART_MspInit+0x108>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d134      	bne.n	8001d00 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a38      	ldr	r2, [pc, #224]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	4b32      	ldr	r3, [pc, #200]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a31      	ldr	r2, [pc, #196]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPS_UART2_TX_Pin|GPS_UART2_RX_Pin;
 8001cce:	230c      	movs	r3, #12
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4826      	ldr	r0, [pc, #152]	@ (8001d84 <HAL_UART_MspInit+0x110>)
 8001cea:	f000 fe5d 	bl	80029a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	2026      	movs	r0, #38	@ 0x26
 8001cf4:	f000 fd8e 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cf8:	2026      	movs	r0, #38	@ 0x26
 8001cfa:	f000 fda7 	bl	800284c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001cfe:	e039      	b.n	8001d74 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a20      	ldr	r2, [pc, #128]	@ (8001d88 <HAL_UART_MspInit+0x114>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d134      	bne.n	8001d74 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a14      	ldr	r2, [pc, #80]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_UART_MspInit+0x10c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IHM_UART6_TX_Pin|IHM_UART6_RX_Pin;
 8001d42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d54:	2308      	movs	r3, #8
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4809      	ldr	r0, [pc, #36]	@ (8001d84 <HAL_UART_MspInit+0x110>)
 8001d60:	f000 fe22 	bl	80029a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2105      	movs	r1, #5
 8001d68:	2047      	movs	r0, #71	@ 0x47
 8001d6a:	f000 fd53 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d6e:	2047      	movs	r0, #71	@ 0x47
 8001d70:	f000 fd6c 	bl	800284c <HAL_NVIC_EnableIRQ>
}
 8001d74:	bf00      	nop
 8001d76:	3730      	adds	r7, #48	@ 0x30
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40011400 	.word	0x40011400

08001d8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	@ 0x30
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e5c <HAL_InitTick+0xd0>)
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	4a2d      	ldr	r2, [pc, #180]	@ (8001e5c <HAL_InitTick+0xd0>)
 8001da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001daa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dac:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <HAL_InitTick+0xd0>)
 8001dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db8:	f107 020c 	add.w	r2, r7, #12
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fa5c 	bl	8005280 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dc8:	f003 fa46 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 8001dcc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd0:	4a23      	ldr	r2, [pc, #140]	@ (8001e60 <HAL_InitTick+0xd4>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0c9b      	lsrs	r3, r3, #18
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001ddc:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <HAL_InitTick+0xd8>)
 8001dde:	4a22      	ldr	r2, [pc, #136]	@ (8001e68 <HAL_InitTick+0xdc>)
 8001de0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <HAL_InitTick+0xd8>)
 8001de4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001de8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001dea:	4a1e      	ldr	r2, [pc, #120]	@ (8001e64 <HAL_InitTick+0xd8>)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <HAL_InitTick+0xd8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_InitTick+0xd8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_InitTick+0xd8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001e02:	4818      	ldr	r0, [pc, #96]	@ (8001e64 <HAL_InitTick+0xd8>)
 8001e04:	f003 ff46 	bl	8005c94 <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d11b      	bne.n	8001e4e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001e16:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <HAL_InitTick+0xd8>)
 8001e18:	f003 ff8c 	bl	8005d34 <HAL_TIM_Base_Start_IT>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d111      	bne.n	8001e4e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e2a:	2019      	movs	r0, #25
 8001e2c:	f000 fd0e 	bl	800284c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	d808      	bhi.n	8001e48 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e36:	2200      	movs	r2, #0
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	2019      	movs	r0, #25
 8001e3c:	f000 fcea 	bl	8002814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e40:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <HAL_InitTick+0xe0>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e002      	b.n	8001e4e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3730      	adds	r7, #48	@ 0x30
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	20000368 	.word	0x20000368
 8001e68:	40014400 	.word	0x40014400
 8001e6c:	20000004 	.word	0x20000004

08001e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <NMI_Handler+0x4>

08001e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <MemManage_Handler+0x4>

08001e88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eac:	4803      	ldr	r0, [pc, #12]	@ (8001ebc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001eae:	f004 f8a2 	bl	8005ff6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001eb2:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001eb4:	f004 f89f 	bl	8005ff6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000019c 	.word	0x2000019c
 8001ec0:	20000368 	.word	0x20000368

08001ec4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <I2C1_EV_IRQHandler+0x10>)
 8001eca:	f001 f888 	bl	8002fde <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200000d0 	.word	0x200000d0

08001ed8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <I2C1_ER_IRQHandler+0x10>)
 8001ede:	f001 f9ef 	bl	80032c0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200000d0 	.word	0x200000d0

08001eec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <SPI1_IRQHandler+0x10>)
 8001ef2:	f003 fdb1 	bl	8005a58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000144 	.word	0x20000144

08001f00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <USART2_IRQHandler+0x10>)
 8001f06:	f004 ff99 	bl	8006e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200002bc 	.word	0x200002bc

08001f14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_DRDY_EXTI13_Pin);
 8001f18:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f1c:	f000 fee2 	bl	8002ce4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f28:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <USART6_IRQHandler+0x10>)
 8001f2a:	f004 ff87 	bl	8006e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000304 	.word	0x20000304

08001f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_kill>:

int _kill(int pid, int sig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f52:	f008 fef3 	bl	800ad3c <__errno>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2216      	movs	r2, #22
 8001f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_exit>:

void _exit (int status)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ffe7 	bl	8001f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f7a:	bf00      	nop
 8001f7c:	e7fd      	b.n	8001f7a <_exit+0x12>

08001f7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	e00a      	b.n	8001fa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f90:	f3af 8000 	nop.w
 8001f94:	4601      	mov	r1, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	b2ca      	uxtb	r2, r1
 8001f9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dbf0      	blt.n	8001f90 <_read+0x12>
  }

  return len;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e009      	b.n	8001fde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	60ba      	str	r2, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dbf1      	blt.n	8001fca <_write+0x12>
  }
  return len;
 8001fe6:	687b      	ldr	r3, [r7, #4]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_close>:

int _close(int file)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002018:	605a      	str	r2, [r3, #4]
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_isatty>:

int _isatty(int file)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f008 fe58 	bl	800ad3c <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20020000 	.word	0x20020000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	200003b0 	.word	0x200003b0
 80020c0:	20004e58 	.word	0x20004e58

080020c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <SystemInit+0x20>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <SystemInit+0x20>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002120 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ec:	f7ff ffea 	bl	80020c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f0:	480c      	ldr	r0, [pc, #48]	@ (8002124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020f2:	490d      	ldr	r1, [pc, #52]	@ (8002128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f4:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002108:	4c0a      	ldr	r4, [pc, #40]	@ (8002134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002116:	f008 fe17 	bl	800ad48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211a:	f7fe fa47 	bl	80005ac <main>
  bx  lr    
 800211e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800212c:	0800bba8 	.word	0x0800bba8
  ldr r2, =_sbss
 8002130:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002134:	20004e54 	.word	0x20004e54

08002138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002140:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <HAL_Init+0x40>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <HAL_Init+0x40>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	@ (800217c <HAL_Init+0x40>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 fb4a 	bl	80027fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	200f      	movs	r0, #15
 800216c:	f7ff fe0e 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff faca 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00

08002180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_IncTick+0x20>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_IncTick+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_IncTick+0x24>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000008 	.word	0x20000008
 80021a4:	200003b4 	.word	0x200003b4

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	200003b4 	.word	0x200003b4

080021c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e033      	b.n	800223e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fabe 	bl	8001760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d118      	bne.n	8002230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002206:	f023 0302 	bic.w	r3, r3, #2
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f94a 	bl	80024ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40
 800222e:	e001      	b.n	8002234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1c>
 8002260:	2302      	movs	r3, #2
 8002262:	e113      	b.n	800248c <HAL_ADC_ConfigChannel+0x244>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b09      	cmp	r3, #9
 8002272:	d925      	bls.n	80022c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68d9      	ldr	r1, [r3, #12]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	3b1e      	subs	r3, #30
 800228a:	2207      	movs	r2, #7
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43da      	mvns	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	400a      	ands	r2, r1
 8002298:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68d9      	ldr	r1, [r3, #12]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	4603      	mov	r3, r0
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4403      	add	r3, r0
 80022b2:	3b1e      	subs	r3, #30
 80022b4:	409a      	lsls	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	e022      	b.n	8002306 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6919      	ldr	r1, [r3, #16]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	2207      	movs	r2, #7
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	400a      	ands	r2, r1
 80022e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4403      	add	r3, r0
 80022fc:	409a      	lsls	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b06      	cmp	r3, #6
 800230c:	d824      	bhi.n	8002358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b05      	subs	r3, #5
 8002320:	221f      	movs	r2, #31
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	400a      	ands	r2, r1
 800232e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	3b05      	subs	r3, #5
 800234a:	fa00 f203 	lsl.w	r2, r0, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	635a      	str	r2, [r3, #52]	@ 0x34
 8002356:	e04c      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	d824      	bhi.n	80023aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	3b23      	subs	r3, #35	@ 0x23
 8002372:	221f      	movs	r2, #31
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43da      	mvns	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	400a      	ands	r2, r1
 8002380:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	4618      	mov	r0, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b23      	subs	r3, #35	@ 0x23
 800239c:	fa00 f203 	lsl.w	r2, r0, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a8:	e023      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b41      	subs	r3, #65	@ 0x41
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b41      	subs	r3, #65	@ 0x41
 80023e6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f2:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <HAL_ADC_ConfigChannel+0x250>)
 80023f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a28      	ldr	r2, [pc, #160]	@ (800249c <HAL_ADC_ConfigChannel+0x254>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10f      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d8>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b12      	cmp	r3, #18
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_ADC_ConfigChannel+0x254>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12b      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_ADC_ConfigChannel+0x258>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <HAL_ADC_ConfigChannel+0x1f4>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b11      	cmp	r3, #17
 800243a:	d122      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a11      	ldr	r2, [pc, #68]	@ (80024a0 <HAL_ADC_ConfigChannel+0x258>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d111      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_ADC_ConfigChannel+0x25c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_ADC_ConfigChannel+0x260>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	0c9a      	lsrs	r2, r3, #18
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002474:	e002      	b.n	800247c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40012300 	.word	0x40012300
 800249c:	40012000 	.word	0x40012000
 80024a0:	10000012 	.word	0x10000012
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b4:	4b79      	ldr	r3, [pc, #484]	@ (800269c <ADC_Init+0x1f0>)
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	021a      	lsls	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <ADC_Init+0x1f4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	e00f      	b.n	80025aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0202 	bic.w	r2, r2, #2
 80025b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
 80025c4:	005a      	lsls	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	3b01      	subs	r3, #1
 8002604:	035a      	lsls	r2, r3, #13
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e007      	b.n	8002620 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800261e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800262e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	3b01      	subs	r3, #1
 800263c:	051a      	lsls	r2, r3, #20
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002662:	025a      	lsls	r2, r3, #9
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800267a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	029a      	lsls	r2, r3, #10
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40012300 	.word	0x40012300
 80026a0:	0f000001 	.word	0x0f000001

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	@ 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff4c 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002826:	f7ff ff61 	bl	80026ec <__NVIC_GetPriorityGrouping>
 800282a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f7ff ffb1 	bl	8002798 <NVIC_EncodePriority>
 8002836:	4602      	mov	r2, r0
 8002838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff80 	bl	8002744 <__NVIC_SetPriority>
}
 8002844:	bf00      	nop
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff54 	bl	8002708 <__NVIC_EnableIRQ>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002876:	f7ff fc97 	bl	80021a8 <HAL_GetTick>
 800287a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d008      	beq.n	800289a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2280      	movs	r2, #128	@ 0x80
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e052      	b.n	8002940 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0216 	bic.w	r2, r2, #22
 80028a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_DMA_Abort+0x62>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0208 	bic.w	r2, r2, #8
 80028d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ea:	e013      	b.n	8002914 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ec:	f7ff fc5c 	bl	80021a8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d90c      	bls.n	8002914 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2203      	movs	r2, #3
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e015      	b.n	8002940 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e4      	bne.n	80028ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	223f      	movs	r2, #63	@ 0x3f
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d004      	beq.n	8002966 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2280      	movs	r2, #128	@ 0x80
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00c      	b.n	8002980 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2205      	movs	r2, #5
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800299a:	b2db      	uxtb	r3, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	@ 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	e159      	b.n	8002c78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c4:	2201      	movs	r2, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	429a      	cmp	r2, r3
 80029de:	f040 8148 	bne.w	8002c72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d005      	beq.n	80029fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d130      	bne.n	8002a5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a30:	2201      	movs	r2, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 0201 	and.w	r2, r3, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d017      	beq.n	8002a98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d123      	bne.n	8002aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3208      	adds	r2, #8
 8002aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	08da      	lsrs	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3208      	adds	r2, #8
 8002ae6:	69b9      	ldr	r1, [r7, #24]
 8002ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0203 	and.w	r2, r3, #3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80a2 	beq.w	8002c72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b57      	ldr	r3, [pc, #348]	@ (8002c90 <HAL_GPIO_Init+0x2e8>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	4a56      	ldr	r2, [pc, #344]	@ (8002c90 <HAL_GPIO_Init+0x2e8>)
 8002b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b3e:	4b54      	ldr	r3, [pc, #336]	@ (8002c90 <HAL_GPIO_Init+0x2e8>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b4a:	4a52      	ldr	r2, [pc, #328]	@ (8002c94 <HAL_GPIO_Init+0x2ec>)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	3302      	adds	r3, #2
 8002b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	220f      	movs	r2, #15
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a49      	ldr	r2, [pc, #292]	@ (8002c98 <HAL_GPIO_Init+0x2f0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d019      	beq.n	8002baa <HAL_GPIO_Init+0x202>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a48      	ldr	r2, [pc, #288]	@ (8002c9c <HAL_GPIO_Init+0x2f4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_GPIO_Init+0x1fe>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a47      	ldr	r2, [pc, #284]	@ (8002ca0 <HAL_GPIO_Init+0x2f8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00d      	beq.n	8002ba2 <HAL_GPIO_Init+0x1fa>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a46      	ldr	r2, [pc, #280]	@ (8002ca4 <HAL_GPIO_Init+0x2fc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <HAL_GPIO_Init+0x1f6>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a45      	ldr	r2, [pc, #276]	@ (8002ca8 <HAL_GPIO_Init+0x300>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_GPIO_Init+0x1f2>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e008      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e006      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e004      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e002      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_GPIO_Init+0x204>
 8002baa:	2300      	movs	r3, #0
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	f002 0203 	and.w	r2, r2, #3
 8002bb2:	0092      	lsls	r2, r2, #2
 8002bb4:	4093      	lsls	r3, r2
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bbc:	4935      	ldr	r1, [pc, #212]	@ (8002c94 <HAL_GPIO_Init+0x2ec>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bca:	4b38      	ldr	r3, [pc, #224]	@ (8002cac <HAL_GPIO_Init+0x304>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bee:	4a2f      	ldr	r2, [pc, #188]	@ (8002cac <HAL_GPIO_Init+0x304>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8002cac <HAL_GPIO_Init+0x304>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c18:	4a24      	ldr	r2, [pc, #144]	@ (8002cac <HAL_GPIO_Init+0x304>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c1e:	4b23      	ldr	r3, [pc, #140]	@ (8002cac <HAL_GPIO_Init+0x304>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c42:	4a1a      	ldr	r2, [pc, #104]	@ (8002cac <HAL_GPIO_Init+0x304>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c48:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_GPIO_Init+0x304>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cac <HAL_GPIO_Init+0x304>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	f67f aea2 	bls.w	80029c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3724      	adds	r7, #36	@ 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020c00 	.word	0x40020c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40013c00 	.word	0x40013c00

08002cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc0:	787b      	ldrb	r3, [r7, #1]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ccc:	e003      	b.n	8002cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	041a      	lsls	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	619a      	str	r2, [r3, #24]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cee:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f806 	bl	8002d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40013c00 	.word	0x40013c00

08002d14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e12b      	b.n	8002f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fd64 	bl	8001820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	@ 0x24
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d90:	f002 fa4e 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8002d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a81      	ldr	r2, [pc, #516]	@ (8002fa0 <HAL_I2C_Init+0x274>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d807      	bhi.n	8002db0 <HAL_I2C_Init+0x84>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a80      	ldr	r2, [pc, #512]	@ (8002fa4 <HAL_I2C_Init+0x278>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e006      	b.n	8002dbe <HAL_I2C_Init+0x92>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a7d      	ldr	r2, [pc, #500]	@ (8002fa8 <HAL_I2C_Init+0x27c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	bf94      	ite	ls
 8002db8:	2301      	movls	r3, #1
 8002dba:	2300      	movhi	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0e7      	b.n	8002f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a78      	ldr	r2, [pc, #480]	@ (8002fac <HAL_I2C_Init+0x280>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0c9b      	lsrs	r3, r3, #18
 8002dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa0 <HAL_I2C_Init+0x274>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d802      	bhi.n	8002e00 <HAL_I2C_Init+0xd4>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	e009      	b.n	8002e14 <HAL_I2C_Init+0xe8>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	4a69      	ldr	r2, [pc, #420]	@ (8002fb0 <HAL_I2C_Init+0x284>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	3301      	adds	r3, #1
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	495c      	ldr	r1, [pc, #368]	@ (8002fa0 <HAL_I2C_Init+0x274>)
 8002e30:	428b      	cmp	r3, r1
 8002e32:	d819      	bhi.n	8002e68 <HAL_I2C_Init+0x13c>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e59      	subs	r1, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e42:	1c59      	adds	r1, r3, #1
 8002e44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e48:	400b      	ands	r3, r1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_I2C_Init+0x138>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e59      	subs	r1, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	e051      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002e64:	2304      	movs	r3, #4
 8002e66:	e04f      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d111      	bne.n	8002e94 <HAL_I2C_Init+0x168>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e58      	subs	r0, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e012      	b.n	8002eba <HAL_I2C_Init+0x18e>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Init+0x196>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_I2C_Init+0x1bc>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e58      	subs	r0, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	440b      	add	r3, r1
 8002ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	0099      	lsls	r1, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6809      	ldr	r1, [r1, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6911      	ldr	r1, [r2, #16]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	000186a0 	.word	0x000186a0
 8002fa4:	001e847f 	.word	0x001e847f
 8002fa8:	003d08ff 	.word	0x003d08ff
 8002fac:	431bde83 	.word	0x431bde83
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b80      	cmp	r3, #128	@ 0x80
 8002fc8:	d103      	bne.n	8002fd2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b088      	sub	sp, #32
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ffe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003006:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b10      	cmp	r3, #16
 800300c:	d003      	beq.n	8003016 <HAL_I2C_EV_IRQHandler+0x38>
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b40      	cmp	r3, #64	@ 0x40
 8003012:	f040 80c1 	bne.w	8003198 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10d      	bne.n	800304c <HAL_I2C_EV_IRQHandler+0x6e>
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003036:	d003      	beq.n	8003040 <HAL_I2C_EV_IRQHandler+0x62>
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800303e:	d101      	bne.n	8003044 <HAL_I2C_EV_IRQHandler+0x66>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_I2C_EV_IRQHandler+0x68>
 8003044:	2300      	movs	r3, #0
 8003046:	2b01      	cmp	r3, #1
 8003048:	f000 8132 	beq.w	80032b0 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00c      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x92>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	0a5b      	lsrs	r3, r3, #9
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f001 fc98 	bl	8004998 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fd9b 	bl	8003ba4 <I2C_Master_SB>
 800306e:	e092      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d009      	beq.n	8003090 <HAL_I2C_EV_IRQHandler+0xb2>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	0a5b      	lsrs	r3, r3, #9
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fe11 	bl	8003cb0 <I2C_Master_ADD10>
 800308e:	e082      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_I2C_EV_IRQHandler+0xd2>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	0a5b      	lsrs	r3, r3, #9
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fe2b 	bl	8003d04 <I2C_Master_ADDR>
 80030ae:	e072      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d03b      	beq.n	8003134 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ca:	f000 80f3 	beq.w	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	09db      	lsrs	r3, r3, #7
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00f      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x11c>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	0a9b      	lsrs	r3, r3, #10
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <HAL_I2C_EV_IRQHandler+0x11c>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f9f3 	bl	80034de <I2C_MasterTransmit_TXE>
 80030f8:	e04d      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80d6 	beq.w	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	0a5b      	lsrs	r3, r3, #9
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80cf 	beq.w	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003116:	7bbb      	ldrb	r3, [r7, #14]
 8003118:	2b21      	cmp	r3, #33	@ 0x21
 800311a:	d103      	bne.n	8003124 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fa7a 	bl	8003616 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003122:	e0c7      	b.n	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b40      	cmp	r3, #64	@ 0x40
 8003128:	f040 80c4 	bne.w	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fae8 	bl	8003702 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003132:	e0bf      	b.n	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003142:	f000 80b7 	beq.w	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00f      	beq.n	8003172 <HAL_I2C_EV_IRQHandler+0x194>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	0a9b      	lsrs	r3, r3, #10
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_I2C_EV_IRQHandler+0x194>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fb61 	bl	8003832 <I2C_MasterReceive_RXNE>
 8003170:	e011      	b.n	8003196 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 809a 	beq.w	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	0a5b      	lsrs	r3, r3, #9
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8093 	beq.w	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fc17 	bl	80039c2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003194:	e08e      	b.n	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003196:	e08d      	b.n	80032b4 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	61fb      	str	r3, [r7, #28]
 80031a8:	e007      	b.n	80031ba <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x20e>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	0a5b      	lsrs	r3, r3, #9
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031e2:	69b9      	ldr	r1, [r7, #24]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 ffdc 	bl	80041a2 <I2C_Slave_ADDR>
 80031ea:	e066      	b.n	80032ba <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d009      	beq.n	800320c <HAL_I2C_EV_IRQHandler+0x22e>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	0a5b      	lsrs	r3, r3, #9
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f001 f817 	bl	8004238 <I2C_Slave_STOPF>
 800320a:	e056      	b.n	80032ba <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800320c:	7bbb      	ldrb	r3, [r7, #14]
 800320e:	2b21      	cmp	r3, #33	@ 0x21
 8003210:	d002      	beq.n	8003218 <HAL_I2C_EV_IRQHandler+0x23a>
 8003212:	7bbb      	ldrb	r3, [r7, #14]
 8003214:	2b29      	cmp	r3, #41	@ 0x29
 8003216:	d125      	bne.n	8003264 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	09db      	lsrs	r3, r3, #7
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00f      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x266>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d009      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x266>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fef2 	bl	8004026 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003242:	e039      	b.n	80032b8 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d033      	beq.n	80032b8 <HAL_I2C_EV_IRQHandler+0x2da>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d02d      	beq.n	80032b8 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 ff1f 	bl	80040a0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003262:	e029      	b.n	80032b8 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	099b      	lsrs	r3, r3, #6
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00f      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	0a9b      	lsrs	r3, r3, #10
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d009      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0x2b2>
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 ff2a 	bl	80040e2 <I2C_SlaveReceive_RXNE>
 800328e:	e014      	b.n	80032ba <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <HAL_I2C_EV_IRQHandler+0x2dc>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	0a5b      	lsrs	r3, r3, #9
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 ff58 	bl	800415e <I2C_SlaveReceive_BTF>
 80032ae:	e004      	b.n	80032ba <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80032b0:	bf00      	nop
 80032b2:	e002      	b.n	80032ba <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032b4:	bf00      	nop
 80032b6:	e000      	b.n	80032ba <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032b8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	@ 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <HAL_I2C_ER_IRQHandler+0x4e>
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800330c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	0a5b      	lsrs	r3, r3, #9
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00e      	beq.n	8003338 <HAL_I2C_ER_IRQHandler+0x78>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003336:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	0a9b      	lsrs	r3, r3, #10
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d03f      	beq.n	80033c4 <HAL_I2C_ER_IRQHandler+0x104>
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d039      	beq.n	80033c4 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003350:	7efb      	ldrb	r3, [r7, #27]
 8003352:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003362:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800336a:	7ebb      	ldrb	r3, [r7, #26]
 800336c:	2b20      	cmp	r3, #32
 800336e:	d112      	bne.n	8003396 <HAL_I2C_ER_IRQHandler+0xd6>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <HAL_I2C_ER_IRQHandler+0xd6>
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b21      	cmp	r3, #33	@ 0x21
 800337a:	d008      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b29      	cmp	r3, #41	@ 0x29
 8003380:	d005      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0xce>
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b28      	cmp	r3, #40	@ 0x28
 8003386:	d106      	bne.n	8003396 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b21      	cmp	r3, #33	@ 0x21
 800338c:	d103      	bne.n	8003396 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f001 f882 	bl	8004498 <I2C_Slave_AF>
 8003394:	e016      	b.n	80033c4 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800339e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033a8:	7efb      	ldrb	r3, [r7, #27]
 80033aa:	2b10      	cmp	r3, #16
 80033ac:	d002      	beq.n	80033b4 <HAL_I2C_ER_IRQHandler+0xf4>
 80033ae:	7efb      	ldrb	r3, [r7, #27]
 80033b0:	2b40      	cmp	r3, #64	@ 0x40
 80033b2:	d107      	bne.n	80033c4 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	0adb      	lsrs	r3, r3, #11
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_I2C_ER_IRQHandler+0x12e>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	0a1b      	lsrs	r3, r3, #8
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80033ec:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f001 f8bd 	bl	8004580 <I2C_ITError>
  }
}
 8003406:	bf00      	nop
 8003408:	3728      	adds	r7, #40	@ 0x28
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
 800346a:	4613      	mov	r3, r2
 800346c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034f4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	d150      	bne.n	80035a6 <I2C_MasterTransmit_TXE+0xc8>
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b21      	cmp	r3, #33	@ 0x21
 8003508:	d14d      	bne.n	80035a6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d01d      	beq.n	800354c <I2C_MasterTransmit_TXE+0x6e>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b20      	cmp	r3, #32
 8003514:	d01a      	beq.n	800354c <I2C_MasterTransmit_TXE+0x6e>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800351c:	d016      	beq.n	800354c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800352c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2211      	movs	r2, #17
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff62 	bl	800340e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800354a:	e060      	b.n	800360e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800355a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b40      	cmp	r3, #64	@ 0x40
 8003584:	d107      	bne.n	8003596 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff7d 	bl	800348e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003594:	e03b      	b.n	800360e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ff35 	bl	800340e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035a4:	e033      	b.n	800360e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b21      	cmp	r3, #33	@ 0x21
 80035aa:	d005      	beq.n	80035b8 <I2C_MasterTransmit_TXE+0xda>
 80035ac:	7bbb      	ldrb	r3, [r7, #14]
 80035ae:	2b40      	cmp	r3, #64	@ 0x40
 80035b0:	d12d      	bne.n	800360e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b22      	cmp	r3, #34	@ 0x22
 80035b6:	d12a      	bne.n	800360e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035d2:	e01c      	b.n	800360e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b40      	cmp	r3, #64	@ 0x40
 80035de:	d103      	bne.n	80035e8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f88e 	bl	8003702 <I2C_MemoryTransmit_TXE_BTF>
}
 80035e6:	e012      	b.n	800360e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800360c:	e7ff      	b.n	800360e <I2C_MasterTransmit_TXE+0x130>
 800360e:	bf00      	nop
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b21      	cmp	r3, #33	@ 0x21
 800362e:	d164      	bne.n	80036fa <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d012      	beq.n	8003660 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800365e:	e04c      	b.n	80036fa <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b08      	cmp	r3, #8
 8003664:	d01d      	beq.n	80036a2 <I2C_MasterTransmit_BTF+0x8c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b20      	cmp	r3, #32
 800366a:	d01a      	beq.n	80036a2 <I2C_MasterTransmit_BTF+0x8c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003672:	d016      	beq.n	80036a2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003682:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2211      	movs	r2, #17
 8003688:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff feb7 	bl	800340e <HAL_I2C_MasterTxCpltCallback>
}
 80036a0:	e02b      	b.n	80036fa <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036b0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b40      	cmp	r3, #64	@ 0x40
 80036da:	d107      	bne.n	80036ec <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff fed2 	bl	800348e <HAL_I2C_MemTxCpltCallback>
}
 80036ea:	e006      	b.n	80036fa <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fe8a 	bl	800340e <HAL_I2C_MasterTxCpltCallback>
}
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003710:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11d      	bne.n	8003756 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10b      	bne.n	800373a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003726:	b2da      	uxtb	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003732:	1c9a      	adds	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003738:	e077      	b.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373e:	b29b      	uxth	r3, r3
 8003740:	121b      	asrs	r3, r3, #8
 8003742:	b2da      	uxtb	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003754:	e069      	b.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10b      	bne.n	8003776 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003762:	b2da      	uxtb	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003774:	e059      	b.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377a:	2b02      	cmp	r3, #2
 800377c:	d152      	bne.n	8003824 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b22      	cmp	r3, #34	@ 0x22
 8003782:	d10d      	bne.n	80037a0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003792:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800379e:	e044      	b.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b21      	cmp	r3, #33	@ 0x21
 80037ae:	d112      	bne.n	80037d6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037d4:	e029      	b.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d124      	bne.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x128>
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	2b21      	cmp	r3, #33	@ 0x21
 80037e4:	d121      	bne.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037f4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003804:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fe36 	bl	800348e <HAL_I2C_MemTxCpltCallback>
}
 8003822:	e002      	b.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fbc5 	bl	8002fb4 <I2C_Flush_DR>
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b22      	cmp	r3, #34	@ 0x22
 8003844:	f040 80b9 	bne.w	80039ba <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d921      	bls.n	80038a0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b03      	cmp	r3, #3
 800388a:	f040 8096 	bne.w	80039ba <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800389c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800389e:	e08c      	b.n	80039ba <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d07f      	beq.n	80039a8 <I2C_MasterReceive_RXNE+0x176>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d002      	beq.n	80038b4 <I2C_MasterReceive_RXNE+0x82>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d179      	bne.n	80039a8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f001 f83d 	bl	8004934 <I2C_WaitOnSTOPRequestThroughIT>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d14c      	bne.n	800395a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b40      	cmp	r3, #64	@ 0x40
 8003918:	d10a      	bne.n	8003930 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fdba 	bl	80034a2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800392e:	e044      	b.n	80039ba <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d002      	beq.n	8003944 <I2C_MasterReceive_RXNE+0x112>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b20      	cmp	r3, #32
 8003942:	d103      	bne.n	800394c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	@ 0x30
 800394a:	e002      	b.n	8003952 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2212      	movs	r2, #18
 8003950:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fd65 	bl	8003422 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003958:	e02f      	b.n	80039ba <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003968:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fd88 	bl	80034b6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039a6:	e008      	b.n	80039ba <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b6:	605a      	str	r2, [r3, #4]
}
 80039b8:	e7ff      	b.n	80039ba <I2C_MasterReceive_RXNE+0x188>
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d11b      	bne.n	8003a12 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a10:	e0c4      	b.n	8003b9c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d129      	bne.n	8003a70 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d00a      	beq.n	8003a48 <I2C_MasterReceive_BTF+0x86>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d007      	beq.n	8003a48 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a6e:	e095      	b.n	8003b9c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d17d      	bne.n	8003b76 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d002      	beq.n	8003a86 <I2C_MasterReceive_BTF+0xc4>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d108      	bne.n	8003a98 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e016      	b.n	8003ac6 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d002      	beq.n	8003aa4 <I2C_MasterReceive_BTF+0xe2>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d108      	bne.n	8003ab6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e007      	b.n	8003ac6 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b20:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d10a      	bne.n	8003b4c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fcac 	bl	80034a2 <HAL_I2C_MemRxCpltCallback>
}
 8003b4a:	e027      	b.n	8003b9c <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d002      	beq.n	8003b60 <I2C_MasterReceive_BTF+0x19e>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d103      	bne.n	8003b68 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b66:	e002      	b.n	8003b6e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2212      	movs	r2, #18
 8003b6c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fc57 	bl	8003422 <HAL_I2C_MasterRxCpltCallback>
}
 8003b74:	e012      	b.n	8003b9c <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b40      	cmp	r3, #64	@ 0x40
 8003bb6:	d117      	bne.n	8003be8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bd0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bd2:	e067      	b.n	8003ca4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]
}
 8003be6:	e05d      	b.n	8003ca4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bf0:	d133      	bne.n	8003c5a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b21      	cmp	r3, #33	@ 0x21
 8003bfc:	d109      	bne.n	8003c12 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c0e:	611a      	str	r2, [r3, #16]
 8003c10:	e008      	b.n	8003c24 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <I2C_Master_SB+0x92>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d032      	beq.n	8003ca4 <I2C_Master_SB+0x100>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d02d      	beq.n	8003ca4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c56:	605a      	str	r2, [r3, #4]
}
 8003c58:	e024      	b.n	8003ca4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	11db      	asrs	r3, r3, #7
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f003 0306 	and.w	r3, r3, #6
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f063 030f 	orn	r3, r3, #15
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	611a      	str	r2, [r3, #16]
}
 8003c7e:	e011      	b.n	8003ca4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d10d      	bne.n	8003ca4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	11db      	asrs	r3, r3, #7
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0306 	and.w	r3, r3, #6
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f063 030e 	orn	r3, r3, #14
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <I2C_Master_ADD10+0x26>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d108      	bne.n	8003ce8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00c      	beq.n	8003cf8 <I2C_Master_ADD10+0x48>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cf6:	605a      	str	r2, [r3, #4]
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b091      	sub	sp, #68	@ 0x44
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b22      	cmp	r3, #34	@ 0x22
 8003d2c:	f040 8169 	bne.w	8004002 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10f      	bne.n	8003d58 <I2C_Master_ADDR+0x54>
 8003d38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003d3c:	2b40      	cmp	r3, #64	@ 0x40
 8003d3e:	d10b      	bne.n	8003d58 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d40:	2300      	movs	r3, #0
 8003d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	e160      	b.n	800401a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <I2C_Master_ADDR+0x98>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d68:	d118      	bne.n	8003d9c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d8e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d9a:	e13e      	b.n	800401a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d113      	bne.n	8003dce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da6:	2300      	movs	r3, #0
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e115      	b.n	8003ffa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	f040 808a 	bne.w	8003eee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ddc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003de0:	d137      	bne.n	8003e52 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e00:	d113      	bne.n	8003e2a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e10:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	e0e7      	b.n	8003ffa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e0d3      	b.n	8003ffa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d02e      	beq.n	8003eb6 <I2C_Master_ADDR+0x1b2>
 8003e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d02b      	beq.n	8003eb6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e60:	2b12      	cmp	r3, #18
 8003e62:	d102      	bne.n	8003e6a <I2C_Master_ADDR+0x166>
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d125      	bne.n	8003eb6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d00e      	beq.n	8003e8e <I2C_Master_ADDR+0x18a>
 8003e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d00b      	beq.n	8003e8e <I2C_Master_ADDR+0x18a>
 8003e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d008      	beq.n	8003e8e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e007      	b.n	8003e9e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	e0a1      	b.n	8003ffa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e085      	b.n	8003ffa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d14d      	bne.n	8003f94 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d016      	beq.n	8003f2c <I2C_Master_ADDR+0x228>
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d013      	beq.n	8003f2c <I2C_Master_ADDR+0x228>
 8003f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d010      	beq.n	8003f2c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f18:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e007      	b.n	8003f3c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f3a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f4a:	d117      	bne.n	8003f7c <I2C_Master_ADDR+0x278>
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f52:	d00b      	beq.n	8003f6c <I2C_Master_ADDR+0x268>
 8003f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d008      	beq.n	8003f6c <I2C_Master_ADDR+0x268>
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d005      	beq.n	8003f6c <I2C_Master_ADDR+0x268>
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d002      	beq.n	8003f6c <I2C_Master_ADDR+0x268>
 8003f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d107      	bne.n	8003f7c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	e032      	b.n	8003ffa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fa2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb2:	d117      	bne.n	8003fe4 <I2C_Master_ADDR+0x2e0>
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fba:	d00b      	beq.n	8003fd4 <I2C_Master_ADDR+0x2d0>
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d008      	beq.n	8003fd4 <I2C_Master_ADDR+0x2d0>
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d005      	beq.n	8003fd4 <I2C_Master_ADDR+0x2d0>
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d002      	beq.n	8003fd4 <I2C_Master_ADDR+0x2d0>
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d107      	bne.n	8003fe4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fe2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004000:	e00b      	b.n	800401a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
}
 8004018:	e7ff      	b.n	800401a <I2C_Master_ADDR+0x316>
 800401a:	bf00      	nop
 800401c:	3744      	adds	r7, #68	@ 0x44
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004034:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02b      	beq.n	8004098 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d114      	bne.n	8004098 <I2C_SlaveTransmit_TXE+0x72>
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b29      	cmp	r3, #41	@ 0x29
 8004072:	d111      	bne.n	8004098 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004082:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2221      	movs	r2, #33	@ 0x21
 8004088:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2228      	movs	r2, #40	@ 0x28
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff f9cf 	bl	8003436 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d011      	beq.n	80040d6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02c      	beq.n	8004156 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d114      	bne.n	8004156 <I2C_SlaveReceive_RXNE+0x74>
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004130:	d111      	bne.n	8004156 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004140:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2222      	movs	r2, #34	@ 0x22
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2228      	movs	r2, #40	@ 0x28
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff f97a 	bl	800344a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d012      	beq.n	8004196 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041bc:	2b28      	cmp	r3, #40	@ 0x28
 80041be:	d127      	bne.n	8004210 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	09db      	lsrs	r3, r3, #7
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	81bb      	strh	r3, [r7, #12]
 80041f2:	e002      	b.n	80041fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004202:	89ba      	ldrh	r2, [r7, #12]
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	4619      	mov	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff f928 	bl	800345e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800420e:	e00e      	b.n	800422e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004246:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004256:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004294:	d172      	bne.n	800437c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b22      	cmp	r3, #34	@ 0x22
 800429a:	d002      	beq.n	80042a2 <I2C_Slave_STOPF+0x6a>
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a0:	d135      	bne.n	800430e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fb56 	bl	800298c <HAL_DMA_GetState>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d049      	beq.n	800437a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	4a69      	ldr	r2, [pc, #420]	@ (8004490 <I2C_Slave_STOPF+0x258>)
 80042ec:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fb28 	bl	8002948 <HAL_DMA_Abort_IT>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03d      	beq.n	800437a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004308:	4610      	mov	r0, r2
 800430a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430c:	e035      	b.n	800437a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	f043 0204 	orr.w	r2, r3, #4
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004340:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fb20 	bl	800298c <HAL_DMA_GetState>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d014      	beq.n	800437c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004356:	4a4e      	ldr	r2, [pc, #312]	@ (8004490 <I2C_Slave_STOPF+0x258>)
 8004358:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe faf2 	bl	8002948 <HAL_DMA_Abort_IT>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004374:	4610      	mov	r0, r2
 8004376:	4798      	blx	r3
 8004378:	e000      	b.n	800437c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800437a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d03e      	beq.n	8004404 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d112      	bne.n	80043ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	d112      	bne.n	80043ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	f043 0204 	orr.w	r2, r3, #4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f8b7 	bl	8004580 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004412:	e039      	b.n	8004488 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b2a      	cmp	r3, #42	@ 0x2a
 8004418:	d109      	bne.n	800442e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2228      	movs	r2, #40	@ 0x28
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff f80e 	bl	800344a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b28      	cmp	r3, #40	@ 0x28
 8004438:	d111      	bne.n	800445e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a15      	ldr	r2, [pc, #84]	@ (8004494 <I2C_Slave_STOPF+0x25c>)
 800443e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff f80f 	bl	800347a <HAL_I2C_ListenCpltCallback>
}
 800445c:	e014      	b.n	8004488 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	2b22      	cmp	r3, #34	@ 0x22
 8004464:	d002      	beq.n	800446c <I2C_Slave_STOPF+0x234>
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	2b22      	cmp	r3, #34	@ 0x22
 800446a:	d10d      	bne.n	8004488 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fe ffe1 	bl	800344a <HAL_I2C_SlaveRxCpltCallback>
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	080047e5 	.word	0x080047e5
 8004494:	ffff0000 	.word	0xffff0000

08004498 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d002      	beq.n	80044ba <I2C_Slave_AF+0x22>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d129      	bne.n	800450e <I2C_Slave_AF+0x76>
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b28      	cmp	r3, #40	@ 0x28
 80044be:	d126      	bne.n	800450e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <I2C_Slave_AF+0xe4>)
 80044c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fe ffb7 	bl	800347a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800450c:	e031      	b.n	8004572 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b21      	cmp	r3, #33	@ 0x21
 8004512:	d129      	bne.n	8004568 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a19      	ldr	r2, [pc, #100]	@ (800457c <I2C_Slave_AF+0xe4>)
 8004518:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2221      	movs	r2, #33	@ 0x21
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800453e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004548:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004558:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fd2a 	bl	8002fb4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fe ff68 	bl	8003436 <HAL_I2C_SlaveTxCpltCallback>
}
 8004566:	e004      	b.n	8004572 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004570:	615a      	str	r2, [r3, #20]
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	ffff0000 	.word	0xffff0000

08004580 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004596:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004598:	7bbb      	ldrb	r3, [r7, #14]
 800459a:	2b10      	cmp	r3, #16
 800459c:	d002      	beq.n	80045a4 <I2C_ITError+0x24>
 800459e:	7bbb      	ldrb	r3, [r7, #14]
 80045a0:	2b40      	cmp	r3, #64	@ 0x40
 80045a2:	d10a      	bne.n	80045ba <I2C_ITError+0x3a>
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b22      	cmp	r3, #34	@ 0x22
 80045a8:	d107      	bne.n	80045ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045c0:	2b28      	cmp	r3, #40	@ 0x28
 80045c2:	d107      	bne.n	80045d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2228      	movs	r2, #40	@ 0x28
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045d2:	e015      	b.n	8004600 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045e2:	d00a      	beq.n	80045fa <I2C_ITError+0x7a>
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b60      	cmp	r3, #96	@ 0x60
 80045e8:	d007      	beq.n	80045fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800460a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800460e:	d162      	bne.n	80046d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800461e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004624:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d020      	beq.n	8004670 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004632:	4a6a      	ldr	r2, [pc, #424]	@ (80047dc <I2C_ITError+0x25c>)
 8004634:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe f984 	bl	8002948 <HAL_DMA_Abort_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8089 	beq.w	800475a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800466a:	4610      	mov	r0, r2
 800466c:	4798      	blx	r3
 800466e:	e074      	b.n	800475a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	4a59      	ldr	r2, [pc, #356]	@ (80047dc <I2C_ITError+0x25c>)
 8004676:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe f963 	bl	8002948 <HAL_DMA_Abort_IT>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d068      	beq.n	800475a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	d10b      	bne.n	80046ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046d0:	4610      	mov	r0, r2
 80046d2:	4798      	blx	r3
 80046d4:	e041      	b.n	800475a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b60      	cmp	r3, #96	@ 0x60
 80046e0:	d125      	bne.n	800472e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fa:	2b40      	cmp	r3, #64	@ 0x40
 80046fc:	d10b      	bne.n	8004716 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fe fecf 	bl	80034ca <HAL_I2C_AbortCpltCallback>
 800472c:	e015      	b.n	800475a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004738:	2b40      	cmp	r3, #64	@ 0x40
 800473a:	d10b      	bne.n	8004754 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fe feae 	bl	80034b6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10e      	bne.n	8004788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800479e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d113      	bne.n	80047d4 <I2C_ITError+0x254>
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b28      	cmp	r3, #40	@ 0x28
 80047b0:	d110      	bne.n	80047d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a0a      	ldr	r2, [pc, #40]	@ (80047e0 <I2C_ITError+0x260>)
 80047b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe fe53 	bl	800347a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	080047e5 	.word	0x080047e5
 80047e0:	ffff0000 	.word	0xffff0000

080047e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047fe:	4b4b      	ldr	r3, [pc, #300]	@ (800492c <I2C_DMAAbort+0x148>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	08db      	lsrs	r3, r3, #3
 8004804:	4a4a      	ldr	r2, [pc, #296]	@ (8004930 <I2C_DMAAbort+0x14c>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	0a1a      	lsrs	r2, r3, #8
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	00da      	lsls	r2, r3, #3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800482a:	e00a      	b.n	8004842 <I2C_DMAAbort+0x5e>
    }
    count--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004840:	d0ea      	beq.n	8004818 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484e:	2200      	movs	r2, #0
 8004850:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	2200      	movs	r2, #0
 8004860:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004870:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2200      	movs	r2, #0
 8004876:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004884:	2200      	movs	r2, #0
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004894:	2200      	movs	r2, #0
 8004896:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b60      	cmp	r3, #96	@ 0x60
 80048b2:	d10e      	bne.n	80048d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048ca:	6978      	ldr	r0, [r7, #20]
 80048cc:	f7fe fdfd 	bl	80034ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048d0:	e027      	b.n	8004922 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048d8:	2b28      	cmp	r3, #40	@ 0x28
 80048da:	d117      	bne.n	800490c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2228      	movs	r2, #40	@ 0x28
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800490a:	e007      	b.n	800491c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f7fe fdca 	bl	80034b6 <HAL_I2C_ErrorCallback>
}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000000 	.word	0x20000000
 8004930:	14f8b589 	.word	0x14f8b589

08004934 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004940:	4b13      	ldr	r3, [pc, #76]	@ (8004990 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	4a13      	ldr	r2, [pc, #76]	@ (8004994 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	0a1a      	lsrs	r2, r3, #8
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b01      	subs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d107      	bne.n	8004972 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e008      	b.n	8004984 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800497c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004980:	d0e9      	beq.n	8004956 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	20000000 	.word	0x20000000
 8004994:	14f8b589 	.word	0x14f8b589

08004998 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80049a8:	d103      	bne.n	80049b2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80049b0:	e007      	b.n	80049c2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80049ba:	d102      	bne.n	80049c2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2208      	movs	r2, #8
 80049c0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e267      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d075      	beq.n	8004ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049ee:	4b88      	ldr	r3, [pc, #544]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d00c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fa:	4b85      	ldr	r3, [pc, #532]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d112      	bne.n	8004a2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a06:	4b82      	ldr	r3, [pc, #520]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a12:	d10b      	bne.n	8004a2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	4b7e      	ldr	r3, [pc, #504]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05b      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x108>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d157      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e242      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a34:	d106      	bne.n	8004a44 <HAL_RCC_OscConfig+0x74>
 8004a36:	4b76      	ldr	r3, [pc, #472]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a75      	ldr	r2, [pc, #468]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e01d      	b.n	8004a80 <HAL_RCC_OscConfig+0xb0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x98>
 8004a4e:	4b70      	ldr	r3, [pc, #448]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6f      	ldr	r2, [pc, #444]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e00b      	b.n	8004a80 <HAL_RCC_OscConfig+0xb0>
 8004a68:	4b69      	ldr	r3, [pc, #420]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a68      	ldr	r2, [pc, #416]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	4b66      	ldr	r3, [pc, #408]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a65      	ldr	r2, [pc, #404]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fd fb8e 	bl	80021a8 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fd fb8a 	bl	80021a8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	@ 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e207      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0xc0>
 8004aae:	e014      	b.n	8004ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab0:	f7fd fb7a 	bl	80021a8 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fd fb76 	bl	80021a8 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	@ 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e1f3      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aca:	4b51      	ldr	r3, [pc, #324]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0xe8>
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d063      	beq.n	8004bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af2:	4b47      	ldr	r3, [pc, #284]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d11c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004afe:	4b44      	ldr	r3, [pc, #272]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d116      	bne.n	8004b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0a:	4b41      	ldr	r3, [pc, #260]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_RCC_OscConfig+0x152>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d001      	beq.n	8004b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e1c7      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b22:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4937      	ldr	r1, [pc, #220]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b36:	e03a      	b.n	8004bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b40:	4b34      	ldr	r3, [pc, #208]	@ (8004c14 <HAL_RCC_OscConfig+0x244>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fd fb2f 	bl	80021a8 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4e:	f7fd fb2b 	bl	80021a8 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e1a8      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b60:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	4b28      	ldr	r3, [pc, #160]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4925      	ldr	r1, [pc, #148]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
 8004b80:	e015      	b.n	8004bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b82:	4b24      	ldr	r3, [pc, #144]	@ (8004c14 <HAL_RCC_OscConfig+0x244>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fd fb0e 	bl	80021a8 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b90:	f7fd fb0a 	bl	80021a8 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e187      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d036      	beq.n	8004c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d016      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc2:	4b15      	ldr	r3, [pc, #84]	@ (8004c18 <HAL_RCC_OscConfig+0x248>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fd faee 	bl	80021a8 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd0:	f7fd faea 	bl	80021a8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e167      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCC_OscConfig+0x240>)
 8004be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x200>
 8004bee:	e01b      	b.n	8004c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf0:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <HAL_RCC_OscConfig+0x248>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf6:	f7fd fad7 	bl	80021a8 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bfc:	e00e      	b.n	8004c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bfe:	f7fd fad3 	bl	80021a8 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d907      	bls.n	8004c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e150      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
 8004c10:	40023800 	.word	0x40023800
 8004c14:	42470000 	.word	0x42470000
 8004c18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c1c:	4b88      	ldr	r3, [pc, #544]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ea      	bne.n	8004bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8097 	beq.w	8004d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c36:	2300      	movs	r3, #0
 8004c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3a:	4b81      	ldr	r3, [pc, #516]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10f      	bne.n	8004c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c56:	4b7a      	ldr	r3, [pc, #488]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c66:	4b77      	ldr	r3, [pc, #476]	@ (8004e44 <HAL_RCC_OscConfig+0x474>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d118      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c72:	4b74      	ldr	r3, [pc, #464]	@ (8004e44 <HAL_RCC_OscConfig+0x474>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a73      	ldr	r2, [pc, #460]	@ (8004e44 <HAL_RCC_OscConfig+0x474>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7e:	f7fd fa93 	bl	80021a8 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c86:	f7fd fa8f 	bl	80021a8 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e10c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	4b6a      	ldr	r3, [pc, #424]	@ (8004e44 <HAL_RCC_OscConfig+0x474>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d106      	bne.n	8004cba <HAL_RCC_OscConfig+0x2ea>
 8004cac:	4b64      	ldr	r3, [pc, #400]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb0:	4a63      	ldr	r2, [pc, #396]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb8:	e01c      	b.n	8004cf4 <HAL_RCC_OscConfig+0x324>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x30c>
 8004cc2:	4b5f      	ldr	r3, [pc, #380]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc6:	4a5e      	ldr	r2, [pc, #376]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cce:	4b5c      	ldr	r3, [pc, #368]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0x324>
 8004cdc:	4b58      	ldr	r3, [pc, #352]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce0:	4a57      	ldr	r2, [pc, #348]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce8:	4b55      	ldr	r3, [pc, #340]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cec:	4a54      	ldr	r2, [pc, #336]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004cee:	f023 0304 	bic.w	r3, r3, #4
 8004cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d015      	beq.n	8004d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fd fa54 	bl	80021a8 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d04:	f7fd fa50 	bl	80021a8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e0cb      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	4b49      	ldr	r3, [pc, #292]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0ee      	beq.n	8004d04 <HAL_RCC_OscConfig+0x334>
 8004d26:	e014      	b.n	8004d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d28:	f7fd fa3e 	bl	80021a8 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fd fa3a 	bl	80021a8 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e0b5      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d46:	4b3e      	ldr	r3, [pc, #248]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1ee      	bne.n	8004d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d58:	4b39      	ldr	r3, [pc, #228]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	4a38      	ldr	r2, [pc, #224]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80a1 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d6e:	4b34      	ldr	r3, [pc, #208]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d05c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d141      	bne.n	8004e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d82:	4b31      	ldr	r3, [pc, #196]	@ (8004e48 <HAL_RCC_OscConfig+0x478>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fd fa0e 	bl	80021a8 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d90:	f7fd fa0a 	bl	80021a8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e087      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da2:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	019b      	lsls	r3, r3, #6
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	491b      	ldr	r1, [pc, #108]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <HAL_RCC_OscConfig+0x478>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fd f9e3 	bl	80021a8 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de6:	f7fd f9df 	bl	80021a8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e05c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df8:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x416>
 8004e04:	e054      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e06:	4b10      	ldr	r3, [pc, #64]	@ (8004e48 <HAL_RCC_OscConfig+0x478>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fd f9cc 	bl	80021a8 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fd f9c8 	bl	80021a8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e045      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <HAL_RCC_OscConfig+0x470>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x444>
 8004e32:	e03d      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e038      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40007000 	.word	0x40007000
 8004e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_RCC_OscConfig+0x4ec>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d028      	beq.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d121      	bne.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d11a      	bne.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d111      	bne.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	3b01      	subs	r3, #1
 8004e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d107      	bne.n	8004eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800

08004ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0cc      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b68      	ldr	r3, [pc, #416]	@ (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d90c      	bls.n	8004efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b65      	ldr	r3, [pc, #404]	@ (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eea:	4b63      	ldr	r3, [pc, #396]	@ (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0b8      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d020      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f14:	4b59      	ldr	r3, [pc, #356]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a58      	ldr	r2, [pc, #352]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f2c:	4b53      	ldr	r3, [pc, #332]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a52      	ldr	r2, [pc, #328]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f38:	4b50      	ldr	r3, [pc, #320]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	494d      	ldr	r1, [pc, #308]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d044      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d107      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5e:	4b47      	ldr	r3, [pc, #284]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d119      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e07f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d003      	beq.n	8004f7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e06f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e067      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f9e:	4b37      	ldr	r3, [pc, #220]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f023 0203 	bic.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4934      	ldr	r1, [pc, #208]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb0:	f7fd f8fa 	bl	80021a8 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fd f8f6 	bl	80021a8 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e04f      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	4b2b      	ldr	r3, [pc, #172]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 020c 	and.w	r2, r3, #12
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d1eb      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b25      	ldr	r3, [pc, #148]	@ (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d20c      	bcs.n	8005008 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fee:	4b22      	ldr	r3, [pc, #136]	@ (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b20      	ldr	r3, [pc, #128]	@ (8005078 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e032      	b.n	800506e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005014:	4b19      	ldr	r3, [pc, #100]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4916      	ldr	r1, [pc, #88]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005032:	4b12      	ldr	r3, [pc, #72]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	490e      	ldr	r1, [pc, #56]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005046:	f000 f821 	bl	800508c <HAL_RCC_GetSysClockFreq>
 800504a:	4602      	mov	r2, r0
 800504c:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	490a      	ldr	r1, [pc, #40]	@ (8005080 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	5ccb      	ldrb	r3, [r1, r3]
 800505a:	fa22 f303 	lsr.w	r3, r2, r3
 800505e:	4a09      	ldr	r2, [pc, #36]	@ (8005084 <HAL_RCC_ClockConfig+0x1c4>)
 8005060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005062:	4b09      	ldr	r3, [pc, #36]	@ (8005088 <HAL_RCC_ClockConfig+0x1c8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7fc fe90 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023c00 	.word	0x40023c00
 800507c:	40023800 	.word	0x40023800
 8005080:	0800baa0 	.word	0x0800baa0
 8005084:	20000000 	.word	0x20000000
 8005088:	20000004 	.word	0x20000004

0800508c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800508c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005090:	b090      	sub	sp, #64	@ 0x40
 8005092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050a4:	4b59      	ldr	r3, [pc, #356]	@ (800520c <HAL_RCC_GetSysClockFreq+0x180>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d00d      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x40>
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	f200 80a1 	bhi.w	80051f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_RCC_GetSysClockFreq+0x34>
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d003      	beq.n	80050c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050be:	e09b      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050c0:	4b53      	ldr	r3, [pc, #332]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x184>)
 80050c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050c4:	e09b      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050c6:	4b53      	ldr	r3, [pc, #332]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x188>)
 80050c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050ca:	e098      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050cc:	4b4f      	ldr	r3, [pc, #316]	@ (800520c <HAL_RCC_GetSysClockFreq+0x180>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050d6:	4b4d      	ldr	r3, [pc, #308]	@ (800520c <HAL_RCC_GetSysClockFreq+0x180>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d028      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e2:	4b4a      	ldr	r3, [pc, #296]	@ (800520c <HAL_RCC_GetSysClockFreq+0x180>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	2200      	movs	r2, #0
 80050ea:	623b      	str	r3, [r7, #32]
 80050ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050f4:	2100      	movs	r1, #0
 80050f6:	4b47      	ldr	r3, [pc, #284]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x188>)
 80050f8:	fb03 f201 	mul.w	r2, r3, r1
 80050fc:	2300      	movs	r3, #0
 80050fe:	fb00 f303 	mul.w	r3, r0, r3
 8005102:	4413      	add	r3, r2
 8005104:	4a43      	ldr	r2, [pc, #268]	@ (8005214 <HAL_RCC_GetSysClockFreq+0x188>)
 8005106:	fba0 1202 	umull	r1, r2, r0, r2
 800510a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800510c:	460a      	mov	r2, r1
 800510e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005112:	4413      	add	r3, r2
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005118:	2200      	movs	r2, #0
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	61fa      	str	r2, [r7, #28]
 800511e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005122:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005126:	f7fb f8ab 	bl	8000280 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4613      	mov	r3, r2
 8005130:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005132:	e053      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005134:	4b35      	ldr	r3, [pc, #212]	@ (800520c <HAL_RCC_GetSysClockFreq+0x180>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	099b      	lsrs	r3, r3, #6
 800513a:	2200      	movs	r2, #0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	617a      	str	r2, [r7, #20]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005146:	f04f 0b00 	mov.w	fp, #0
 800514a:	4652      	mov	r2, sl
 800514c:	465b      	mov	r3, fp
 800514e:	f04f 0000 	mov.w	r0, #0
 8005152:	f04f 0100 	mov.w	r1, #0
 8005156:	0159      	lsls	r1, r3, #5
 8005158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800515c:	0150      	lsls	r0, r2, #5
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	ebb2 080a 	subs.w	r8, r2, sl
 8005166:	eb63 090b 	sbc.w	r9, r3, fp
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005176:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800517a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800517e:	ebb2 0408 	subs.w	r4, r2, r8
 8005182:	eb63 0509 	sbc.w	r5, r3, r9
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	00eb      	lsls	r3, r5, #3
 8005190:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005194:	00e2      	lsls	r2, r4, #3
 8005196:	4614      	mov	r4, r2
 8005198:	461d      	mov	r5, r3
 800519a:	eb14 030a 	adds.w	r3, r4, sl
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	eb45 030b 	adc.w	r3, r5, fp
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051b2:	4629      	mov	r1, r5
 80051b4:	028b      	lsls	r3, r1, #10
 80051b6:	4621      	mov	r1, r4
 80051b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051bc:	4621      	mov	r1, r4
 80051be:	028a      	lsls	r2, r1, #10
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	2200      	movs	r2, #0
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	60fa      	str	r2, [r7, #12]
 80051cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d0:	f7fb f856 	bl	8000280 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4613      	mov	r3, r2
 80051da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_RCC_GetSysClockFreq+0x180>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	3301      	adds	r3, #1
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80051ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051f6:	e002      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x184>)
 80051fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005200:	4618      	mov	r0, r3
 8005202:	3740      	adds	r7, #64	@ 0x40
 8005204:	46bd      	mov	sp, r7
 8005206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800
 8005210:	00f42400 	.word	0x00f42400
 8005214:	017d7840 	.word	0x017d7840

08005218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800521c:	4b03      	ldr	r3, [pc, #12]	@ (800522c <HAL_RCC_GetHCLKFreq+0x14>)
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000000 	.word	0x20000000

08005230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005234:	f7ff fff0 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	0a9b      	lsrs	r3, r3, #10
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4903      	ldr	r1, [pc, #12]	@ (8005254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40023800 	.word	0x40023800
 8005254:	0800bab0 	.word	0x0800bab0

08005258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800525c:	f7ff ffdc 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	0b5b      	lsrs	r3, r3, #13
 8005268:	f003 0307 	and.w	r3, r3, #7
 800526c:	4903      	ldr	r1, [pc, #12]	@ (800527c <HAL_RCC_GetPCLK2Freq+0x24>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005274:	4618      	mov	r0, r3
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40023800 	.word	0x40023800
 800527c:	0800bab0 	.word	0x0800bab0

08005280 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	220f      	movs	r2, #15
 800528e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005290:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <HAL_RCC_GetClockConfig+0x5c>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0203 	and.w	r2, r3, #3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800529c:	4b0f      	ldr	r3, [pc, #60]	@ (80052dc <HAL_RCC_GetClockConfig+0x5c>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052a8:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <HAL_RCC_GetClockConfig+0x5c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052b4:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <HAL_RCC_GetClockConfig+0x5c>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052c2:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <HAL_RCC_GetClockConfig+0x60>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0207 	and.w	r2, r3, #7
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40023c00 	.word	0x40023c00

080052e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d105      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005308:	2b00      	cmp	r3, #0
 800530a:	d038      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800530c:	4b68      	ldr	r3, [pc, #416]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005312:	f7fc ff49 	bl	80021a8 <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005318:	e008      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800531a:	f7fc ff45 	bl	80021a8 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e0bd      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800532c:	4b61      	ldr	r3, [pc, #388]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f0      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	495a      	ldr	r1, [pc, #360]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005352:	4b57      	ldr	r3, [pc, #348]	@ (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005358:	f7fc ff26 	bl	80021a8 <HAL_GetTick>
 800535c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005360:	f7fc ff22 	bl	80021a8 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e09a      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005372:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8083 	beq.w	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	4b48      	ldr	r3, [pc, #288]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	4a47      	ldr	r2, [pc, #284]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800539a:	6413      	str	r3, [r2, #64]	@ 0x40
 800539c:	4b45      	ldr	r3, [pc, #276]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053a8:	4b43      	ldr	r3, [pc, #268]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a42      	ldr	r2, [pc, #264]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053b4:	f7fc fef8 	bl	80021a8 <HAL_GetTick>
 80053b8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053bc:	f7fc fef4 	bl	80021a8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e06c      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053ce:	4b3a      	ldr	r3, [pc, #232]	@ (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053da:	4b36      	ldr	r3, [pc, #216]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053e2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02f      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d028      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053f8:	4b2e      	ldr	r3, [pc, #184]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005400:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005402:	4b2e      	ldr	r3, [pc, #184]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005404:	2201      	movs	r2, #1
 8005406:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005408:	4b2c      	ldr	r3, [pc, #176]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800540e:	4a29      	ldr	r2, [pc, #164]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005414:	4b27      	ldr	r3, [pc, #156]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b01      	cmp	r3, #1
 800541e:	d114      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005420:	f7fc fec2 	bl	80021a8 <HAL_GetTick>
 8005424:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005426:	e00a      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fc febe 	bl	80021a8 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e034      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543e:	4b1d      	ldr	r3, [pc, #116]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0ee      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005456:	d10d      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005458:	4b16      	ldr	r3, [pc, #88]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800546c:	4911      	ldr	r1, [pc, #68]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	608b      	str	r3, [r1, #8]
 8005472:	e005      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005474:	4b0f      	ldr	r3, [pc, #60]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4a0e      	ldr	r2, [pc, #56]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800547e:	6093      	str	r3, [r2, #8]
 8005480:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005482:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800548c:	4909      	ldr	r1, [pc, #36]	@ (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7d1a      	ldrb	r2, [r3, #20]
 80054a2:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80054a4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	42470068 	.word	0x42470068
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40007000 	.word	0x40007000
 80054bc:	42470e40 	.word	0x42470e40
 80054c0:	424711e0 	.word	0x424711e0

080054c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e073      	b.n	80055be <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	7f5b      	ldrb	r3, [r3, #29]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fc f9f2 	bl	80018d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d055      	beq.n	80055ac <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	22ca      	movs	r2, #202	@ 0xca
 8005506:	625a      	str	r2, [r3, #36]	@ 0x24
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2253      	movs	r2, #83	@ 0x53
 800550e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f99d 	bl	8005850 <RTC_EnterInitMode>
 8005516:	4603      	mov	r3, r0
 8005518:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d12c      	bne.n	800557a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800552e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005532:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6899      	ldr	r1, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68d2      	ldr	r2, [r2, #12]
 800555a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6919      	ldr	r1, [r3, #16]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	041a      	lsls	r2, r3, #16
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f9a4 	bl	80058be <RTC_ExitInitMode>
 8005576:	4603      	mov	r3, r0
 8005578:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d110      	bne.n	80055a2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	22ff      	movs	r2, #255	@ 0xff
 80055a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80055aa:	e001      	b.n	80055b0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055c6:	b590      	push	{r4, r7, lr}
 80055c8:	b087      	sub	sp, #28
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	7f1b      	ldrb	r3, [r3, #28]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_RTC_SetTime+0x1c>
 80055de:	2302      	movs	r3, #2
 80055e0:	e087      	b.n	80056f2 <HAL_RTC_SetTime+0x12c>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2202      	movs	r2, #2
 80055ec:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d126      	bne.n	8005642 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2200      	movs	r2, #0
 8005606:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f97b 	bl	8005908 <RTC_ByteToBcd2>
 8005612:	4603      	mov	r3, r0
 8005614:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f974 	bl	8005908 <RTC_ByteToBcd2>
 8005620:	4603      	mov	r3, r0
 8005622:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005624:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	789b      	ldrb	r3, [r3, #2]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f96c 	bl	8005908 <RTC_ByteToBcd2>
 8005630:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005632:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	78db      	ldrb	r3, [r3, #3]
 800563a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e018      	b.n	8005674 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2200      	movs	r2, #0
 8005654:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005662:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005668:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	78db      	ldrb	r3, [r3, #3]
 800566e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	22ca      	movs	r2, #202	@ 0xca
 800567a:	625a      	str	r2, [r3, #36]	@ 0x24
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2253      	movs	r2, #83	@ 0x53
 8005682:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f8e3 	bl	8005850 <RTC_EnterInitMode>
 800568a:	4603      	mov	r3, r0
 800568c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800568e:	7cfb      	ldrb	r3, [r7, #19]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d120      	bne.n	80056d6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800569e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80056a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6899      	ldr	r1, [r3, #8]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f8f6 	bl	80058be <RTC_ExitInitMode>
 80056d2:	4603      	mov	r3, r0
 80056d4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80056d6:	7cfb      	ldrb	r3, [r7, #19]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	22ff      	movs	r2, #255	@ 0xff
 80056e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]

  return status;
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd90      	pop	{r4, r7, pc}

080056fa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056fa:	b590      	push	{r4, r7, lr}
 80056fc:	b087      	sub	sp, #28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	7f1b      	ldrb	r3, [r3, #28]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_RTC_SetDate+0x1c>
 8005712:	2302      	movs	r3, #2
 8005714:	e071      	b.n	80057fa <HAL_RTC_SetDate+0x100>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2202      	movs	r2, #2
 8005720:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10e      	bne.n	8005746 <HAL_RTC_SetDate+0x4c>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	f023 0310 	bic.w	r3, r3, #16
 800573c:	b2db      	uxtb	r3, r3
 800573e:	330a      	adds	r3, #10
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11c      	bne.n	8005786 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	78db      	ldrb	r3, [r3, #3]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 f8d9 	bl	8005908 <RTC_ByteToBcd2>
 8005756:	4603      	mov	r3, r0
 8005758:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f8d2 	bl	8005908 <RTC_ByteToBcd2>
 8005764:	4603      	mov	r3, r0
 8005766:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005768:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	789b      	ldrb	r3, [r3, #2]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f8ca 	bl	8005908 <RTC_ByteToBcd2>
 8005774:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005776:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e00e      	b.n	80057a4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	78db      	ldrb	r3, [r3, #3]
 800578a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005792:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005798:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	22ca      	movs	r2, #202	@ 0xca
 80057aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2253      	movs	r2, #83	@ 0x53
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f84b 	bl	8005850 <RTC_EnterInitMode>
 80057ba:	4603      	mov	r3, r0
 80057bc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10c      	bne.n	80057de <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80057ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057d2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f872 	bl	80058be <RTC_ExitInitMode>
 80057da:	4603      	mov	r3, r0
 80057dc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057de:	7cfb      	ldrb	r3, [r7, #19]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	22ff      	movs	r2, #255	@ 0xff
 80057f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	771a      	strb	r2, [r3, #28]

  return status;
 80057f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd90      	pop	{r4, r7, pc}
	...

08005804 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a0d      	ldr	r2, [pc, #52]	@ (800584c <HAL_RTC_WaitForSynchro+0x48>)
 8005816:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005818:	f7fc fcc6 	bl	80021a8 <HAL_GetTick>
 800581c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800581e:	e009      	b.n	8005834 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005820:	f7fc fcc2 	bl	80021a8 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800582e:	d901      	bls.n	8005834 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e007      	b.n	8005844 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0ee      	beq.n	8005820 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	00013f5f 	.word	0x00013f5f

08005850 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d122      	bne.n	80058b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800587c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800587e:	f7fc fc93 	bl	80021a8 <HAL_GetTick>
 8005882:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005884:	e00c      	b.n	80058a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005886:	f7fc fc8f 	bl	80021a8 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005894:	d904      	bls.n	80058a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2204      	movs	r2, #4
 800589a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <RTC_EnterInitMode+0x64>
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d1e8      	bne.n	8005886 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff8b 	bl	8005804 <HAL_RTC_WaitForSynchro>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2204      	movs	r2, #4
 80058f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005916:	e005      	b.n	8005924 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3301      	adds	r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	3b0a      	subs	r3, #10
 8005922:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	2b09      	cmp	r3, #9
 8005928:	d8f6      	bhi.n	8005918 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	b2da      	uxtb	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	4313      	orrs	r3, r2
 8005936:	b2db      	uxtb	r3, r3
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e07b      	b.n	8005a4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d108      	bne.n	8005970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005966:	d009      	beq.n	800597c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	61da      	str	r2, [r3, #28]
 800596e:	e005      	b.n	800597c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fb ffc6 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a00:	ea42 0103 	orr.w	r1, r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	f003 0104 	and.w	r1, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	f003 0210 	and.w	r2, r3, #16
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	099b      	lsrs	r3, r3, #6
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10f      	bne.n	8005a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	099b      	lsrs	r3, r3, #6
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
    return;
 8005a9a:	e0d7      	b.n	8005c4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <HAL_SPI_IRQHandler+0x66>
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	09db      	lsrs	r3, r3, #7
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
    return;
 8005abc:	e0c6      	b.n	8005c4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_SPI_IRQHandler+0x8c>
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80b4 	beq.w	8005c4c <HAL_SPI_IRQHandler+0x1f4>
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80ad 	beq.w	8005c4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	099b      	lsrs	r3, r3, #6
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d023      	beq.n	8005b46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d011      	beq.n	8005b2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0e:	f043 0204 	orr.w	r2, r3, #4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	e00b      	b.n	8005b46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	693b      	ldr	r3, [r7, #16]
        return;
 8005b44:	e082      	b.n	8005c4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d014      	beq.n	8005b7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00c      	beq.n	8005ba2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8c:	f043 0208 	orr.w	r2, r3, #8
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b94:	2300      	movs	r3, #0
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d04f      	beq.n	8005c4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bb8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <HAL_SPI_IRQHandler+0x17e>
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d034      	beq.n	8005c40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0203 	bic.w	r2, r2, #3
 8005be4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d011      	beq.n	8005c12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf2:	4a18      	ldr	r2, [pc, #96]	@ (8005c54 <HAL_SPI_IRQHandler+0x1fc>)
 8005bf4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fc fea4 	bl	8002948 <HAL_DMA_Abort_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8005c54 <HAL_SPI_IRQHandler+0x1fc>)
 8005c20:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fc fe8e 	bl	8002948 <HAL_DMA_Abort_IT>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005c3e:	e003      	b.n	8005c48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f809 	bl	8005c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c46:	e000      	b.n	8005c4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005c48:	bf00      	nop
    return;
 8005c4a:	bf00      	nop
  }
}
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	08005c6d 	.word	0x08005c6d

08005c58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff ffe6 	bl	8005c58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e041      	b.n	8005d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fb fea4 	bl	8001a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f000 fc32 	bl	800653c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d001      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e044      	b.n	8005dd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1e      	ldr	r2, [pc, #120]	@ (8005de4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d018      	beq.n	8005da0 <HAL_TIM_Base_Start_IT+0x6c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d76:	d013      	beq.n	8005da0 <HAL_TIM_Base_Start_IT+0x6c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005de8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00e      	beq.n	8005da0 <HAL_TIM_Base_Start_IT+0x6c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a19      	ldr	r2, [pc, #100]	@ (8005dec <HAL_TIM_Base_Start_IT+0xb8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d009      	beq.n	8005da0 <HAL_TIM_Base_Start_IT+0x6c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a17      	ldr	r2, [pc, #92]	@ (8005df0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <HAL_TIM_Base_Start_IT+0x6c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a16      	ldr	r2, [pc, #88]	@ (8005df4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d111      	bne.n	8005dc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b06      	cmp	r3, #6
 8005db0:	d010      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	e007      	b.n	8005dd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40014000 	.word	0x40014000

08005df8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e041      	b.n	8005e8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f839 	bl	8005e96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f000 fb80 	bl	800653c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b086      	sub	sp, #24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e097      	b.n	8005fee <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fb fdc0 	bl	8001a58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eee:	f023 0307 	bic.w	r3, r3, #7
 8005ef2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f000 fb1c 	bl	800653c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f2c:	f023 0303 	bic.w	r3, r3, #3
 8005f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f4a:	f023 030c 	bic.w	r3, r3, #12
 8005f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	4313      	orrs	r3, r2
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	011a      	lsls	r2, r3, #4
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	031b      	lsls	r3, r3, #12
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f88:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f90:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d020      	beq.n	800605a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01b      	beq.n	800605a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f06f 0202 	mvn.w	r2, #2
 800602a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fa5c 	bl	80064fe <HAL_TIM_IC_CaptureCallback>
 8006046:	e005      	b.n	8006054 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fa4e 	bl	80064ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa5f 	bl	8006512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d020      	beq.n	80060a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f06f 0204 	mvn.w	r2, #4
 8006076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fa36 	bl	80064fe <HAL_TIM_IC_CaptureCallback>
 8006092:	e005      	b.n	80060a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fa28 	bl	80064ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa39 	bl	8006512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d020      	beq.n	80060f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 0308 	and.w	r3, r3, #8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01b      	beq.n	80060f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f06f 0208 	mvn.w	r2, #8
 80060c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2204      	movs	r2, #4
 80060c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa10 	bl	80064fe <HAL_TIM_IC_CaptureCallback>
 80060de:	e005      	b.n	80060ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa02 	bl	80064ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa13 	bl	8006512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d020      	beq.n	800613e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01b      	beq.n	800613e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f06f 0210 	mvn.w	r2, #16
 800610e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2208      	movs	r2, #8
 8006114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f9ea 	bl	80064fe <HAL_TIM_IC_CaptureCallback>
 800612a:	e005      	b.n	8006138 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f9dc 	bl	80064ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f9ed 	bl	8006512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f06f 0201 	mvn.w	r2, #1
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fa fe9b 	bl	8000e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fd51 	bl	8006c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f9be 	bl	8006526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0220 	mvn.w	r2, #32
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fd23 	bl	8006c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e0ae      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b0c      	cmp	r3, #12
 8006202:	f200 809f 	bhi.w	8006344 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006206:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006241 	.word	0x08006241
 8006210:	08006345 	.word	0x08006345
 8006214:	08006345 	.word	0x08006345
 8006218:	08006345 	.word	0x08006345
 800621c:	08006281 	.word	0x08006281
 8006220:	08006345 	.word	0x08006345
 8006224:	08006345 	.word	0x08006345
 8006228:	08006345 	.word	0x08006345
 800622c:	080062c3 	.word	0x080062c3
 8006230:	08006345 	.word	0x08006345
 8006234:	08006345 	.word	0x08006345
 8006238:	08006345 	.word	0x08006345
 800623c:	08006303 	.word	0x08006303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f9fe 	bl	8006648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0208 	orr.w	r2, r2, #8
 800625a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0204 	bic.w	r2, r2, #4
 800626a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6999      	ldr	r1, [r3, #24]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	619a      	str	r2, [r3, #24]
      break;
 800627e:	e064      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fa44 	bl	8006714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800629a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6999      	ldr	r1, [r3, #24]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	619a      	str	r2, [r3, #24]
      break;
 80062c0:	e043      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fa8f 	bl	80067ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0208 	orr.w	r2, r2, #8
 80062dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0204 	bic.w	r2, r2, #4
 80062ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69d9      	ldr	r1, [r3, #28]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	61da      	str	r2, [r3, #28]
      break;
 8006300:	e023      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fad9 	bl	80068c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800631c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69da      	ldr	r2, [r3, #28]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800632c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69d9      	ldr	r1, [r3, #28]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	021a      	lsls	r2, r3, #8
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	61da      	str	r2, [r3, #28]
      break;
 8006342:	e002      	b.n	800634a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	75fb      	strb	r3, [r7, #23]
      break;
 8006348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIM_ConfigClockSource+0x1c>
 8006374:	2302      	movs	r3, #2
 8006376:	e0b4      	b.n	80064e2 <HAL_TIM_ConfigClockSource+0x186>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800639e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b0:	d03e      	beq.n	8006430 <HAL_TIM_ConfigClockSource+0xd4>
 80063b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b6:	f200 8087 	bhi.w	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063be:	f000 8086 	beq.w	80064ce <HAL_TIM_ConfigClockSource+0x172>
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c6:	d87f      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	2b70      	cmp	r3, #112	@ 0x70
 80063ca:	d01a      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0xa6>
 80063cc:	2b70      	cmp	r3, #112	@ 0x70
 80063ce:	d87b      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	2b60      	cmp	r3, #96	@ 0x60
 80063d2:	d050      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0x11a>
 80063d4:	2b60      	cmp	r3, #96	@ 0x60
 80063d6:	d877      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063d8:	2b50      	cmp	r3, #80	@ 0x50
 80063da:	d03c      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0xfa>
 80063dc:	2b50      	cmp	r3, #80	@ 0x50
 80063de:	d873      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063e0:	2b40      	cmp	r3, #64	@ 0x40
 80063e2:	d058      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x13a>
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d86f      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063e8:	2b30      	cmp	r3, #48	@ 0x30
 80063ea:	d064      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x15a>
 80063ec:	2b30      	cmp	r3, #48	@ 0x30
 80063ee:	d86b      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d060      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x15a>
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d867      	bhi.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d05c      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x15a>
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d05a      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x15a>
 8006400:	e062      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006412:	f000 fb1f 	bl	8006a54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	609a      	str	r2, [r3, #8]
      break;
 800642e:	e04f      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006440:	f000 fb08 	bl	8006a54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006452:	609a      	str	r2, [r3, #8]
      break;
 8006454:	e03c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006462:	461a      	mov	r2, r3
 8006464:	f000 fa7c 	bl	8006960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2150      	movs	r1, #80	@ 0x50
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fad5 	bl	8006a1e <TIM_ITRx_SetConfig>
      break;
 8006474:	e02c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006482:	461a      	mov	r2, r3
 8006484:	f000 fa9b 	bl	80069be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2160      	movs	r1, #96	@ 0x60
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fac5 	bl	8006a1e <TIM_ITRx_SetConfig>
      break;
 8006494:	e01c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a2:	461a      	mov	r2, r3
 80064a4:	f000 fa5c 	bl	8006960 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2140      	movs	r1, #64	@ 0x40
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fab5 	bl	8006a1e <TIM_ITRx_SetConfig>
      break;
 80064b4:	e00c      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f000 faac 	bl	8006a1e <TIM_ITRx_SetConfig>
      break;
 80064c6:	e003      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
      break;
 80064cc:	e000      	b.n	80064d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a37      	ldr	r2, [pc, #220]	@ (800662c <TIM_Base_SetConfig+0xf0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00f      	beq.n	8006574 <TIM_Base_SetConfig+0x38>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800655a:	d00b      	beq.n	8006574 <TIM_Base_SetConfig+0x38>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a34      	ldr	r2, [pc, #208]	@ (8006630 <TIM_Base_SetConfig+0xf4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_Base_SetConfig+0x38>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a33      	ldr	r2, [pc, #204]	@ (8006634 <TIM_Base_SetConfig+0xf8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_Base_SetConfig+0x38>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a32      	ldr	r2, [pc, #200]	@ (8006638 <TIM_Base_SetConfig+0xfc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d108      	bne.n	8006586 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a28      	ldr	r2, [pc, #160]	@ (800662c <TIM_Base_SetConfig+0xf0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01b      	beq.n	80065c6 <TIM_Base_SetConfig+0x8a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006594:	d017      	beq.n	80065c6 <TIM_Base_SetConfig+0x8a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a25      	ldr	r2, [pc, #148]	@ (8006630 <TIM_Base_SetConfig+0xf4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <TIM_Base_SetConfig+0x8a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a24      	ldr	r2, [pc, #144]	@ (8006634 <TIM_Base_SetConfig+0xf8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00f      	beq.n	80065c6 <TIM_Base_SetConfig+0x8a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a23      	ldr	r2, [pc, #140]	@ (8006638 <TIM_Base_SetConfig+0xfc>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00b      	beq.n	80065c6 <TIM_Base_SetConfig+0x8a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a22      	ldr	r2, [pc, #136]	@ (800663c <TIM_Base_SetConfig+0x100>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d007      	beq.n	80065c6 <TIM_Base_SetConfig+0x8a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a21      	ldr	r2, [pc, #132]	@ (8006640 <TIM_Base_SetConfig+0x104>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d003      	beq.n	80065c6 <TIM_Base_SetConfig+0x8a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a20      	ldr	r2, [pc, #128]	@ (8006644 <TIM_Base_SetConfig+0x108>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d108      	bne.n	80065d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a0c      	ldr	r2, [pc, #48]	@ (800662c <TIM_Base_SetConfig+0xf0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d103      	bne.n	8006606 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f043 0204 	orr.w	r2, r3, #4
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40010000 	.word	0x40010000
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800
 8006638:	40000c00 	.word	0x40000c00
 800663c:	40014000 	.word	0x40014000
 8006640:	40014400 	.word	0x40014400
 8006644:	40014800 	.word	0x40014800

08006648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f023 0201 	bic.w	r2, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 0302 	bic.w	r3, r3, #2
 8006690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a1c      	ldr	r2, [pc, #112]	@ (8006710 <TIM_OC1_SetConfig+0xc8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d10c      	bne.n	80066be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f023 0308 	bic.w	r3, r3, #8
 80066aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 0304 	bic.w	r3, r3, #4
 80066bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a13      	ldr	r2, [pc, #76]	@ (8006710 <TIM_OC1_SetConfig+0xc8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d111      	bne.n	80066ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	621a      	str	r2, [r3, #32]
}
 8006704:	bf00      	nop
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	40010000 	.word	0x40010000

08006714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f023 0210 	bic.w	r2, r3, #16
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800674a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0320 	bic.w	r3, r3, #32
 800675e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a1e      	ldr	r2, [pc, #120]	@ (80067e8 <TIM_OC2_SetConfig+0xd4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d10d      	bne.n	8006790 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800677a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800678e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <TIM_OC2_SetConfig+0xd4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d113      	bne.n	80067c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800679e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000

080067ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0303 	bic.w	r3, r3, #3
 8006822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a1d      	ldr	r2, [pc, #116]	@ (80068bc <TIM_OC3_SetConfig+0xd0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d10d      	bne.n	8006866 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a14      	ldr	r2, [pc, #80]	@ (80068bc <TIM_OC3_SetConfig+0xd0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d113      	bne.n	8006896 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800687c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	621a      	str	r2, [r3, #32]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40010000 	.word	0x40010000

080068c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800690a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	031b      	lsls	r3, r3, #12
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a10      	ldr	r2, [pc, #64]	@ (800695c <TIM_OC4_SetConfig+0x9c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d109      	bne.n	8006934 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000

08006960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f023 0201 	bic.w	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800698a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 030a 	bic.w	r3, r3, #10
 800699c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069be:	b480      	push	{r7}
 80069c0:	b087      	sub	sp, #28
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	f023 0210 	bic.w	r2, r3, #16
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	031b      	lsls	r3, r3, #12
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	621a      	str	r2, [r3, #32]
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f043 0307 	orr.w	r3, r3, #7
 8006a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	609a      	str	r2, [r3, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	021a      	lsls	r2, r3, #8
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	609a      	str	r2, [r3, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e050      	b.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1c      	ldr	r2, [pc, #112]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d018      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af8:	d013      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a18      	ldr	r2, [pc, #96]	@ (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a16      	ldr	r2, [pc, #88]	@ (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a15      	ldr	r2, [pc, #84]	@ (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a13      	ldr	r2, [pc, #76]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d10c      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800
 8006b68:	40000c00 	.word	0x40000c00
 8006b6c:	40014000 	.word	0x40014000

08006b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e03d      	b.n	8006c08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e042      	b.n	8006cd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fb f806 	bl	8001c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2224      	movs	r2, #36	@ 0x24
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fdd3 	bl	800782c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695a      	ldr	r2, [r3, #20]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	@ 0x28
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d175      	bne.n	8006de8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_UART_Transmit+0x2c>
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e06e      	b.n	8006dea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2221      	movs	r2, #33	@ 0x21
 8006d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d1a:	f7fb fa45 	bl	80021a8 <HAL_GetTick>
 8006d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	88fa      	ldrh	r2, [r7, #6]
 8006d24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d34:	d108      	bne.n	8006d48 <HAL_UART_Transmit+0x6c>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d104      	bne.n	8006d48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	61bb      	str	r3, [r7, #24]
 8006d46:	e003      	b.n	8006d50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d50:	e02e      	b.n	8006db0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2180      	movs	r1, #128	@ 0x80
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fb37 	bl	80073d0 <UART_WaitOnFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e03a      	b.n	8006dea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	61bb      	str	r3, [r7, #24]
 8006d90:	e007      	b.n	8006da2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1cb      	bne.n	8006d52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2140      	movs	r1, #64	@ 0x40
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fb03 	bl	80073d0 <UART_WaitOnFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e006      	b.n	8006dea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e000      	b.n	8006dea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006de8:	2302      	movs	r3, #2
  }
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d112      	bne.n	8006e32 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_UART_Receive_IT+0x26>
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e00b      	b.n	8006e34 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	461a      	mov	r2, r3
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fb2a 	bl	8007482 <UART_Start_Receive_IT>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	e000      	b.n	8006e34 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e32:	2302      	movs	r3, #2
  }
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b0ba      	sub	sp, #232	@ 0xe8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10f      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e86:	f003 0320 	and.w	r3, r3, #32
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x66>
 8006e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fc07 	bl	80076ae <UART_Receive_IT>
      return;
 8006ea0:	e273      	b.n	800738a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80de 	beq.w	8007068 <HAL_UART_IRQHandler+0x22c>
 8006eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d106      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ebc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80d1 	beq.w	8007068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <HAL_UART_IRQHandler+0xae>
 8006ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee2:	f043 0201 	orr.w	r2, r3, #1
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eee:	f003 0304 	and.w	r3, r3, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00b      	beq.n	8006f0e <HAL_UART_IRQHandler+0xd2>
 8006ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f06:	f043 0202 	orr.w	r2, r3, #2
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <HAL_UART_IRQHandler+0xf6>
 8006f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2a:	f043 0204 	orr.w	r2, r3, #4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d011      	beq.n	8006f62 <HAL_UART_IRQHandler+0x126>
 8006f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5a:	f043 0208 	orr.w	r2, r3, #8
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 820a 	beq.w	8007380 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_UART_IRQHandler+0x14e>
 8006f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fb92 	bl	80076ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f94:	2b40      	cmp	r3, #64	@ 0x40
 8006f96:	bf0c      	ite	eq
 8006f98:	2301      	moveq	r3, #1
 8006f9a:	2300      	movne	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x17a>
 8006fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d04f      	beq.n	8007056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa9d 	bl	80074f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d141      	bne.n	800704e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3314      	adds	r3, #20
 8006ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800700e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1d9      	bne.n	8006fca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d013      	beq.n	8007046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007022:	4a8a      	ldr	r2, [pc, #552]	@ (800724c <HAL_UART_IRQHandler+0x410>)
 8007024:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702a:	4618      	mov	r0, r3
 800702c:	f7fb fc8c 	bl	8002948 <HAL_DMA_Abort_IT>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d016      	beq.n	8007064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	e00e      	b.n	8007064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9ac 	bl	80073a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704c:	e00a      	b.n	8007064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9a8 	bl	80073a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	e006      	b.n	8007064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9a4 	bl	80073a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007062:	e18d      	b.n	8007380 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007064:	bf00      	nop
    return;
 8007066:	e18b      	b.n	8007380 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	2b01      	cmp	r3, #1
 800706e:	f040 8167 	bne.w	8007340 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8160 	beq.w	8007340 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8159 	beq.w	8007340 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800708e:	2300      	movs	r3, #0
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60bb      	str	r3, [r7, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	60bb      	str	r3, [r7, #8]
 80070a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ae:	2b40      	cmp	r3, #64	@ 0x40
 80070b0:	f040 80ce 	bne.w	8007250 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80a9 	beq.w	800721c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070d2:	429a      	cmp	r2, r3
 80070d4:	f080 80a2 	bcs.w	800721c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ea:	f000 8088 	beq.w	80071fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	330c      	adds	r3, #12
 80070f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800710c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800711a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800711e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007126:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1d9      	bne.n	80070ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3314      	adds	r3, #20
 8007140:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800714a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3314      	adds	r3, #20
 800715a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800715e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007162:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007166:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e1      	bne.n	800713a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3314      	adds	r3, #20
 800717c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800718c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3314      	adds	r3, #20
 8007196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800719a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800719c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e3      	bne.n	8007176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071ce:	f023 0310 	bic.w	r3, r3, #16
 80071d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	330c      	adds	r3, #12
 80071dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80071e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80071e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e3      	bne.n	80071bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fb fb35 	bl	8002868 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2202      	movs	r2, #2
 8007202:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800720c:	b29b      	uxth	r3, r3
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	b29b      	uxth	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f8cf 	bl	80073b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800721a:	e0b3      	b.n	8007384 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007220:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007224:	429a      	cmp	r2, r3
 8007226:	f040 80ad 	bne.w	8007384 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007234:	f040 80a6 	bne.w	8007384 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8b7 	bl	80073b8 <HAL_UARTEx_RxEventCallback>
      return;
 800724a:	e09b      	b.n	8007384 <HAL_UART_IRQHandler+0x548>
 800724c:	080075bd 	.word	0x080075bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007258:	b29b      	uxth	r3, r3
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 808e 	beq.w	8007388 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800726c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 8089 	beq.w	8007388 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	330c      	adds	r3, #12
 800727c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007288:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800728c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800729a:	647a      	str	r2, [r7, #68]	@ 0x44
 800729c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e3      	bne.n	8007276 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3314      	adds	r3, #20
 80072b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	623b      	str	r3, [r7, #32]
   return(result);
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3314      	adds	r3, #20
 80072ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80072d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e3      	bne.n	80072ae <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	330c      	adds	r3, #12
 80072fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	60fb      	str	r3, [r7, #12]
   return(result);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 0310 	bic.w	r3, r3, #16
 800730a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007318:	61fa      	str	r2, [r7, #28]
 800731a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	69b9      	ldr	r1, [r7, #24]
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	617b      	str	r3, [r7, #20]
   return(result);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e3      	bne.n	80072f4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007332:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f83d 	bl	80073b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800733e:	e023      	b.n	8007388 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007348:	2b00      	cmp	r3, #0
 800734a:	d009      	beq.n	8007360 <HAL_UART_IRQHandler+0x524>
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f940 	bl	80075de <UART_Transmit_IT>
    return;
 800735e:	e014      	b.n	800738a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <HAL_UART_IRQHandler+0x54e>
 800736c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d008      	beq.n	800738a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f980 	bl	800767e <UART_EndTransmit_IT>
    return;
 800737e:	e004      	b.n	800738a <HAL_UART_IRQHandler+0x54e>
    return;
 8007380:	bf00      	nop
 8007382:	e002      	b.n	800738a <HAL_UART_IRQHandler+0x54e>
      return;
 8007384:	bf00      	nop
 8007386:	e000      	b.n	800738a <HAL_UART_IRQHandler+0x54e>
      return;
 8007388:	bf00      	nop
  }
}
 800738a:	37e8      	adds	r7, #232	@ 0xe8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e0:	e03b      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d037      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ea:	f7fa fedd 	bl	80021a8 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	6a3a      	ldr	r2, [r7, #32]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d302      	bcc.n	8007400 <UART_WaitOnFlagUntilTimeout+0x30>
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e03a      	b.n	800747a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0304 	and.w	r3, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d023      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b80      	cmp	r3, #128	@ 0x80
 8007416:	d020      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b40      	cmp	r3, #64	@ 0x40
 800741c:	d01d      	beq.n	800745a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b08      	cmp	r3, #8
 800742a:	d116      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f857 	bl	80074f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2208      	movs	r2, #8
 800744c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e00f      	b.n	800747a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4013      	ands	r3, r2
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	429a      	cmp	r2, r3
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	429a      	cmp	r2, r3
 8007476:	d0b4      	beq.n	80073e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	4613      	mov	r3, r2
 800748e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	88fa      	ldrh	r2, [r7, #6]
 80074a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2222      	movs	r2, #34	@ 0x22
 80074ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074c6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695a      	ldr	r2, [r3, #20]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0220 	orr.w	r2, r2, #32
 80074e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b095      	sub	sp, #84	@ 0x54
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	330c      	adds	r3, #12
 8007504:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800751e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e5      	bne.n	80074fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3314      	adds	r3, #20
 8007538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	61fb      	str	r3, [r7, #28]
   return(result);
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3314      	adds	r3, #20
 8007550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007554:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e5      	bne.n	8007532 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756a:	2b01      	cmp	r3, #1
 800756c:	d119      	bne.n	80075a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	60bb      	str	r3, [r7, #8]
   return(result);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f023 0310 	bic.w	r3, r3, #16
 8007584:	647b      	str	r3, [r7, #68]	@ 0x44
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	330c      	adds	r3, #12
 800758c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800758e:	61ba      	str	r2, [r7, #24]
 8007590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6979      	ldr	r1, [r7, #20]
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	613b      	str	r3, [r7, #16]
   return(result);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e5      	bne.n	800756e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80075b0:	bf00      	nop
 80075b2:	3754      	adds	r7, #84	@ 0x54
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fee7 	bl	80073a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b21      	cmp	r3, #33	@ 0x21
 80075f0:	d13e      	bne.n	8007670 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075fa:	d114      	bne.n	8007626 <UART_Transmit_IT+0x48>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d110      	bne.n	8007626 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007618:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	1c9a      	adds	r2, r3, #2
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	621a      	str	r2, [r3, #32]
 8007624:	e008      	b.n	8007638 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	1c59      	adds	r1, r3, #1
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6211      	str	r1, [r2, #32]
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29b      	uxth	r3, r3
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	4619      	mov	r1, r3
 8007646:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800765a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800766a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007694:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff fe76 	bl	8007390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b08c      	sub	sp, #48	@ 0x30
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b22      	cmp	r3, #34	@ 0x22
 80076c8:	f040 80aa 	bne.w	8007820 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d4:	d115      	bne.n	8007702 <UART_Receive_IT+0x54>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d111      	bne.n	8007702 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fa:	1c9a      	adds	r2, r3, #2
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8007700:	e024      	b.n	800774c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007706:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007710:	d007      	beq.n	8007722 <UART_Receive_IT+0x74>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10a      	bne.n	8007730 <UART_Receive_IT+0x82>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	b2da      	uxtb	r2, r3
 800772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	e008      	b.n	8007742 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800773c:	b2da      	uxtb	r2, r3
 800773e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007740:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	b29b      	uxth	r3, r3
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4619      	mov	r1, r3
 800775a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800775c:	2b00      	cmp	r3, #0
 800775e:	d15d      	bne.n	800781c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0220 	bic.w	r2, r2, #32
 800776e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800777e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695a      	ldr	r2, [r3, #20]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d135      	bne.n	8007812 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	613b      	str	r3, [r7, #16]
   return(result);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f023 0310 	bic.w	r3, r3, #16
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	330c      	adds	r3, #12
 80077ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077cc:	623a      	str	r2, [r7, #32]
 80077ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	6a3a      	ldr	r2, [r7, #32]
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	2b10      	cmp	r3, #16
 80077ec:	d10a      	bne.n	8007804 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff fdd4 	bl	80073b8 <HAL_UARTEx_RxEventCallback>
 8007810:	e002      	b.n	8007818 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7f9 fe80 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	e002      	b.n	8007822 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e000      	b.n	8007822 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007820:	2302      	movs	r3, #2
  }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3730      	adds	r7, #48	@ 0x30
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800782c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007830:	b0c0      	sub	sp, #256	@ 0x100
 8007832:	af00      	add	r7, sp, #0
 8007834:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007848:	68d9      	ldr	r1, [r3, #12]
 800784a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	ea40 0301 	orr.w	r3, r0, r1
 8007854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	431a      	orrs	r2, r3
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	431a      	orrs	r2, r3
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	4313      	orrs	r3, r2
 8007874:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007884:	f021 010c 	bic.w	r1, r1, #12
 8007888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007892:	430b      	orrs	r3, r1
 8007894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a6:	6999      	ldr	r1, [r3, #24]
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	ea40 0301 	orr.w	r3, r0, r1
 80078b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	4b8f      	ldr	r3, [pc, #572]	@ (8007af8 <UART_SetConfig+0x2cc>)
 80078bc:	429a      	cmp	r2, r3
 80078be:	d005      	beq.n	80078cc <UART_SetConfig+0xa0>
 80078c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4b8d      	ldr	r3, [pc, #564]	@ (8007afc <UART_SetConfig+0x2d0>)
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d104      	bne.n	80078d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078cc:	f7fd fcc4 	bl	8005258 <HAL_RCC_GetPCLK2Freq>
 80078d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078d4:	e003      	b.n	80078de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078d6:	f7fd fcab 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 80078da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078e8:	f040 810c 	bne.w	8007b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078fe:	4622      	mov	r2, r4
 8007900:	462b      	mov	r3, r5
 8007902:	1891      	adds	r1, r2, r2
 8007904:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007906:	415b      	adcs	r3, r3
 8007908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800790a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800790e:	4621      	mov	r1, r4
 8007910:	eb12 0801 	adds.w	r8, r2, r1
 8007914:	4629      	mov	r1, r5
 8007916:	eb43 0901 	adc.w	r9, r3, r1
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800792a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800792e:	4690      	mov	r8, r2
 8007930:	4699      	mov	r9, r3
 8007932:	4623      	mov	r3, r4
 8007934:	eb18 0303 	adds.w	r3, r8, r3
 8007938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800793c:	462b      	mov	r3, r5
 800793e:	eb49 0303 	adc.w	r3, r9, r3
 8007942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007952:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800795a:	460b      	mov	r3, r1
 800795c:	18db      	adds	r3, r3, r3
 800795e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007960:	4613      	mov	r3, r2
 8007962:	eb42 0303 	adc.w	r3, r2, r3
 8007966:	657b      	str	r3, [r7, #84]	@ 0x54
 8007968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800796c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007970:	f7f8 fc86 	bl	8000280 <__aeabi_uldivmod>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4b61      	ldr	r3, [pc, #388]	@ (8007b00 <UART_SetConfig+0x2d4>)
 800797a:	fba3 2302 	umull	r2, r3, r3, r2
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	011c      	lsls	r4, r3, #4
 8007982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007986:	2200      	movs	r2, #0
 8007988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800798c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007994:	4642      	mov	r2, r8
 8007996:	464b      	mov	r3, r9
 8007998:	1891      	adds	r1, r2, r2
 800799a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800799c:	415b      	adcs	r3, r3
 800799e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079a4:	4641      	mov	r1, r8
 80079a6:	eb12 0a01 	adds.w	sl, r2, r1
 80079aa:	4649      	mov	r1, r9
 80079ac:	eb43 0b01 	adc.w	fp, r3, r1
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079c4:	4692      	mov	sl, r2
 80079c6:	469b      	mov	fp, r3
 80079c8:	4643      	mov	r3, r8
 80079ca:	eb1a 0303 	adds.w	r3, sl, r3
 80079ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079d2:	464b      	mov	r3, r9
 80079d4:	eb4b 0303 	adc.w	r3, fp, r3
 80079d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079f0:	460b      	mov	r3, r1
 80079f2:	18db      	adds	r3, r3, r3
 80079f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80079f6:	4613      	mov	r3, r2
 80079f8:	eb42 0303 	adc.w	r3, r2, r3
 80079fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a06:	f7f8 fc3b 	bl	8000280 <__aeabi_uldivmod>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4b3b      	ldr	r3, [pc, #236]	@ (8007b00 <UART_SetConfig+0x2d4>)
 8007a12:	fba3 2301 	umull	r2, r3, r3, r1
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	2264      	movs	r2, #100	@ 0x64
 8007a1a:	fb02 f303 	mul.w	r3, r2, r3
 8007a1e:	1acb      	subs	r3, r1, r3
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a26:	4b36      	ldr	r3, [pc, #216]	@ (8007b00 <UART_SetConfig+0x2d4>)
 8007a28:	fba3 2302 	umull	r2, r3, r3, r2
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a34:	441c      	add	r4, r3
 8007a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a48:	4642      	mov	r2, r8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	1891      	adds	r1, r2, r2
 8007a4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a50:	415b      	adcs	r3, r3
 8007a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a58:	4641      	mov	r1, r8
 8007a5a:	1851      	adds	r1, r2, r1
 8007a5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a5e:	4649      	mov	r1, r9
 8007a60:	414b      	adcs	r3, r1
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a70:	4659      	mov	r1, fp
 8007a72:	00cb      	lsls	r3, r1, #3
 8007a74:	4651      	mov	r1, sl
 8007a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7a:	4651      	mov	r1, sl
 8007a7c:	00ca      	lsls	r2, r1, #3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4619      	mov	r1, r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	4642      	mov	r2, r8
 8007a86:	189b      	adds	r3, r3, r2
 8007a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a8c:	464b      	mov	r3, r9
 8007a8e:	460a      	mov	r2, r1
 8007a90:	eb42 0303 	adc.w	r3, r2, r3
 8007a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007aac:	460b      	mov	r3, r1
 8007aae:	18db      	adds	r3, r3, r3
 8007ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	eb42 0303 	adc.w	r3, r2, r3
 8007ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ac2:	f7f8 fbdd 	bl	8000280 <__aeabi_uldivmod>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <UART_SetConfig+0x2d4>)
 8007acc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	2164      	movs	r1, #100	@ 0x64
 8007ad4:	fb01 f303 	mul.w	r3, r1, r3
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	3332      	adds	r3, #50	@ 0x32
 8007ade:	4a08      	ldr	r2, [pc, #32]	@ (8007b00 <UART_SetConfig+0x2d4>)
 8007ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	f003 0207 	and.w	r2, r3, #7
 8007aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4422      	add	r2, r4
 8007af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007af4:	e106      	b.n	8007d04 <UART_SetConfig+0x4d8>
 8007af6:	bf00      	nop
 8007af8:	40011000 	.word	0x40011000
 8007afc:	40011400 	.word	0x40011400
 8007b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b16:	4642      	mov	r2, r8
 8007b18:	464b      	mov	r3, r9
 8007b1a:	1891      	adds	r1, r2, r2
 8007b1c:	6239      	str	r1, [r7, #32]
 8007b1e:	415b      	adcs	r3, r3
 8007b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b26:	4641      	mov	r1, r8
 8007b28:	1854      	adds	r4, r2, r1
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	eb43 0501 	adc.w	r5, r3, r1
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	f04f 0300 	mov.w	r3, #0
 8007b38:	00eb      	lsls	r3, r5, #3
 8007b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b3e:	00e2      	lsls	r2, r4, #3
 8007b40:	4614      	mov	r4, r2
 8007b42:	461d      	mov	r5, r3
 8007b44:	4643      	mov	r3, r8
 8007b46:	18e3      	adds	r3, r4, r3
 8007b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	eb45 0303 	adc.w	r3, r5, r3
 8007b52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b72:	4629      	mov	r1, r5
 8007b74:	008b      	lsls	r3, r1, #2
 8007b76:	4621      	mov	r1, r4
 8007b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	008a      	lsls	r2, r1, #2
 8007b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b84:	f7f8 fb7c 	bl	8000280 <__aeabi_uldivmod>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4b60      	ldr	r3, [pc, #384]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b92:	095b      	lsrs	r3, r3, #5
 8007b94:	011c      	lsls	r4, r3, #4
 8007b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ba0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ba8:	4642      	mov	r2, r8
 8007baa:	464b      	mov	r3, r9
 8007bac:	1891      	adds	r1, r2, r2
 8007bae:	61b9      	str	r1, [r7, #24]
 8007bb0:	415b      	adcs	r3, r3
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bb8:	4641      	mov	r1, r8
 8007bba:	1851      	adds	r1, r2, r1
 8007bbc:	6139      	str	r1, [r7, #16]
 8007bbe:	4649      	mov	r1, r9
 8007bc0:	414b      	adcs	r3, r1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bd0:	4659      	mov	r1, fp
 8007bd2:	00cb      	lsls	r3, r1, #3
 8007bd4:	4651      	mov	r1, sl
 8007bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bda:	4651      	mov	r1, sl
 8007bdc:	00ca      	lsls	r2, r1, #3
 8007bde:	4610      	mov	r0, r2
 8007be0:	4619      	mov	r1, r3
 8007be2:	4603      	mov	r3, r0
 8007be4:	4642      	mov	r2, r8
 8007be6:	189b      	adds	r3, r3, r2
 8007be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bec:	464b      	mov	r3, r9
 8007bee:	460a      	mov	r2, r1
 8007bf0:	eb42 0303 	adc.w	r3, r2, r3
 8007bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c04:	f04f 0200 	mov.w	r2, #0
 8007c08:	f04f 0300 	mov.w	r3, #0
 8007c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c10:	4649      	mov	r1, r9
 8007c12:	008b      	lsls	r3, r1, #2
 8007c14:	4641      	mov	r1, r8
 8007c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	008a      	lsls	r2, r1, #2
 8007c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c22:	f7f8 fb2d 	bl	8000280 <__aeabi_uldivmod>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4b38      	ldr	r3, [pc, #224]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	2264      	movs	r2, #100	@ 0x64
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
 8007c3a:	1acb      	subs	r3, r1, r3
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	3332      	adds	r3, #50	@ 0x32
 8007c40:	4a33      	ldr	r2, [pc, #204]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c4c:	441c      	add	r4, r3
 8007c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c52:	2200      	movs	r2, #0
 8007c54:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c56:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	464b      	mov	r3, r9
 8007c60:	1891      	adds	r1, r2, r2
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	415b      	adcs	r3, r3
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c6c:	4641      	mov	r1, r8
 8007c6e:	1851      	adds	r1, r2, r1
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	4649      	mov	r1, r9
 8007c74:	414b      	adcs	r3, r1
 8007c76:	607b      	str	r3, [r7, #4]
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	f04f 0300 	mov.w	r3, #0
 8007c80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c84:	4659      	mov	r1, fp
 8007c86:	00cb      	lsls	r3, r1, #3
 8007c88:	4651      	mov	r1, sl
 8007c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c8e:	4651      	mov	r1, sl
 8007c90:	00ca      	lsls	r2, r1, #3
 8007c92:	4610      	mov	r0, r2
 8007c94:	4619      	mov	r1, r3
 8007c96:	4603      	mov	r3, r0
 8007c98:	4642      	mov	r2, r8
 8007c9a:	189b      	adds	r3, r3, r2
 8007c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	460a      	mov	r2, r1
 8007ca2:	eb42 0303 	adc.w	r3, r2, r3
 8007ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	008b      	lsls	r3, r1, #2
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cca:	4641      	mov	r1, r8
 8007ccc:	008a      	lsls	r2, r1, #2
 8007cce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cd2:	f7f8 fad5 	bl	8000280 <__aeabi_uldivmod>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	2164      	movs	r1, #100	@ 0x64
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	3332      	adds	r3, #50	@ 0x32
 8007cee:	4a08      	ldr	r2, [pc, #32]	@ (8007d10 <UART_SetConfig+0x4e4>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	f003 020f 	and.w	r2, r3, #15
 8007cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4422      	add	r2, r4
 8007d02:	609a      	str	r2, [r3, #8]
}
 8007d04:	bf00      	nop
 8007d06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d10:	51eb851f 	.word	0x51eb851f

08007d14 <__NVIC_SetPriority>:
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	db0a      	blt.n	8007d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	490c      	ldr	r1, [pc, #48]	@ (8007d60 <__NVIC_SetPriority+0x4c>)
 8007d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d32:	0112      	lsls	r2, r2, #4
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	440b      	add	r3, r1
 8007d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d3c:	e00a      	b.n	8007d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	4908      	ldr	r1, [pc, #32]	@ (8007d64 <__NVIC_SetPriority+0x50>)
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	3b04      	subs	r3, #4
 8007d4c:	0112      	lsls	r2, r2, #4
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	440b      	add	r3, r1
 8007d52:	761a      	strb	r2, [r3, #24]
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	e000e100 	.word	0xe000e100
 8007d64:	e000ed00 	.word	0xe000ed00

08007d68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <SysTick_Handler+0x1c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d70:	f001 fdd4 	bl	800991c <xTaskGetSchedulerState>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d001      	beq.n	8007d7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d7a:	f002 fbcd 	bl	800a518 <xPortSysTickHandler>
  }
}
 8007d7e:	bf00      	nop
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	e000e010 	.word	0xe000e010

08007d88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	f06f 0004 	mvn.w	r0, #4
 8007d92:	f7ff ffbf 	bl	8007d14 <__NVIC_SetPriority>
#endif
}
 8007d96:	bf00      	nop
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007da2:	f3ef 8305 	mrs	r3, IPSR
 8007da6:	603b      	str	r3, [r7, #0]
  return(result);
 8007da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007dae:	f06f 0305 	mvn.w	r3, #5
 8007db2:	607b      	str	r3, [r7, #4]
 8007db4:	e00c      	b.n	8007dd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007db6:	4b0a      	ldr	r3, [pc, #40]	@ (8007de0 <osKernelInitialize+0x44>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d105      	bne.n	8007dca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dbe:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <osKernelInitialize+0x44>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	607b      	str	r3, [r7, #4]
 8007dc8:	e002      	b.n	8007dd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dca:	f04f 33ff 	mov.w	r3, #4294967295
 8007dce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007dd0:	687b      	ldr	r3, [r7, #4]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	200003b8 	.word	0x200003b8

08007de4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dea:	f3ef 8305 	mrs	r3, IPSR
 8007dee:	603b      	str	r3, [r7, #0]
  return(result);
 8007df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8007df6:	f06f 0305 	mvn.w	r3, #5
 8007dfa:	607b      	str	r3, [r7, #4]
 8007dfc:	e010      	b.n	8007e20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <osKernelStart+0x48>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d109      	bne.n	8007e1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e06:	f7ff ffbf 	bl	8007d88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e0a:	4b08      	ldr	r3, [pc, #32]	@ (8007e2c <osKernelStart+0x48>)
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e10:	f001 f936 	bl	8009080 <vTaskStartScheduler>
      stat = osOK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	607b      	str	r3, [r7, #4]
 8007e18:	e002      	b.n	8007e20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e20:	687b      	ldr	r3, [r7, #4]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	200003b8 	.word	0x200003b8

08007e30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08e      	sub	sp, #56	@ 0x38
 8007e34:	af04      	add	r7, sp, #16
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e40:	f3ef 8305 	mrs	r3, IPSR
 8007e44:	617b      	str	r3, [r7, #20]
  return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d17e      	bne.n	8007f4a <osThreadNew+0x11a>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d07b      	beq.n	8007f4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e52:	2380      	movs	r3, #128	@ 0x80
 8007e54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e56:	2318      	movs	r3, #24
 8007e58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d045      	beq.n	8007ef6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <osThreadNew+0x48>
        name = attr->name;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d008      	beq.n	8007e9e <osThreadNew+0x6e>
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	2b38      	cmp	r3, #56	@ 0x38
 8007e90:	d805      	bhi.n	8007e9e <osThreadNew+0x6e>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <osThreadNew+0x72>
        return (NULL);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e054      	b.n	8007f4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	089b      	lsrs	r3, r3, #2
 8007eb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00e      	beq.n	8007ed8 <osThreadNew+0xa8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	2b5b      	cmp	r3, #91	@ 0x5b
 8007ec0:	d90a      	bls.n	8007ed8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d006      	beq.n	8007ed8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <osThreadNew+0xa8>
        mem = 1;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e010      	b.n	8007efa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10c      	bne.n	8007efa <osThreadNew+0xca>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d108      	bne.n	8007efa <osThreadNew+0xca>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <osThreadNew+0xca>
          mem = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
 8007ef4:	e001      	b.n	8007efa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d110      	bne.n	8007f22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f08:	9202      	str	r2, [sp, #8]
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	6a3a      	ldr	r2, [r7, #32]
 8007f14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fe56 	bl	8008bc8 <xTaskCreateStatic>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	e013      	b.n	8007f4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d110      	bne.n	8007f4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	f107 0310 	add.w	r3, r7, #16
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 fea4 	bl	8008c88 <xTaskCreate>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d001      	beq.n	8007f4a <osThreadNew+0x11a>
            hTask = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f4a:	693b      	ldr	r3, [r7, #16]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3728      	adds	r7, #40	@ 0x28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f5c:	f3ef 8305 	mrs	r3, IPSR
 8007f60:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <osDelay+0x1c>
    stat = osErrorISR;
 8007f68:	f06f 0305 	mvn.w	r3, #5
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	e007      	b.n	8007f80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 f84a 	bl	8009014 <vTaskDelay>
    }
  }

  return (stat);
 8007f80:	68fb      	ldr	r3, [r7, #12]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4a07      	ldr	r2, [pc, #28]	@ (8007fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	4a06      	ldr	r2, [pc, #24]	@ (8007fbc <vApplicationGetIdleTaskMemory+0x30>)
 8007fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2280      	movs	r2, #128	@ 0x80
 8007fa8:	601a      	str	r2, [r3, #0]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	200003bc 	.word	0x200003bc
 8007fbc:	20000418 	.word	0x20000418

08007fc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a07      	ldr	r2, [pc, #28]	@ (8007fec <vApplicationGetTimerTaskMemory+0x2c>)
 8007fd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	4a06      	ldr	r2, [pc, #24]	@ (8007ff0 <vApplicationGetTimerTaskMemory+0x30>)
 8007fd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fde:	601a      	str	r2, [r3, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20000618 	.word	0x20000618
 8007ff0:	20000674 	.word	0x20000674

08007ff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f103 0208 	add.w	r2, r3, #8
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f04f 32ff 	mov.w	r2, #4294967295
 800800c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f103 0208 	add.w	r2, r3, #8
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f103 0208 	add.w	r2, r3, #8
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	601a      	str	r2, [r3, #0]
}
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d103      	bne.n	80080b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e00c      	b.n	80080d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3308      	adds	r3, #8
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	e002      	b.n	80080c4 <vListInsert+0x2e>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d2f6      	bcs.n	80080be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	601a      	str	r2, [r3, #0]
}
 80080fc:	bf00      	nop
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6892      	ldr	r2, [r2, #8]
 800811e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6852      	ldr	r2, [r2, #4]
 8008128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d103      	bne.n	800813c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	1e5a      	subs	r2, r3, #1
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <xQueueGenericReset+0x2c>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60bb      	str	r3, [r7, #8]
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008188:	f002 f936 	bl	800a3f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008194:	68f9      	ldr	r1, [r7, #12]
 8008196:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008198:	fb01 f303 	mul.w	r3, r1, r3
 800819c:	441a      	add	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b8:	3b01      	subs	r3, #1
 80081ba:	68f9      	ldr	r1, [r7, #12]
 80081bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081be:	fb01 f303 	mul.w	r3, r1, r3
 80081c2:	441a      	add	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	22ff      	movs	r2, #255	@ 0xff
 80081cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	22ff      	movs	r2, #255	@ 0xff
 80081d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d114      	bne.n	8008208 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d01a      	beq.n	800821c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3310      	adds	r3, #16
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 f9d6 	bl	800959c <xTaskRemoveFromEventList>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d012      	beq.n	800821c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081f6:	4b0d      	ldr	r3, [pc, #52]	@ (800822c <xQueueGenericReset+0xd0>)
 80081f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	e009      	b.n	800821c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3310      	adds	r3, #16
 800820c:	4618      	mov	r0, r3
 800820e:	f7ff fef1 	bl	8007ff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3324      	adds	r3, #36	@ 0x24
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff feec 	bl	8007ff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800821c:	f002 f91e 	bl	800a45c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008220:	2301      	movs	r3, #1
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	e000ed04 	.word	0xe000ed04

08008230 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08e      	sub	sp, #56	@ 0x38
 8008234:	af02      	add	r7, sp, #8
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
 800823c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10b      	bne.n	800825c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10b      	bne.n	800827a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	e7fd      	b.n	8008276 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <xQueueGenericCreateStatic+0x56>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <xQueueGenericCreateStatic+0x5a>
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <xQueueGenericCreateStatic+0x5c>
 800828a:	2300      	movs	r3, #0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10b      	bne.n	80082a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	623b      	str	r3, [r7, #32]
}
 80082a2:	bf00      	nop
 80082a4:	bf00      	nop
 80082a6:	e7fd      	b.n	80082a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <xQueueGenericCreateStatic+0x84>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <xQueueGenericCreateStatic+0x88>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <xQueueGenericCreateStatic+0x8a>
 80082b8:	2300      	movs	r3, #0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10b      	bne.n	80082d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	61fb      	str	r3, [r7, #28]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082d6:	2350      	movs	r3, #80	@ 0x50
 80082d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b50      	cmp	r3, #80	@ 0x50
 80082de:	d00b      	beq.n	80082f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	61bb      	str	r3, [r7, #24]
}
 80082f2:	bf00      	nop
 80082f4:	bf00      	nop
 80082f6:	e7fd      	b.n	80082f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80082fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00d      	beq.n	8008320 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800830c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f840 	bl	80083a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008322:	4618      	mov	r0, r3
 8008324:	3730      	adds	r7, #48	@ 0x30
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800832a:	b580      	push	{r7, lr}
 800832c:	b08a      	sub	sp, #40	@ 0x28
 800832e:	af02      	add	r7, sp, #8
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	4613      	mov	r3, r2
 8008336:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10b      	bne.n	8008356 <xQueueGenericCreate+0x2c>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	613b      	str	r3, [r7, #16]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	3350      	adds	r3, #80	@ 0x50
 8008364:	4618      	mov	r0, r3
 8008366:	f002 f969 	bl	800a63c <pvPortMalloc>
 800836a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d011      	beq.n	8008396 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	3350      	adds	r3, #80	@ 0x50
 800837a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008384:	79fa      	ldrb	r2, [r7, #7]
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	4613      	mov	r3, r2
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f805 	bl	80083a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008396:	69bb      	ldr	r3, [r7, #24]
	}
 8008398:	4618      	mov	r0, r3
 800839a:	3720      	adds	r7, #32
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	e002      	b.n	80083c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083ce:	2101      	movs	r1, #1
 80083d0:	69b8      	ldr	r0, [r7, #24]
 80083d2:	f7ff fec3 	bl	800815c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	@ 0x38
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083f6:	2300      	movs	r3, #0
 80083f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10b      	bne.n	800841c <xQueueGenericSend+0x34>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d103      	bne.n	800842a <xQueueGenericSend+0x42>
 8008422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <xQueueGenericSend+0x46>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <xQueueGenericSend+0x48>
 800842e:	2300      	movs	r3, #0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10b      	bne.n	800844c <xQueueGenericSend+0x64>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008446:	bf00      	nop
 8008448:	bf00      	nop
 800844a:	e7fd      	b.n	8008448 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d103      	bne.n	800845a <xQueueGenericSend+0x72>
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <xQueueGenericSend+0x76>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <xQueueGenericSend+0x78>
 800845e:	2300      	movs	r3, #0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10b      	bne.n	800847c <xQueueGenericSend+0x94>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	623b      	str	r3, [r7, #32]
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	e7fd      	b.n	8008478 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800847c:	f001 fa4e 	bl	800991c <xTaskGetSchedulerState>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <xQueueGenericSend+0xa4>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <xQueueGenericSend+0xa8>
 800848c:	2301      	movs	r3, #1
 800848e:	e000      	b.n	8008492 <xQueueGenericSend+0xaa>
 8008490:	2300      	movs	r3, #0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10b      	bne.n	80084ae <xQueueGenericSend+0xc6>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	61fb      	str	r3, [r7, #28]
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	e7fd      	b.n	80084aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ae:	f001 ffa3 	bl	800a3f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d302      	bcc.n	80084c4 <xQueueGenericSend+0xdc>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d129      	bne.n	8008518 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084ca:	f000 fa0f 	bl	80088ec <prvCopyDataToQueue>
 80084ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d010      	beq.n	80084fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	3324      	adds	r3, #36	@ 0x24
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 f85d 	bl	800959c <xTaskRemoveFromEventList>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d013      	beq.n	8008510 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084e8:	4b3f      	ldr	r3, [pc, #252]	@ (80085e8 <xQueueGenericSend+0x200>)
 80084ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	e00a      	b.n	8008510 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d007      	beq.n	8008510 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008500:	4b39      	ldr	r3, [pc, #228]	@ (80085e8 <xQueueGenericSend+0x200>)
 8008502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008510:	f001 ffa4 	bl	800a45c <vPortExitCritical>
				return pdPASS;
 8008514:	2301      	movs	r3, #1
 8008516:	e063      	b.n	80085e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800851e:	f001 ff9d 	bl	800a45c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008522:	2300      	movs	r3, #0
 8008524:	e05c      	b.n	80085e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800852c:	f107 0314 	add.w	r3, r7, #20
 8008530:	4618      	mov	r0, r3
 8008532:	f001 f897 	bl	8009664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008536:	2301      	movs	r3, #1
 8008538:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800853a:	f001 ff8f 	bl	800a45c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800853e:	f000 fe07 	bl	8009150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008542:	f001 ff59 	bl	800a3f8 <vPortEnterCritical>
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800854c:	b25b      	sxtb	r3, r3
 800854e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008552:	d103      	bne.n	800855c <xQueueGenericSend+0x174>
 8008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008562:	b25b      	sxtb	r3, r3
 8008564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008568:	d103      	bne.n	8008572 <xQueueGenericSend+0x18a>
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008572:	f001 ff73 	bl	800a45c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008576:	1d3a      	adds	r2, r7, #4
 8008578:	f107 0314 	add.w	r3, r7, #20
 800857c:	4611      	mov	r1, r2
 800857e:	4618      	mov	r0, r3
 8008580:	f001 f886 	bl	8009690 <xTaskCheckForTimeOut>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d124      	bne.n	80085d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800858a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800858c:	f000 faa6 	bl	8008adc <prvIsQueueFull>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d018      	beq.n	80085c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	3310      	adds	r3, #16
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 ffaa 	bl	80094f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085a6:	f000 fa31 	bl	8008a0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085aa:	f000 fddf 	bl	800916c <xTaskResumeAll>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f47f af7c 	bne.w	80084ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80085b6:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <xQueueGenericSend+0x200>)
 80085b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	e772      	b.n	80084ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085ca:	f000 fa1f 	bl	8008a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085ce:	f000 fdcd 	bl	800916c <xTaskResumeAll>
 80085d2:	e76c      	b.n	80084ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085d6:	f000 fa19 	bl	8008a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085da:	f000 fdc7 	bl	800916c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3738      	adds	r7, #56	@ 0x38
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b090      	sub	sp, #64	@ 0x40
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80085fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10b      	bne.n	800861c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d103      	bne.n	800862a <xQueueGenericSendFromISR+0x3e>
 8008622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <xQueueGenericSendFromISR+0x42>
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <xQueueGenericSendFromISR+0x44>
 800862e:	2300      	movs	r3, #0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10b      	bne.n	800864c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	e7fd      	b.n	8008648 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d103      	bne.n	800865a <xQueueGenericSendFromISR+0x6e>
 8008652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <xQueueGenericSendFromISR+0x72>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <xQueueGenericSendFromISR+0x74>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10b      	bne.n	800867c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	623b      	str	r3, [r7, #32]
}
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	e7fd      	b.n	8008678 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800867c:	f001 ff9c 	bl	800a5b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008680:	f3ef 8211 	mrs	r2, BASEPRI
 8008684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	61fa      	str	r2, [r7, #28]
 8008696:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008698:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800869a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800869c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d302      	bcc.n	80086ae <xQueueGenericSendFromISR+0xc2>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d12f      	bne.n	800870e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80086c4:	f000 f912 	bl	80088ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d112      	bne.n	80086f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d016      	beq.n	8008708 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086dc:	3324      	adds	r3, #36	@ 0x24
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 ff5c 	bl	800959c <xTaskRemoveFromEventList>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00e      	beq.n	8008708 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	e007      	b.n	8008708 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80086fc:	3301      	adds	r3, #1
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	b25a      	sxtb	r2, r3
 8008702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008708:	2301      	movs	r3, #1
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800870c:	e001      	b.n	8008712 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008714:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800871c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800871e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008720:	4618      	mov	r0, r3
 8008722:	3740      	adds	r7, #64	@ 0x40
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08c      	sub	sp, #48	@ 0x30
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008734:	2300      	movs	r3, #0
 8008736:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <xQueueReceive+0x32>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	623b      	str	r3, [r7, #32]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <xQueueReceive+0x40>
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <xQueueReceive+0x44>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <xQueueReceive+0x46>
 800876c:	2300      	movs	r3, #0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10b      	bne.n	800878a <xQueueReceive+0x62>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	61fb      	str	r3, [r7, #28]
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
 8008788:	e7fd      	b.n	8008786 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800878a:	f001 f8c7 	bl	800991c <xTaskGetSchedulerState>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <xQueueReceive+0x72>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <xQueueReceive+0x76>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <xQueueReceive+0x78>
 800879e:	2300      	movs	r3, #0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10b      	bne.n	80087bc <xQueueReceive+0x94>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	61bb      	str	r3, [r7, #24]
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	e7fd      	b.n	80087b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087bc:	f001 fe1c 	bl	800a3f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01f      	beq.n	800880c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087cc:	68b9      	ldr	r1, [r7, #8]
 80087ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087d0:	f000 f8f6 	bl	80089c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	1e5a      	subs	r2, r3, #1
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00f      	beq.n	8008804 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e6:	3310      	adds	r3, #16
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fed7 	bl	800959c <xTaskRemoveFromEventList>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d007      	beq.n	8008804 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087f4:	4b3c      	ldr	r3, [pc, #240]	@ (80088e8 <xQueueReceive+0x1c0>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008804:	f001 fe2a 	bl	800a45c <vPortExitCritical>
				return pdPASS;
 8008808:	2301      	movs	r3, #1
 800880a:	e069      	b.n	80088e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008812:	f001 fe23 	bl	800a45c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008816:	2300      	movs	r3, #0
 8008818:	e062      	b.n	80088e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d106      	bne.n	800882e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008820:	f107 0310 	add.w	r3, r7, #16
 8008824:	4618      	mov	r0, r3
 8008826:	f000 ff1d 	bl	8009664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800882a:	2301      	movs	r3, #1
 800882c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800882e:	f001 fe15 	bl	800a45c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008832:	f000 fc8d 	bl	8009150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008836:	f001 fddf 	bl	800a3f8 <vPortEnterCritical>
 800883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008840:	b25b      	sxtb	r3, r3
 8008842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008846:	d103      	bne.n	8008850 <xQueueReceive+0x128>
 8008848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008856:	b25b      	sxtb	r3, r3
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d103      	bne.n	8008866 <xQueueReceive+0x13e>
 800885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008866:	f001 fdf9 	bl	800a45c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800886a:	1d3a      	adds	r2, r7, #4
 800886c:	f107 0310 	add.w	r3, r7, #16
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f000 ff0c 	bl	8009690 <xTaskCheckForTimeOut>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d123      	bne.n	80088c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800887e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008880:	f000 f916 	bl	8008ab0 <prvIsQueueEmpty>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d017      	beq.n	80088ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	3324      	adds	r3, #36	@ 0x24
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fe30 	bl	80094f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800889a:	f000 f8b7 	bl	8008a0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800889e:	f000 fc65 	bl	800916c <xTaskResumeAll>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d189      	bne.n	80087bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80088a8:	4b0f      	ldr	r3, [pc, #60]	@ (80088e8 <xQueueReceive+0x1c0>)
 80088aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	e780      	b.n	80087bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088bc:	f000 f8a6 	bl	8008a0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088c0:	f000 fc54 	bl	800916c <xTaskResumeAll>
 80088c4:	e77a      	b.n	80087bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c8:	f000 f8a0 	bl	8008a0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088cc:	f000 fc4e 	bl	800916c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088d2:	f000 f8ed 	bl	8008ab0 <prvIsQueueEmpty>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f43f af6f 	beq.w	80087bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3730      	adds	r7, #48	@ 0x30
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	e000ed04 	.word	0xe000ed04

080088ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008900:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10d      	bne.n	8008926 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d14d      	bne.n	80089ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	4618      	mov	r0, r3
 8008918:	f001 f81e 	bl	8009958 <xTaskPriorityDisinherit>
 800891c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	e043      	b.n	80089ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d119      	bne.n	8008960 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6858      	ldr	r0, [r3, #4]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008934:	461a      	mov	r2, r3
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	f002 fa2d 	bl	800ad96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008944:	441a      	add	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	429a      	cmp	r2, r3
 8008954:	d32b      	bcc.n	80089ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	605a      	str	r2, [r3, #4]
 800895e:	e026      	b.n	80089ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	68d8      	ldr	r0, [r3, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008968:	461a      	mov	r2, r3
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	f002 fa13 	bl	800ad96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008978:	425b      	negs	r3, r3
 800897a:	441a      	add	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d207      	bcs.n	800899c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008994:	425b      	negs	r3, r3
 8008996:	441a      	add	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d105      	bne.n	80089ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80089b6:	697b      	ldr	r3, [r7, #20]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d018      	beq.n	8008a04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089da:	441a      	add	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d303      	bcc.n	80089f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68d9      	ldr	r1, [r3, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fc:	461a      	mov	r2, r3
 80089fe:	6838      	ldr	r0, [r7, #0]
 8008a00:	f002 f9c9 	bl	800ad96 <memcpy>
	}
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a14:	f001 fcf0 	bl	800a3f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a20:	e011      	b.n	8008a46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d012      	beq.n	8008a50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3324      	adds	r3, #36	@ 0x24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fdb4 	bl	800959c <xTaskRemoveFromEventList>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a3a:	f000 fe8d 	bl	8009758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	dce9      	bgt.n	8008a22 <prvUnlockQueue+0x16>
 8008a4e:	e000      	b.n	8008a52 <prvUnlockQueue+0x46>
					break;
 8008a50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	22ff      	movs	r2, #255	@ 0xff
 8008a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008a5a:	f001 fcff 	bl	800a45c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a5e:	f001 fccb 	bl	800a3f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a6a:	e011      	b.n	8008a90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d012      	beq.n	8008a9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3310      	adds	r3, #16
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fd8f 	bl	800959c <xTaskRemoveFromEventList>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a84:	f000 fe68 	bl	8009758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dce9      	bgt.n	8008a6c <prvUnlockQueue+0x60>
 8008a98:	e000      	b.n	8008a9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	22ff      	movs	r2, #255	@ 0xff
 8008aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008aa4:	f001 fcda 	bl	800a45c <vPortExitCritical>
}
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ab8:	f001 fc9e 	bl	800a3f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	e001      	b.n	8008ace <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ace:	f001 fcc5 	bl	800a45c <vPortExitCritical>

	return xReturn;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ae4:	f001 fc88 	bl	800a3f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d102      	bne.n	8008afa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008af4:	2301      	movs	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	e001      	b.n	8008afe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008afe:	f001 fcad 	bl	800a45c <vPortExitCritical>

	return xReturn;
 8008b02:	68fb      	ldr	r3, [r7, #12]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	e014      	b.n	8008b46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8008b5c <vQueueAddToRegistry+0x50>)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10b      	bne.n	8008b40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b28:	490c      	ldr	r1, [pc, #48]	@ (8008b5c <vQueueAddToRegistry+0x50>)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b32:	4a0a      	ldr	r2, [pc, #40]	@ (8008b5c <vQueueAddToRegistry+0x50>)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	4413      	add	r3, r2
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b3e:	e006      	b.n	8008b4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b07      	cmp	r3, #7
 8008b4a:	d9e7      	bls.n	8008b1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b4c:	bf00      	nop
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20000a74 	.word	0x20000a74

08008b60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b70:	f001 fc42 	bl	800a3f8 <vPortEnterCritical>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b7a:	b25b      	sxtb	r3, r3
 8008b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b80:	d103      	bne.n	8008b8a <vQueueWaitForMessageRestricted+0x2a>
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b90:	b25b      	sxtb	r3, r3
 8008b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b96:	d103      	bne.n	8008ba0 <vQueueWaitForMessageRestricted+0x40>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ba0:	f001 fc5c 	bl	800a45c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d106      	bne.n	8008bba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	3324      	adds	r3, #36	@ 0x24
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fcc5 	bl	8009544 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bba:	6978      	ldr	r0, [r7, #20]
 8008bbc:	f7ff ff26 	bl	8008a0c <prvUnlockQueue>
	}
 8008bc0:	bf00      	nop
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08e      	sub	sp, #56	@ 0x38
 8008bcc:	af04      	add	r7, sp, #16
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10b      	bne.n	8008bf4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	623b      	str	r3, [r7, #32]
}
 8008bee:	bf00      	nop
 8008bf0:	bf00      	nop
 8008bf2:	e7fd      	b.n	8008bf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	61fb      	str	r3, [r7, #28]
}
 8008c0c:	bf00      	nop
 8008c0e:	bf00      	nop
 8008c10:	e7fd      	b.n	8008c0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c12:	235c      	movs	r3, #92	@ 0x5c
 8008c14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c1a:	d00b      	beq.n	8008c34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	61bb      	str	r3, [r7, #24]
}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	e7fd      	b.n	8008c30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01e      	beq.n	8008c7a <xTaskCreateStatic+0xb2>
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01b      	beq.n	8008c7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c54:	2300      	movs	r3, #0
 8008c56:	9303      	str	r3, [sp, #12]
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	9302      	str	r3, [sp, #8]
 8008c5c:	f107 0314 	add.w	r3, r7, #20
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	68b9      	ldr	r1, [r7, #8]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 f850 	bl	8008d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c74:	f000 f8de 	bl	8008e34 <prvAddNewTaskToReadyList>
 8008c78:	e001      	b.n	8008c7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c7e:	697b      	ldr	r3, [r7, #20]
	}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3728      	adds	r7, #40	@ 0x28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08c      	sub	sp, #48	@ 0x30
 8008c8c:	af04      	add	r7, sp, #16
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 fccd 	bl	800a63c <pvPortMalloc>
 8008ca2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00e      	beq.n	8008cc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008caa:	205c      	movs	r0, #92	@ 0x5c
 8008cac:	f001 fcc6 	bl	800a63c <pvPortMalloc>
 8008cb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cbe:	e005      	b.n	8008ccc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cc0:	6978      	ldr	r0, [r7, #20]
 8008cc2:	f001 fd89 	bl	800a7d8 <vPortFree>
 8008cc6:	e001      	b.n	8008ccc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d017      	beq.n	8008d02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	9302      	str	r3, [sp, #8]
 8008ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68b9      	ldr	r1, [r7, #8]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 f80e 	bl	8008d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cf6:	69f8      	ldr	r0, [r7, #28]
 8008cf8:	f000 f89c 	bl	8008e34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	61bb      	str	r3, [r7, #24]
 8008d00:	e002      	b.n	8008d08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d02:	f04f 33ff 	mov.w	r3, #4294967295
 8008d06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d08:	69bb      	ldr	r3, [r7, #24]
	}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b088      	sub	sp, #32
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d22:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	461a      	mov	r2, r3
 8008d2a:	21a5      	movs	r1, #165	@ 0xa5
 8008d2c:	f001 ffb7 	bl	800ac9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	f023 0307 	bic.w	r3, r3, #7
 8008d48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	617b      	str	r3, [r7, #20]
}
 8008d66:	bf00      	nop
 8008d68:	bf00      	nop
 8008d6a:	e7fd      	b.n	8008d68 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d01f      	beq.n	8008db2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d72:	2300      	movs	r3, #0
 8008d74:	61fb      	str	r3, [r7, #28]
 8008d76:	e012      	b.n	8008d9e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	7819      	ldrb	r1, [r3, #0]
 8008d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4413      	add	r3, r2
 8008d86:	3334      	adds	r3, #52	@ 0x34
 8008d88:	460a      	mov	r2, r1
 8008d8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4413      	add	r3, r2
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d006      	beq.n	8008da6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	61fb      	str	r3, [r7, #28]
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d9e9      	bls.n	8008d78 <prvInitialiseNewTask+0x66>
 8008da4:	e000      	b.n	8008da8 <prvInitialiseNewTask+0x96>
			{
				break;
 8008da6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008db0:	e003      	b.n	8008dba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2b37      	cmp	r3, #55	@ 0x37
 8008dbe:	d901      	bls.n	8008dc4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dc0:	2337      	movs	r3, #55	@ 0x37
 8008dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dce:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff f92a 	bl	8008034 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de2:	3318      	adds	r3, #24
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff f925 	bl	8008034 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dfe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	2200      	movs	r2, #0
 8008e04:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	68f9      	ldr	r1, [r7, #12]
 8008e12:	69b8      	ldr	r0, [r7, #24]
 8008e14:	f001 f9be 	bl	800a194 <pxPortInitialiseStack>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e2a:	bf00      	nop
 8008e2c:	3720      	adds	r7, #32
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e3c:	f001 fadc 	bl	800a3f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e40:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef8 <prvAddNewTaskToReadyList+0xc4>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef8 <prvAddNewTaskToReadyList+0xc4>)
 8008e48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8008efc <prvAddNewTaskToReadyList+0xc8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e52:	4a2a      	ldr	r2, [pc, #168]	@ (8008efc <prvAddNewTaskToReadyList+0xc8>)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e58:	4b27      	ldr	r3, [pc, #156]	@ (8008ef8 <prvAddNewTaskToReadyList+0xc4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d110      	bne.n	8008e82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e60:	f000 fc9e 	bl	80097a0 <prvInitialiseTaskLists>
 8008e64:	e00d      	b.n	8008e82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e66:	4b26      	ldr	r3, [pc, #152]	@ (8008f00 <prvAddNewTaskToReadyList+0xcc>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d109      	bne.n	8008e82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e6e:	4b23      	ldr	r3, [pc, #140]	@ (8008efc <prvAddNewTaskToReadyList+0xc8>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d802      	bhi.n	8008e82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8008efc <prvAddNewTaskToReadyList+0xc8>)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e82:	4b20      	ldr	r3, [pc, #128]	@ (8008f04 <prvAddNewTaskToReadyList+0xd0>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3301      	adds	r3, #1
 8008e88:	4a1e      	ldr	r2, [pc, #120]	@ (8008f04 <prvAddNewTaskToReadyList+0xd0>)
 8008e8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008f04 <prvAddNewTaskToReadyList+0xd0>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e98:	4b1b      	ldr	r3, [pc, #108]	@ (8008f08 <prvAddNewTaskToReadyList+0xd4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d903      	bls.n	8008ea8 <prvAddNewTaskToReadyList+0x74>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea4:	4a18      	ldr	r2, [pc, #96]	@ (8008f08 <prvAddNewTaskToReadyList+0xd4>)
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4a15      	ldr	r2, [pc, #84]	@ (8008f0c <prvAddNewTaskToReadyList+0xd8>)
 8008eb6:	441a      	add	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7ff f8c5 	bl	800804e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ec4:	f001 faca 	bl	800a45c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8008f00 <prvAddNewTaskToReadyList+0xcc>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00e      	beq.n	8008eee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <prvAddNewTaskToReadyList+0xc8>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d207      	bcs.n	8008eee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ede:	4b0c      	ldr	r3, [pc, #48]	@ (8008f10 <prvAddNewTaskToReadyList+0xdc>)
 8008ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000f88 	.word	0x20000f88
 8008efc:	20000ab4 	.word	0x20000ab4
 8008f00:	20000f94 	.word	0x20000f94
 8008f04:	20000fa4 	.word	0x20000fa4
 8008f08:	20000f90 	.word	0x20000f90
 8008f0c:	20000ab8 	.word	0x20000ab8
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	@ 0x28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10b      	bne.n	8008f40 <vTaskDelayUntil+0x2c>
	__asm volatile
 8008f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	617b      	str	r3, [r7, #20]
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	e7fd      	b.n	8008f3c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10b      	bne.n	8008f5e <vTaskDelayUntil+0x4a>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	613b      	str	r3, [r7, #16]
}
 8008f58:	bf00      	nop
 8008f5a:	bf00      	nop
 8008f5c:	e7fd      	b.n	8008f5a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8008f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8009008 <vTaskDelayUntil+0xf4>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00b      	beq.n	8008f7e <vTaskDelayUntil+0x6a>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	e7fd      	b.n	8008f7a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8008f7e:	f000 f8e7 	bl	8009150 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008f82:	4b22      	ldr	r3, [pc, #136]	@ (800900c <vTaskDelayUntil+0xf8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	4413      	add	r3, r2
 8008f90:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6a3a      	ldr	r2, [r7, #32]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d20b      	bcs.n	8008fb4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69fa      	ldr	r2, [r7, #28]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d211      	bcs.n	8008fca <vTaskDelayUntil+0xb6>
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d90d      	bls.n	8008fca <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fb2:	e00a      	b.n	8008fca <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d303      	bcc.n	8008fc6 <vTaskDelayUntil+0xb2>
 8008fbe:	69fa      	ldr	r2, [r7, #28]
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d901      	bls.n	8008fca <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d006      	beq.n	8008fe4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008fd6:	69fa      	ldr	r2, [r7, #28]
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2100      	movs	r1, #0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fd2a 	bl	8009a38 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008fe4:	f000 f8c2 	bl	800916c <xTaskResumeAll>
 8008fe8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d107      	bne.n	8009000 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8008ff0:	4b07      	ldr	r3, [pc, #28]	@ (8009010 <vTaskDelayUntil+0xfc>)
 8008ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009000:	bf00      	nop
 8009002:	3728      	adds	r7, #40	@ 0x28
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20000fb0 	.word	0x20000fb0
 800900c:	20000f8c 	.word	0x20000f8c
 8009010:	e000ed04 	.word	0xe000ed04

08009014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d018      	beq.n	8009058 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009026:	4b14      	ldr	r3, [pc, #80]	@ (8009078 <vTaskDelay+0x64>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <vTaskDelay+0x32>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60bb      	str	r3, [r7, #8]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009046:	f000 f883 	bl	8009150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800904a:	2100      	movs	r1, #0
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fcf3 	bl	8009a38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009052:	f000 f88b 	bl	800916c <xTaskResumeAll>
 8009056:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d107      	bne.n	800906e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800905e:	4b07      	ldr	r3, [pc, #28]	@ (800907c <vTaskDelay+0x68>)
 8009060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800906e:	bf00      	nop
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000fb0 	.word	0x20000fb0
 800907c:	e000ed04 	.word	0xe000ed04

08009080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08a      	sub	sp, #40	@ 0x28
 8009084:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800908e:	463a      	mov	r2, r7
 8009090:	1d39      	adds	r1, r7, #4
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe ff78 	bl	8007f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	9202      	str	r2, [sp, #8]
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	2300      	movs	r3, #0
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	2300      	movs	r3, #0
 80090ac:	460a      	mov	r2, r1
 80090ae:	4922      	ldr	r1, [pc, #136]	@ (8009138 <vTaskStartScheduler+0xb8>)
 80090b0:	4822      	ldr	r0, [pc, #136]	@ (800913c <vTaskStartScheduler+0xbc>)
 80090b2:	f7ff fd89 	bl	8008bc8 <xTaskCreateStatic>
 80090b6:	4603      	mov	r3, r0
 80090b8:	4a21      	ldr	r2, [pc, #132]	@ (8009140 <vTaskStartScheduler+0xc0>)
 80090ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090bc:	4b20      	ldr	r3, [pc, #128]	@ (8009140 <vTaskStartScheduler+0xc0>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e001      	b.n	80090ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d102      	bne.n	80090da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090d4:	f000 fd04 	bl	8009ae0 <xTimerCreateTimerTask>
 80090d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d116      	bne.n	800910e <vTaskStartScheduler+0x8e>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	613b      	str	r3, [r7, #16]
}
 80090f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090f4:	4b13      	ldr	r3, [pc, #76]	@ (8009144 <vTaskStartScheduler+0xc4>)
 80090f6:	f04f 32ff 	mov.w	r2, #4294967295
 80090fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090fc:	4b12      	ldr	r3, [pc, #72]	@ (8009148 <vTaskStartScheduler+0xc8>)
 80090fe:	2201      	movs	r2, #1
 8009100:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009102:	4b12      	ldr	r3, [pc, #72]	@ (800914c <vTaskStartScheduler+0xcc>)
 8009104:	2200      	movs	r2, #0
 8009106:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009108:	f001 f8d2 	bl	800a2b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800910c:	e00f      	b.n	800912e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009114:	d10b      	bne.n	800912e <vTaskStartScheduler+0xae>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	60fb      	str	r3, [r7, #12]
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	e7fd      	b.n	800912a <vTaskStartScheduler+0xaa>
}
 800912e:	bf00      	nop
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	0800ba64 	.word	0x0800ba64
 800913c:	08009771 	.word	0x08009771
 8009140:	20000fac 	.word	0x20000fac
 8009144:	20000fa8 	.word	0x20000fa8
 8009148:	20000f94 	.word	0x20000f94
 800914c:	20000f8c 	.word	0x20000f8c

08009150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009150:	b480      	push	{r7}
 8009152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009154:	4b04      	ldr	r3, [pc, #16]	@ (8009168 <vTaskSuspendAll+0x18>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3301      	adds	r3, #1
 800915a:	4a03      	ldr	r2, [pc, #12]	@ (8009168 <vTaskSuspendAll+0x18>)
 800915c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800915e:	bf00      	nop
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	20000fb0 	.word	0x20000fb0

0800916c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800917a:	4b42      	ldr	r3, [pc, #264]	@ (8009284 <xTaskResumeAll+0x118>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10b      	bne.n	800919a <xTaskResumeAll+0x2e>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	603b      	str	r3, [r7, #0]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800919a:	f001 f92d 	bl	800a3f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800919e:	4b39      	ldr	r3, [pc, #228]	@ (8009284 <xTaskResumeAll+0x118>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	4a37      	ldr	r2, [pc, #220]	@ (8009284 <xTaskResumeAll+0x118>)
 80091a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091a8:	4b36      	ldr	r3, [pc, #216]	@ (8009284 <xTaskResumeAll+0x118>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d162      	bne.n	8009276 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091b0:	4b35      	ldr	r3, [pc, #212]	@ (8009288 <xTaskResumeAll+0x11c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d05e      	beq.n	8009276 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091b8:	e02f      	b.n	800921a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ba:	4b34      	ldr	r3, [pc, #208]	@ (800928c <xTaskResumeAll+0x120>)
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3318      	adds	r3, #24
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fe ff9e 	bl	8008108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe ff99 	bl	8008108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091da:	4b2d      	ldr	r3, [pc, #180]	@ (8009290 <xTaskResumeAll+0x124>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d903      	bls.n	80091ea <xTaskResumeAll+0x7e>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009290 <xTaskResumeAll+0x124>)
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4a27      	ldr	r2, [pc, #156]	@ (8009294 <xTaskResumeAll+0x128>)
 80091f8:	441a      	add	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3304      	adds	r3, #4
 80091fe:	4619      	mov	r1, r3
 8009200:	4610      	mov	r0, r2
 8009202:	f7fe ff24 	bl	800804e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800920a:	4b23      	ldr	r3, [pc, #140]	@ (8009298 <xTaskResumeAll+0x12c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009210:	429a      	cmp	r2, r3
 8009212:	d302      	bcc.n	800921a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009214:	4b21      	ldr	r3, [pc, #132]	@ (800929c <xTaskResumeAll+0x130>)
 8009216:	2201      	movs	r2, #1
 8009218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800921a:	4b1c      	ldr	r3, [pc, #112]	@ (800928c <xTaskResumeAll+0x120>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1cb      	bne.n	80091ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009228:	f000 fb58 	bl	80098dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800922c:	4b1c      	ldr	r3, [pc, #112]	@ (80092a0 <xTaskResumeAll+0x134>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d010      	beq.n	800925a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009238:	f000 f846 	bl	80092c8 <xTaskIncrementTick>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009242:	4b16      	ldr	r3, [pc, #88]	@ (800929c <xTaskResumeAll+0x130>)
 8009244:	2201      	movs	r2, #1
 8009246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3b01      	subs	r3, #1
 800924c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1f1      	bne.n	8009238 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009254:	4b12      	ldr	r3, [pc, #72]	@ (80092a0 <xTaskResumeAll+0x134>)
 8009256:	2200      	movs	r2, #0
 8009258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800925a:	4b10      	ldr	r3, [pc, #64]	@ (800929c <xTaskResumeAll+0x130>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d009      	beq.n	8009276 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009262:	2301      	movs	r3, #1
 8009264:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009266:	4b0f      	ldr	r3, [pc, #60]	@ (80092a4 <xTaskResumeAll+0x138>)
 8009268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009276:	f001 f8f1 	bl	800a45c <vPortExitCritical>

	return xAlreadyYielded;
 800927a:	68bb      	ldr	r3, [r7, #8]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20000fb0 	.word	0x20000fb0
 8009288:	20000f88 	.word	0x20000f88
 800928c:	20000f48 	.word	0x20000f48
 8009290:	20000f90 	.word	0x20000f90
 8009294:	20000ab8 	.word	0x20000ab8
 8009298:	20000ab4 	.word	0x20000ab4
 800929c:	20000f9c 	.word	0x20000f9c
 80092a0:	20000f98 	.word	0x20000f98
 80092a4:	e000ed04 	.word	0xe000ed04

080092a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092ae:	4b05      	ldr	r3, [pc, #20]	@ (80092c4 <xTaskGetTickCount+0x1c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092b4:	687b      	ldr	r3, [r7, #4]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000f8c 	.word	0x20000f8c

080092c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092d2:	4b4f      	ldr	r3, [pc, #316]	@ (8009410 <xTaskIncrementTick+0x148>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f040 8090 	bne.w	80093fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092dc:	4b4d      	ldr	r3, [pc, #308]	@ (8009414 <xTaskIncrementTick+0x14c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3301      	adds	r3, #1
 80092e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092e4:	4a4b      	ldr	r2, [pc, #300]	@ (8009414 <xTaskIncrementTick+0x14c>)
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d121      	bne.n	8009334 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80092f0:	4b49      	ldr	r3, [pc, #292]	@ (8009418 <xTaskIncrementTick+0x150>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <xTaskIncrementTick+0x4a>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	603b      	str	r3, [r7, #0]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <xTaskIncrementTick+0x46>
 8009312:	4b41      	ldr	r3, [pc, #260]	@ (8009418 <xTaskIncrementTick+0x150>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	4b40      	ldr	r3, [pc, #256]	@ (800941c <xTaskIncrementTick+0x154>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a3e      	ldr	r2, [pc, #248]	@ (8009418 <xTaskIncrementTick+0x150>)
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	4a3e      	ldr	r2, [pc, #248]	@ (800941c <xTaskIncrementTick+0x154>)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	4b3e      	ldr	r3, [pc, #248]	@ (8009420 <xTaskIncrementTick+0x158>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3301      	adds	r3, #1
 800932c:	4a3c      	ldr	r2, [pc, #240]	@ (8009420 <xTaskIncrementTick+0x158>)
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	f000 fad4 	bl	80098dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009334:	4b3b      	ldr	r3, [pc, #236]	@ (8009424 <xTaskIncrementTick+0x15c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	429a      	cmp	r2, r3
 800933c:	d349      	bcc.n	80093d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800933e:	4b36      	ldr	r3, [pc, #216]	@ (8009418 <xTaskIncrementTick+0x150>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d104      	bne.n	8009352 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009348:	4b36      	ldr	r3, [pc, #216]	@ (8009424 <xTaskIncrementTick+0x15c>)
 800934a:	f04f 32ff 	mov.w	r2, #4294967295
 800934e:	601a      	str	r2, [r3, #0]
					break;
 8009350:	e03f      	b.n	80093d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009352:	4b31      	ldr	r3, [pc, #196]	@ (8009418 <xTaskIncrementTick+0x150>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	429a      	cmp	r2, r3
 8009368:	d203      	bcs.n	8009372 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800936a:	4a2e      	ldr	r2, [pc, #184]	@ (8009424 <xTaskIncrementTick+0x15c>)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009370:	e02f      	b.n	80093d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	3304      	adds	r3, #4
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fec6 	bl	8008108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	3318      	adds	r3, #24
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe febd 	bl	8008108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009392:	4b25      	ldr	r3, [pc, #148]	@ (8009428 <xTaskIncrementTick+0x160>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d903      	bls.n	80093a2 <xTaskIncrementTick+0xda>
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939e:	4a22      	ldr	r2, [pc, #136]	@ (8009428 <xTaskIncrementTick+0x160>)
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4a1f      	ldr	r2, [pc, #124]	@ (800942c <xTaskIncrementTick+0x164>)
 80093b0:	441a      	add	r2, r3
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f7fe fe48 	bl	800804e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009430 <xTaskIncrementTick+0x168>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d3b8      	bcc.n	800933e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80093cc:	2301      	movs	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093d0:	e7b5      	b.n	800933e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093d2:	4b17      	ldr	r3, [pc, #92]	@ (8009430 <xTaskIncrementTick+0x168>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d8:	4914      	ldr	r1, [pc, #80]	@ (800942c <xTaskIncrementTick+0x164>)
 80093da:	4613      	mov	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	440b      	add	r3, r1
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d901      	bls.n	80093ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80093ea:	2301      	movs	r3, #1
 80093ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093ee:	4b11      	ldr	r3, [pc, #68]	@ (8009434 <xTaskIncrementTick+0x16c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d007      	beq.n	8009406 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80093f6:	2301      	movs	r3, #1
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	e004      	b.n	8009406 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009438 <xTaskIncrementTick+0x170>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3301      	adds	r3, #1
 8009402:	4a0d      	ldr	r2, [pc, #52]	@ (8009438 <xTaskIncrementTick+0x170>)
 8009404:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009406:	697b      	ldr	r3, [r7, #20]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20000fb0 	.word	0x20000fb0
 8009414:	20000f8c 	.word	0x20000f8c
 8009418:	20000f40 	.word	0x20000f40
 800941c:	20000f44 	.word	0x20000f44
 8009420:	20000fa0 	.word	0x20000fa0
 8009424:	20000fa8 	.word	0x20000fa8
 8009428:	20000f90 	.word	0x20000f90
 800942c:	20000ab8 	.word	0x20000ab8
 8009430:	20000ab4 	.word	0x20000ab4
 8009434:	20000f9c 	.word	0x20000f9c
 8009438:	20000f98 	.word	0x20000f98

0800943c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009442:	4b28      	ldr	r3, [pc, #160]	@ (80094e4 <vTaskSwitchContext+0xa8>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800944a:	4b27      	ldr	r3, [pc, #156]	@ (80094e8 <vTaskSwitchContext+0xac>)
 800944c:	2201      	movs	r2, #1
 800944e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009450:	e042      	b.n	80094d8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009452:	4b25      	ldr	r3, [pc, #148]	@ (80094e8 <vTaskSwitchContext+0xac>)
 8009454:	2200      	movs	r2, #0
 8009456:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009458:	4b24      	ldr	r3, [pc, #144]	@ (80094ec <vTaskSwitchContext+0xb0>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e011      	b.n	8009484 <vTaskSwitchContext+0x48>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <vTaskSwitchContext+0x42>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	607b      	str	r3, [r7, #4]
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	e7fd      	b.n	800947a <vTaskSwitchContext+0x3e>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3b01      	subs	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	491a      	ldr	r1, [pc, #104]	@ (80094f0 <vTaskSwitchContext+0xb4>)
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0e3      	beq.n	8009460 <vTaskSwitchContext+0x24>
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4a13      	ldr	r2, [pc, #76]	@ (80094f0 <vTaskSwitchContext+0xb4>)
 80094a4:	4413      	add	r3, r2
 80094a6:	60bb      	str	r3, [r7, #8]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	605a      	str	r2, [r3, #4]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	3308      	adds	r3, #8
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d104      	bne.n	80094c8 <vTaskSwitchContext+0x8c>
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	605a      	str	r2, [r3, #4]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	4a09      	ldr	r2, [pc, #36]	@ (80094f4 <vTaskSwitchContext+0xb8>)
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	4a06      	ldr	r2, [pc, #24]	@ (80094ec <vTaskSwitchContext+0xb0>)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6013      	str	r3, [r2, #0]
}
 80094d8:	bf00      	nop
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	20000fb0 	.word	0x20000fb0
 80094e8:	20000f9c 	.word	0x20000f9c
 80094ec:	20000f90 	.word	0x20000f90
 80094f0:	20000ab8 	.word	0x20000ab8
 80094f4:	20000ab4 	.word	0x20000ab4

080094f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10b      	bne.n	8009520 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	60fb      	str	r3, [r7, #12]
}
 800951a:	bf00      	nop
 800951c:	bf00      	nop
 800951e:	e7fd      	b.n	800951c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009520:	4b07      	ldr	r3, [pc, #28]	@ (8009540 <vTaskPlaceOnEventList+0x48>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3318      	adds	r3, #24
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7fe fdb4 	bl	8008096 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800952e:	2101      	movs	r1, #1
 8009530:	6838      	ldr	r0, [r7, #0]
 8009532:	f000 fa81 	bl	8009a38 <prvAddCurrentTaskToDelayedList>
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000ab4 	.word	0x20000ab4

08009544 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10b      	bne.n	800956e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	617b      	str	r3, [r7, #20]
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	e7fd      	b.n	800956a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800956e:	4b0a      	ldr	r3, [pc, #40]	@ (8009598 <vTaskPlaceOnEventListRestricted+0x54>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3318      	adds	r3, #24
 8009574:	4619      	mov	r1, r3
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7fe fd69 	bl	800804e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009582:	f04f 33ff 	mov.w	r3, #4294967295
 8009586:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009588:	6879      	ldr	r1, [r7, #4]
 800958a:	68b8      	ldr	r0, [r7, #8]
 800958c:	f000 fa54 	bl	8009a38 <prvAddCurrentTaskToDelayedList>
	}
 8009590:	bf00      	nop
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20000ab4 	.word	0x20000ab4

0800959c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10b      	bne.n	80095ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	60fb      	str	r3, [r7, #12]
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	e7fd      	b.n	80095c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	3318      	adds	r3, #24
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe fd9a 	bl	8008108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095d4:	4b1d      	ldr	r3, [pc, #116]	@ (800964c <xTaskRemoveFromEventList+0xb0>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11d      	bne.n	8009618 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	3304      	adds	r3, #4
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fd91 	bl	8008108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ea:	4b19      	ldr	r3, [pc, #100]	@ (8009650 <xTaskRemoveFromEventList+0xb4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d903      	bls.n	80095fa <xTaskRemoveFromEventList+0x5e>
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f6:	4a16      	ldr	r2, [pc, #88]	@ (8009650 <xTaskRemoveFromEventList+0xb4>)
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4a13      	ldr	r2, [pc, #76]	@ (8009654 <xTaskRemoveFromEventList+0xb8>)
 8009608:	441a      	add	r2, r3
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7fe fd1c 	bl	800804e <vListInsertEnd>
 8009616:	e005      	b.n	8009624 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	3318      	adds	r3, #24
 800961c:	4619      	mov	r1, r3
 800961e:	480e      	ldr	r0, [pc, #56]	@ (8009658 <xTaskRemoveFromEventList+0xbc>)
 8009620:	f7fe fd15 	bl	800804e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009628:	4b0c      	ldr	r3, [pc, #48]	@ (800965c <xTaskRemoveFromEventList+0xc0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962e:	429a      	cmp	r2, r3
 8009630:	d905      	bls.n	800963e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009632:	2301      	movs	r3, #1
 8009634:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009636:	4b0a      	ldr	r3, [pc, #40]	@ (8009660 <xTaskRemoveFromEventList+0xc4>)
 8009638:	2201      	movs	r2, #1
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	e001      	b.n	8009642 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800963e:	2300      	movs	r3, #0
 8009640:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009642:	697b      	ldr	r3, [r7, #20]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	20000fb0 	.word	0x20000fb0
 8009650:	20000f90 	.word	0x20000f90
 8009654:	20000ab8 	.word	0x20000ab8
 8009658:	20000f48 	.word	0x20000f48
 800965c:	20000ab4 	.word	0x20000ab4
 8009660:	20000f9c 	.word	0x20000f9c

08009664 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800966c:	4b06      	ldr	r3, [pc, #24]	@ (8009688 <vTaskInternalSetTimeOutState+0x24>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009674:	4b05      	ldr	r3, [pc, #20]	@ (800968c <vTaskInternalSetTimeOutState+0x28>)
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	605a      	str	r2, [r3, #4]
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	20000fa0 	.word	0x20000fa0
 800968c:	20000f8c 	.word	0x20000f8c

08009690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10b      	bne.n	80096b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	613b      	str	r3, [r7, #16]
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10b      	bne.n	80096d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	60fb      	str	r3, [r7, #12]
}
 80096d0:	bf00      	nop
 80096d2:	bf00      	nop
 80096d4:	e7fd      	b.n	80096d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80096d6:	f000 fe8f 	bl	800a3f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096da:	4b1d      	ldr	r3, [pc, #116]	@ (8009750 <xTaskCheckForTimeOut+0xc0>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	69ba      	ldr	r2, [r7, #24]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f2:	d102      	bne.n	80096fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	e023      	b.n	8009742 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <xTaskCheckForTimeOut+0xc4>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d007      	beq.n	8009716 <xTaskCheckForTimeOut+0x86>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	429a      	cmp	r2, r3
 800970e:	d302      	bcc.n	8009716 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009710:	2301      	movs	r3, #1
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	e015      	b.n	8009742 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	429a      	cmp	r2, r3
 800971e:	d20b      	bcs.n	8009738 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	1ad2      	subs	r2, r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff ff99 	bl	8009664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	61fb      	str	r3, [r7, #28]
 8009736:	e004      	b.n	8009742 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800973e:	2301      	movs	r3, #1
 8009740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009742:	f000 fe8b 	bl	800a45c <vPortExitCritical>

	return xReturn;
 8009746:	69fb      	ldr	r3, [r7, #28]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20000f8c 	.word	0x20000f8c
 8009754:	20000fa0 	.word	0x20000fa0

08009758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800975c:	4b03      	ldr	r3, [pc, #12]	@ (800976c <vTaskMissedYield+0x14>)
 800975e:	2201      	movs	r2, #1
 8009760:	601a      	str	r2, [r3, #0]
}
 8009762:	bf00      	nop
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	20000f9c 	.word	0x20000f9c

08009770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009778:	f000 f852 	bl	8009820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800977c:	4b06      	ldr	r3, [pc, #24]	@ (8009798 <prvIdleTask+0x28>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d9f9      	bls.n	8009778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009784:	4b05      	ldr	r3, [pc, #20]	@ (800979c <prvIdleTask+0x2c>)
 8009786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009794:	e7f0      	b.n	8009778 <prvIdleTask+0x8>
 8009796:	bf00      	nop
 8009798:	20000ab8 	.word	0x20000ab8
 800979c:	e000ed04 	.word	0xe000ed04

080097a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097a6:	2300      	movs	r3, #0
 80097a8:	607b      	str	r3, [r7, #4]
 80097aa:	e00c      	b.n	80097c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	4613      	mov	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4a12      	ldr	r2, [pc, #72]	@ (8009800 <prvInitialiseTaskLists+0x60>)
 80097b8:	4413      	add	r3, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe fc1a 	bl	8007ff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3301      	adds	r3, #1
 80097c4:	607b      	str	r3, [r7, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b37      	cmp	r3, #55	@ 0x37
 80097ca:	d9ef      	bls.n	80097ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097cc:	480d      	ldr	r0, [pc, #52]	@ (8009804 <prvInitialiseTaskLists+0x64>)
 80097ce:	f7fe fc11 	bl	8007ff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097d2:	480d      	ldr	r0, [pc, #52]	@ (8009808 <prvInitialiseTaskLists+0x68>)
 80097d4:	f7fe fc0e 	bl	8007ff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097d8:	480c      	ldr	r0, [pc, #48]	@ (800980c <prvInitialiseTaskLists+0x6c>)
 80097da:	f7fe fc0b 	bl	8007ff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097de:	480c      	ldr	r0, [pc, #48]	@ (8009810 <prvInitialiseTaskLists+0x70>)
 80097e0:	f7fe fc08 	bl	8007ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097e4:	480b      	ldr	r0, [pc, #44]	@ (8009814 <prvInitialiseTaskLists+0x74>)
 80097e6:	f7fe fc05 	bl	8007ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009818 <prvInitialiseTaskLists+0x78>)
 80097ec:	4a05      	ldr	r2, [pc, #20]	@ (8009804 <prvInitialiseTaskLists+0x64>)
 80097ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097f0:	4b0a      	ldr	r3, [pc, #40]	@ (800981c <prvInitialiseTaskLists+0x7c>)
 80097f2:	4a05      	ldr	r2, [pc, #20]	@ (8009808 <prvInitialiseTaskLists+0x68>)
 80097f4:	601a      	str	r2, [r3, #0]
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20000ab8 	.word	0x20000ab8
 8009804:	20000f18 	.word	0x20000f18
 8009808:	20000f2c 	.word	0x20000f2c
 800980c:	20000f48 	.word	0x20000f48
 8009810:	20000f5c 	.word	0x20000f5c
 8009814:	20000f74 	.word	0x20000f74
 8009818:	20000f40 	.word	0x20000f40
 800981c:	20000f44 	.word	0x20000f44

08009820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009826:	e019      	b.n	800985c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009828:	f000 fde6 	bl	800a3f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982c:	4b10      	ldr	r3, [pc, #64]	@ (8009870 <prvCheckTasksWaitingTermination+0x50>)
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3304      	adds	r3, #4
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe fc65 	bl	8008108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800983e:	4b0d      	ldr	r3, [pc, #52]	@ (8009874 <prvCheckTasksWaitingTermination+0x54>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3b01      	subs	r3, #1
 8009844:	4a0b      	ldr	r2, [pc, #44]	@ (8009874 <prvCheckTasksWaitingTermination+0x54>)
 8009846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009848:	4b0b      	ldr	r3, [pc, #44]	@ (8009878 <prvCheckTasksWaitingTermination+0x58>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3b01      	subs	r3, #1
 800984e:	4a0a      	ldr	r2, [pc, #40]	@ (8009878 <prvCheckTasksWaitingTermination+0x58>)
 8009850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009852:	f000 fe03 	bl	800a45c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f810 	bl	800987c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800985c:	4b06      	ldr	r3, [pc, #24]	@ (8009878 <prvCheckTasksWaitingTermination+0x58>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e1      	bne.n	8009828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000f5c 	.word	0x20000f5c
 8009874:	20000f88 	.word	0x20000f88
 8009878:	20000f70 	.word	0x20000f70

0800987c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800988a:	2b00      	cmp	r3, #0
 800988c:	d108      	bne.n	80098a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009892:	4618      	mov	r0, r3
 8009894:	f000 ffa0 	bl	800a7d8 <vPortFree>
				vPortFree( pxTCB );
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 ff9d 	bl	800a7d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800989e:	e019      	b.n	80098d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d103      	bne.n	80098b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 ff94 	bl	800a7d8 <vPortFree>
	}
 80098b0:	e010      	b.n	80098d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d00b      	beq.n	80098d4 <prvDeleteTCB+0x58>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	60fb      	str	r3, [r7, #12]
}
 80098ce:	bf00      	nop
 80098d0:	bf00      	nop
 80098d2:	e7fd      	b.n	80098d0 <prvDeleteTCB+0x54>
	}
 80098d4:	bf00      	nop
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009914 <prvResetNextTaskUnblockTime+0x38>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009918 <prvResetNextTaskUnblockTime+0x3c>)
 80098ee:	f04f 32ff 	mov.w	r2, #4294967295
 80098f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098f4:	e008      	b.n	8009908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f6:	4b07      	ldr	r3, [pc, #28]	@ (8009914 <prvResetNextTaskUnblockTime+0x38>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	4a04      	ldr	r2, [pc, #16]	@ (8009918 <prvResetNextTaskUnblockTime+0x3c>)
 8009906:	6013      	str	r3, [r2, #0]
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	20000f40 	.word	0x20000f40
 8009918:	20000fa8 	.word	0x20000fa8

0800991c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009922:	4b0b      	ldr	r3, [pc, #44]	@ (8009950 <xTaskGetSchedulerState+0x34>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d102      	bne.n	8009930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800992a:	2301      	movs	r3, #1
 800992c:	607b      	str	r3, [r7, #4]
 800992e:	e008      	b.n	8009942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009930:	4b08      	ldr	r3, [pc, #32]	@ (8009954 <xTaskGetSchedulerState+0x38>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009938:	2302      	movs	r3, #2
 800993a:	607b      	str	r3, [r7, #4]
 800993c:	e001      	b.n	8009942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800993e:	2300      	movs	r3, #0
 8009940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009942:	687b      	ldr	r3, [r7, #4]
	}
 8009944:	4618      	mov	r0, r3
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	20000f94 	.word	0x20000f94
 8009954:	20000fb0 	.word	0x20000fb0

08009958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d058      	beq.n	8009a20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800996e:	4b2f      	ldr	r3, [pc, #188]	@ (8009a2c <xTaskPriorityDisinherit+0xd4>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	429a      	cmp	r2, r3
 8009976:	d00b      	beq.n	8009990 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	60fb      	str	r3, [r7, #12]
}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	e7fd      	b.n	800998c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10b      	bne.n	80099b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	60bb      	str	r3, [r7, #8]
}
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
 80099ae:	e7fd      	b.n	80099ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099b4:	1e5a      	subs	r2, r3, #1
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d02c      	beq.n	8009a20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d128      	bne.n	8009a20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	3304      	adds	r3, #4
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fb98 	bl	8008108 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009a30 <xTaskPriorityDisinherit+0xd8>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d903      	bls.n	8009a00 <xTaskPriorityDisinherit+0xa8>
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009a30 <xTaskPriorityDisinherit+0xd8>)
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a04:	4613      	mov	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4a09      	ldr	r2, [pc, #36]	@ (8009a34 <xTaskPriorityDisinherit+0xdc>)
 8009a0e:	441a      	add	r2, r3
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	3304      	adds	r3, #4
 8009a14:	4619      	mov	r1, r3
 8009a16:	4610      	mov	r0, r2
 8009a18:	f7fe fb19 	bl	800804e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a20:	697b      	ldr	r3, [r7, #20]
	}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3718      	adds	r7, #24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20000ab4 	.word	0x20000ab4
 8009a30:	20000f90 	.word	0x20000f90
 8009a34:	20000ab8 	.word	0x20000ab8

08009a38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a42:	4b21      	ldr	r3, [pc, #132]	@ (8009ac8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a48:	4b20      	ldr	r3, [pc, #128]	@ (8009acc <prvAddCurrentTaskToDelayedList+0x94>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fb5a 	bl	8008108 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5a:	d10a      	bne.n	8009a72 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d007      	beq.n	8009a72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a62:	4b1a      	ldr	r3, [pc, #104]	@ (8009acc <prvAddCurrentTaskToDelayedList+0x94>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3304      	adds	r3, #4
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4819      	ldr	r0, [pc, #100]	@ (8009ad0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a6c:	f7fe faef 	bl	800804e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a70:	e026      	b.n	8009ac0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4413      	add	r3, r2
 8009a78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a7a:	4b14      	ldr	r3, [pc, #80]	@ (8009acc <prvAddCurrentTaskToDelayedList+0x94>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d209      	bcs.n	8009a9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a8a:	4b12      	ldr	r3, [pc, #72]	@ (8009ad4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009acc <prvAddCurrentTaskToDelayedList+0x94>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4619      	mov	r1, r3
 8009a96:	4610      	mov	r0, r2
 8009a98:	f7fe fafd 	bl	8008096 <vListInsert>
}
 8009a9c:	e010      	b.n	8009ac0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8009acc <prvAddCurrentTaskToDelayedList+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe faf3 	bl	8008096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8009adc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d202      	bcs.n	8009ac0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009aba:	4a08      	ldr	r2, [pc, #32]	@ (8009adc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	6013      	str	r3, [r2, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	20000f8c 	.word	0x20000f8c
 8009acc:	20000ab4 	.word	0x20000ab4
 8009ad0:	20000f74 	.word	0x20000f74
 8009ad4:	20000f44 	.word	0x20000f44
 8009ad8:	20000f40 	.word	0x20000f40
 8009adc:	20000fa8 	.word	0x20000fa8

08009ae0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08a      	sub	sp, #40	@ 0x28
 8009ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009aea:	f000 fb13 	bl	800a114 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009aee:	4b1d      	ldr	r3, [pc, #116]	@ (8009b64 <xTimerCreateTimerTask+0x84>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d021      	beq.n	8009b3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009afe:	1d3a      	adds	r2, r7, #4
 8009b00:	f107 0108 	add.w	r1, r7, #8
 8009b04:	f107 030c 	add.w	r3, r7, #12
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe fa59 	bl	8007fc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	9202      	str	r2, [sp, #8]
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	2302      	movs	r3, #2
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	460a      	mov	r2, r1
 8009b20:	4911      	ldr	r1, [pc, #68]	@ (8009b68 <xTimerCreateTimerTask+0x88>)
 8009b22:	4812      	ldr	r0, [pc, #72]	@ (8009b6c <xTimerCreateTimerTask+0x8c>)
 8009b24:	f7ff f850 	bl	8008bc8 <xTaskCreateStatic>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	4a11      	ldr	r2, [pc, #68]	@ (8009b70 <xTimerCreateTimerTask+0x90>)
 8009b2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b2e:	4b10      	ldr	r3, [pc, #64]	@ (8009b70 <xTimerCreateTimerTask+0x90>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b36:	2301      	movs	r3, #1
 8009b38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10b      	bne.n	8009b58 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	613b      	str	r3, [r7, #16]
}
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	e7fd      	b.n	8009b54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b58:	697b      	ldr	r3, [r7, #20]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20000fe4 	.word	0x20000fe4
 8009b68:	0800ba6c 	.word	0x0800ba6c
 8009b6c:	08009cad 	.word	0x08009cad
 8009b70:	20000fe8 	.word	0x20000fe8

08009b74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08a      	sub	sp, #40	@ 0x28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10b      	bne.n	8009ba4 <xTimerGenericCommand+0x30>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	623b      	str	r3, [r7, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ba4:	4b19      	ldr	r3, [pc, #100]	@ (8009c0c <xTimerGenericCommand+0x98>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d02a      	beq.n	8009c02 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	dc18      	bgt.n	8009bf0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bbe:	f7ff fead 	bl	800991c <xTaskGetSchedulerState>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d109      	bne.n	8009bdc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bc8:	4b10      	ldr	r3, [pc, #64]	@ (8009c0c <xTimerGenericCommand+0x98>)
 8009bca:	6818      	ldr	r0, [r3, #0]
 8009bcc:	f107 0110 	add.w	r1, r7, #16
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd4:	f7fe fc08 	bl	80083e8 <xQueueGenericSend>
 8009bd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009bda:	e012      	b.n	8009c02 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8009c0c <xTimerGenericCommand+0x98>)
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	f107 0110 	add.w	r1, r7, #16
 8009be4:	2300      	movs	r3, #0
 8009be6:	2200      	movs	r2, #0
 8009be8:	f7fe fbfe 	bl	80083e8 <xQueueGenericSend>
 8009bec:	6278      	str	r0, [r7, #36]	@ 0x24
 8009bee:	e008      	b.n	8009c02 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bf0:	4b06      	ldr	r3, [pc, #24]	@ (8009c0c <xTimerGenericCommand+0x98>)
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	f107 0110 	add.w	r1, r7, #16
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	f7fe fcf6 	bl	80085ec <xQueueGenericSendFromISR>
 8009c00:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3728      	adds	r7, #40	@ 0x28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20000fe4 	.word	0x20000fe4

08009c10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af02      	add	r7, sp, #8
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1a:	4b23      	ldr	r3, [pc, #140]	@ (8009ca8 <prvProcessExpiredTimer+0x98>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe fa6d 	bl	8008108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d023      	beq.n	8009c84 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	699a      	ldr	r2, [r3, #24]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	18d1      	adds	r1, r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	6978      	ldr	r0, [r7, #20]
 8009c4a:	f000 f8d5 	bl	8009df8 <prvInsertTimerInActiveList>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d020      	beq.n	8009c96 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c54:	2300      	movs	r3, #0
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	2300      	movs	r3, #0
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	6978      	ldr	r0, [r7, #20]
 8009c60:	f7ff ff88 	bl	8009b74 <xTimerGenericCommand>
 8009c64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d114      	bne.n	8009c96 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60fb      	str	r3, [r7, #12]
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	e7fd      	b.n	8009c80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c8a:	f023 0301 	bic.w	r3, r3, #1
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	6978      	ldr	r0, [r7, #20]
 8009c9c:	4798      	blx	r3
}
 8009c9e:	bf00      	nop
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20000fdc 	.word	0x20000fdc

08009cac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cb4:	f107 0308 	add.w	r3, r7, #8
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f859 	bl	8009d70 <prvGetNextExpireTime>
 8009cbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 f805 	bl	8009cd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cca:	f000 f8d7 	bl	8009e7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cce:	bf00      	nop
 8009cd0:	e7f0      	b.n	8009cb4 <prvTimerTask+0x8>
	...

08009cd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009cde:	f7ff fa37 	bl	8009150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ce2:	f107 0308 	add.w	r3, r7, #8
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f866 	bl	8009db8 <prvSampleTimeNow>
 8009cec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d130      	bne.n	8009d56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <prvProcessTimerOrBlockTask+0x3c>
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d806      	bhi.n	8009d10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d02:	f7ff fa33 	bl	800916c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff ff81 	bl	8009c10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d0e:	e024      	b.n	8009d5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d008      	beq.n	8009d28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d16:	4b13      	ldr	r3, [pc, #76]	@ (8009d64 <prvProcessTimerOrBlockTask+0x90>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <prvProcessTimerOrBlockTask+0x50>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e000      	b.n	8009d26 <prvProcessTimerOrBlockTask+0x52>
 8009d24:	2300      	movs	r3, #0
 8009d26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d28:	4b0f      	ldr	r3, [pc, #60]	@ (8009d68 <prvProcessTimerOrBlockTask+0x94>)
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4619      	mov	r1, r3
 8009d36:	f7fe ff13 	bl	8008b60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d3a:	f7ff fa17 	bl	800916c <xTaskResumeAll>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10a      	bne.n	8009d5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d44:	4b09      	ldr	r3, [pc, #36]	@ (8009d6c <prvProcessTimerOrBlockTask+0x98>)
 8009d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	f3bf 8f6f 	isb	sy
}
 8009d54:	e001      	b.n	8009d5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d56:	f7ff fa09 	bl	800916c <xTaskResumeAll>
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000fe0 	.word	0x20000fe0
 8009d68:	20000fe4 	.word	0x20000fe4
 8009d6c:	e000ed04 	.word	0xe000ed04

08009d70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d78:	4b0e      	ldr	r3, [pc, #56]	@ (8009db4 <prvGetNextExpireTime+0x44>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <prvGetNextExpireTime+0x16>
 8009d82:	2201      	movs	r2, #1
 8009d84:	e000      	b.n	8009d88 <prvGetNextExpireTime+0x18>
 8009d86:	2200      	movs	r2, #0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d105      	bne.n	8009da0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d94:	4b07      	ldr	r3, [pc, #28]	@ (8009db4 <prvGetNextExpireTime+0x44>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	e001      	b.n	8009da4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009da4:	68fb      	ldr	r3, [r7, #12]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	20000fdc 	.word	0x20000fdc

08009db8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009dc0:	f7ff fa72 	bl	80092a8 <xTaskGetTickCount>
 8009dc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8009df4 <prvSampleTimeNow+0x3c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d205      	bcs.n	8009ddc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009dd0:	f000 f93a 	bl	800a048 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	e002      	b.n	8009de2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009de2:	4a04      	ldr	r2, [pc, #16]	@ (8009df4 <prvSampleTimeNow+0x3c>)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009de8:	68fb      	ldr	r3, [r7, #12]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000fec 	.word	0x20000fec

08009df8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e06:	2300      	movs	r3, #0
 8009e08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d812      	bhi.n	8009e44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	1ad2      	subs	r2, r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d302      	bcc.n	8009e32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	e01b      	b.n	8009e6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <prvInsertTimerInActiveList+0x7c>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7fe f92a 	bl	8008096 <vListInsert>
 8009e42:	e012      	b.n	8009e6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d206      	bcs.n	8009e5a <prvInsertTimerInActiveList+0x62>
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d302      	bcc.n	8009e5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e54:	2301      	movs	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	e007      	b.n	8009e6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e5a:	4b07      	ldr	r3, [pc, #28]	@ (8009e78 <prvInsertTimerInActiveList+0x80>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3304      	adds	r3, #4
 8009e62:	4619      	mov	r1, r3
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7fe f916 	bl	8008096 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e6a:	697b      	ldr	r3, [r7, #20]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000fe0 	.word	0x20000fe0
 8009e78:	20000fdc 	.word	0x20000fdc

08009e7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08e      	sub	sp, #56	@ 0x38
 8009e80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e82:	e0ce      	b.n	800a022 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da19      	bge.n	8009ebe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e8a:	1d3b      	adds	r3, r7, #4
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10b      	bne.n	8009eae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	61fb      	str	r3, [r7, #28]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eb4:	6850      	ldr	r0, [r2, #4]
 8009eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eb8:	6892      	ldr	r2, [r2, #8]
 8009eba:	4611      	mov	r1, r2
 8009ebc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f2c0 80ae 	blt.w	800a022 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d004      	beq.n	8009edc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe f916 	bl	8008108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009edc:	463b      	mov	r3, r7
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff ff6a 	bl	8009db8 <prvSampleTimeNow>
 8009ee4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b09      	cmp	r3, #9
 8009eea:	f200 8097 	bhi.w	800a01c <prvProcessReceivedCommands+0x1a0>
 8009eee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <prvProcessReceivedCommands+0x78>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f1d 	.word	0x08009f1d
 8009ef8:	08009f1d 	.word	0x08009f1d
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009f93 	.word	0x08009f93
 8009f04:	08009fa7 	.word	0x08009fa7
 8009f08:	08009ff3 	.word	0x08009ff3
 8009f0c:	08009f1d 	.word	0x08009f1d
 8009f10:	08009f1d 	.word	0x08009f1d
 8009f14:	08009f93 	.word	0x08009f93
 8009f18:	08009fa7 	.word	0x08009fa7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	18d1      	adds	r1, r2, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f3c:	f7ff ff5c 	bl	8009df8 <prvInsertTimerInActiveList>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d06c      	beq.n	800a020 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d061      	beq.n	800a020 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	441a      	add	r2, r3
 8009f64:	2300      	movs	r3, #0
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f6e:	f7ff fe01 	bl	8009b74 <xTimerGenericCommand>
 8009f72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d152      	bne.n	800a020 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	61bb      	str	r3, [r7, #24]
}
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	e7fd      	b.n	8009f8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f98:	f023 0301 	bic.w	r3, r3, #1
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009fa4:	e03d      	b.n	800a022 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fac:	f043 0301 	orr.w	r3, r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	617b      	str	r3, [r7, #20]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe0:	699a      	ldr	r2, [r3, #24]
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe4:	18d1      	adds	r1, r2, r3
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fec:	f7ff ff04 	bl	8009df8 <prvInsertTimerInActiveList>
					break;
 8009ff0:	e017      	b.n	800a022 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d103      	bne.n	800a008 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a002:	f000 fbe9 	bl	800a7d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a006:	e00c      	b.n	800a022 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a00e:	f023 0301 	bic.w	r3, r3, #1
 800a012:	b2da      	uxtb	r2, r3
 800a014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a016:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a01a:	e002      	b.n	800a022 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a01c:	bf00      	nop
 800a01e:	e000      	b.n	800a022 <prvProcessReceivedCommands+0x1a6>
					break;
 800a020:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a022:	4b08      	ldr	r3, [pc, #32]	@ (800a044 <prvProcessReceivedCommands+0x1c8>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	1d39      	adds	r1, r7, #4
 800a028:	2200      	movs	r2, #0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe fb7c 	bl	8008728 <xQueueReceive>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	f47f af26 	bne.w	8009e84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a038:	bf00      	nop
 800a03a:	bf00      	nop
 800a03c:	3730      	adds	r7, #48	@ 0x30
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20000fe4 	.word	0x20000fe4

0800a048 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a04e:	e049      	b.n	800a0e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a050:	4b2e      	ldr	r3, [pc, #184]	@ (800a10c <prvSwitchTimerLists+0xc4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a05a:	4b2c      	ldr	r3, [pc, #176]	@ (800a10c <prvSwitchTimerLists+0xc4>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3304      	adds	r3, #4
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe f84d 	bl	8008108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a07c:	f003 0304 	and.w	r3, r3, #4
 800a080:	2b00      	cmp	r3, #0
 800a082:	d02f      	beq.n	800a0e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	4413      	add	r3, r2
 800a08c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	429a      	cmp	r2, r3
 800a094:	d90e      	bls.n	800a0b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a10c <prvSwitchTimerLists+0xc4>)
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	f7fd fff2 	bl	8008096 <vListInsert>
 800a0b2:	e017      	b.n	800a0e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	2100      	movs	r1, #0
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7ff fd58 	bl	8009b74 <xTimerGenericCommand>
 800a0c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10b      	bne.n	800a0e4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	603b      	str	r3, [r7, #0]
}
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	e7fd      	b.n	800a0e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0e4:	4b09      	ldr	r3, [pc, #36]	@ (800a10c <prvSwitchTimerLists+0xc4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1b0      	bne.n	800a050 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0ee:	4b07      	ldr	r3, [pc, #28]	@ (800a10c <prvSwitchTimerLists+0xc4>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0f4:	4b06      	ldr	r3, [pc, #24]	@ (800a110 <prvSwitchTimerLists+0xc8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a04      	ldr	r2, [pc, #16]	@ (800a10c <prvSwitchTimerLists+0xc4>)
 800a0fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0fc:	4a04      	ldr	r2, [pc, #16]	@ (800a110 <prvSwitchTimerLists+0xc8>)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	6013      	str	r3, [r2, #0]
}
 800a102:	bf00      	nop
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000fdc 	.word	0x20000fdc
 800a110:	20000fe0 	.word	0x20000fe0

0800a114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a11a:	f000 f96d 	bl	800a3f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a11e:	4b15      	ldr	r3, [pc, #84]	@ (800a174 <prvCheckForValidListAndQueue+0x60>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d120      	bne.n	800a168 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a126:	4814      	ldr	r0, [pc, #80]	@ (800a178 <prvCheckForValidListAndQueue+0x64>)
 800a128:	f7fd ff64 	bl	8007ff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a12c:	4813      	ldr	r0, [pc, #76]	@ (800a17c <prvCheckForValidListAndQueue+0x68>)
 800a12e:	f7fd ff61 	bl	8007ff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a132:	4b13      	ldr	r3, [pc, #76]	@ (800a180 <prvCheckForValidListAndQueue+0x6c>)
 800a134:	4a10      	ldr	r2, [pc, #64]	@ (800a178 <prvCheckForValidListAndQueue+0x64>)
 800a136:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a138:	4b12      	ldr	r3, [pc, #72]	@ (800a184 <prvCheckForValidListAndQueue+0x70>)
 800a13a:	4a10      	ldr	r2, [pc, #64]	@ (800a17c <prvCheckForValidListAndQueue+0x68>)
 800a13c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a13e:	2300      	movs	r3, #0
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	4b11      	ldr	r3, [pc, #68]	@ (800a188 <prvCheckForValidListAndQueue+0x74>)
 800a144:	4a11      	ldr	r2, [pc, #68]	@ (800a18c <prvCheckForValidListAndQueue+0x78>)
 800a146:	2110      	movs	r1, #16
 800a148:	200a      	movs	r0, #10
 800a14a:	f7fe f871 	bl	8008230 <xQueueGenericCreateStatic>
 800a14e:	4603      	mov	r3, r0
 800a150:	4a08      	ldr	r2, [pc, #32]	@ (800a174 <prvCheckForValidListAndQueue+0x60>)
 800a152:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a154:	4b07      	ldr	r3, [pc, #28]	@ (800a174 <prvCheckForValidListAndQueue+0x60>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a15c:	4b05      	ldr	r3, [pc, #20]	@ (800a174 <prvCheckForValidListAndQueue+0x60>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	490b      	ldr	r1, [pc, #44]	@ (800a190 <prvCheckForValidListAndQueue+0x7c>)
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe fcd2 	bl	8008b0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a168:	f000 f978 	bl	800a45c <vPortExitCritical>
}
 800a16c:	bf00      	nop
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20000fe4 	.word	0x20000fe4
 800a178:	20000fb4 	.word	0x20000fb4
 800a17c:	20000fc8 	.word	0x20000fc8
 800a180:	20000fdc 	.word	0x20000fdc
 800a184:	20000fe0 	.word	0x20000fe0
 800a188:	20001090 	.word	0x20001090
 800a18c:	20000ff0 	.word	0x20000ff0
 800a190:	0800ba74 	.word	0x0800ba74

0800a194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3b04      	subs	r3, #4
 800a1a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3b04      	subs	r3, #4
 800a1b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f023 0201 	bic.w	r2, r3, #1
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3b04      	subs	r3, #4
 800a1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1c4:	4a0c      	ldr	r2, [pc, #48]	@ (800a1f8 <pxPortInitialiseStack+0x64>)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	3b14      	subs	r3, #20
 800a1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3b04      	subs	r3, #4
 800a1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f06f 0202 	mvn.w	r2, #2
 800a1e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3b20      	subs	r3, #32
 800a1e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	0800a1fd 	.word	0x0800a1fd

0800a1fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a206:	4b13      	ldr	r3, [pc, #76]	@ (800a254 <prvTaskExitError+0x58>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20e:	d00b      	beq.n	800a228 <prvTaskExitError+0x2c>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	60fb      	str	r3, [r7, #12]
}
 800a222:	bf00      	nop
 800a224:	bf00      	nop
 800a226:	e7fd      	b.n	800a224 <prvTaskExitError+0x28>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	60bb      	str	r3, [r7, #8]
}
 800a23a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a23c:	bf00      	nop
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d0fc      	beq.n	800a23e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	2000000c 	.word	0x2000000c
	...

0800a260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a260:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <pxCurrentTCBConst2>)
 800a262:	6819      	ldr	r1, [r3, #0]
 800a264:	6808      	ldr	r0, [r1, #0]
 800a266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26a:	f380 8809 	msr	PSP, r0
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f04f 0000 	mov.w	r0, #0
 800a276:	f380 8811 	msr	BASEPRI, r0
 800a27a:	4770      	bx	lr
 800a27c:	f3af 8000 	nop.w

0800a280 <pxCurrentTCBConst2>:
 800a280:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop

0800a288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a288:	4808      	ldr	r0, [pc, #32]	@ (800a2ac <prvPortStartFirstTask+0x24>)
 800a28a:	6800      	ldr	r0, [r0, #0]
 800a28c:	6800      	ldr	r0, [r0, #0]
 800a28e:	f380 8808 	msr	MSP, r0
 800a292:	f04f 0000 	mov.w	r0, #0
 800a296:	f380 8814 	msr	CONTROL, r0
 800a29a:	b662      	cpsie	i
 800a29c:	b661      	cpsie	f
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	df00      	svc	0
 800a2a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2aa:	bf00      	nop
 800a2ac:	e000ed08 	.word	0xe000ed08

0800a2b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2b6:	4b47      	ldr	r3, [pc, #284]	@ (800a3d4 <xPortStartScheduler+0x124>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a47      	ldr	r2, [pc, #284]	@ (800a3d8 <xPortStartScheduler+0x128>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d10b      	bne.n	800a2d8 <xPortStartScheduler+0x28>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	60fb      	str	r3, [r7, #12]
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a3d4 <xPortStartScheduler+0x124>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a3f      	ldr	r2, [pc, #252]	@ (800a3dc <xPortStartScheduler+0x12c>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d10b      	bne.n	800a2fa <xPortStartScheduler+0x4a>
	__asm volatile
 800a2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	613b      	str	r3, [r7, #16]
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop
 800a2f8:	e7fd      	b.n	800a2f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2fa:	4b39      	ldr	r3, [pc, #228]	@ (800a3e0 <xPortStartScheduler+0x130>)
 800a2fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	22ff      	movs	r2, #255	@ 0xff
 800a30a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a314:	78fb      	ldrb	r3, [r7, #3]
 800a316:	b2db      	uxtb	r3, r3
 800a318:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	4b31      	ldr	r3, [pc, #196]	@ (800a3e4 <xPortStartScheduler+0x134>)
 800a320:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a322:	4b31      	ldr	r3, [pc, #196]	@ (800a3e8 <xPortStartScheduler+0x138>)
 800a324:	2207      	movs	r2, #7
 800a326:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a328:	e009      	b.n	800a33e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a32a:	4b2f      	ldr	r3, [pc, #188]	@ (800a3e8 <xPortStartScheduler+0x138>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	3b01      	subs	r3, #1
 800a330:	4a2d      	ldr	r2, [pc, #180]	@ (800a3e8 <xPortStartScheduler+0x138>)
 800a332:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a346:	2b80      	cmp	r3, #128	@ 0x80
 800a348:	d0ef      	beq.n	800a32a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a34a:	4b27      	ldr	r3, [pc, #156]	@ (800a3e8 <xPortStartScheduler+0x138>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f1c3 0307 	rsb	r3, r3, #7
 800a352:	2b04      	cmp	r3, #4
 800a354:	d00b      	beq.n	800a36e <xPortStartScheduler+0xbe>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60bb      	str	r3, [r7, #8]
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	e7fd      	b.n	800a36a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a36e:	4b1e      	ldr	r3, [pc, #120]	@ (800a3e8 <xPortStartScheduler+0x138>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	4a1c      	ldr	r2, [pc, #112]	@ (800a3e8 <xPortStartScheduler+0x138>)
 800a376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a378:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e8 <xPortStartScheduler+0x138>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a380:	4a19      	ldr	r2, [pc, #100]	@ (800a3e8 <xPortStartScheduler+0x138>)
 800a382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	b2da      	uxtb	r2, r3
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a38c:	4b17      	ldr	r3, [pc, #92]	@ (800a3ec <xPortStartScheduler+0x13c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a16      	ldr	r2, [pc, #88]	@ (800a3ec <xPortStartScheduler+0x13c>)
 800a392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a398:	4b14      	ldr	r3, [pc, #80]	@ (800a3ec <xPortStartScheduler+0x13c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a13      	ldr	r2, [pc, #76]	@ (800a3ec <xPortStartScheduler+0x13c>)
 800a39e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3a4:	f000 f8da 	bl	800a55c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3a8:	4b11      	ldr	r3, [pc, #68]	@ (800a3f0 <xPortStartScheduler+0x140>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3ae:	f000 f8f9 	bl	800a5a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3b2:	4b10      	ldr	r3, [pc, #64]	@ (800a3f4 <xPortStartScheduler+0x144>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a3f4 <xPortStartScheduler+0x144>)
 800a3b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a3bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3be:	f7ff ff63 	bl	800a288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3c2:	f7ff f83b 	bl	800943c <vTaskSwitchContext>
	prvTaskExitError();
 800a3c6:	f7ff ff19 	bl	800a1fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	e000ed00 	.word	0xe000ed00
 800a3d8:	410fc271 	.word	0x410fc271
 800a3dc:	410fc270 	.word	0x410fc270
 800a3e0:	e000e400 	.word	0xe000e400
 800a3e4:	200010e0 	.word	0x200010e0
 800a3e8:	200010e4 	.word	0x200010e4
 800a3ec:	e000ed20 	.word	0xe000ed20
 800a3f0:	2000000c 	.word	0x2000000c
 800a3f4:	e000ef34 	.word	0xe000ef34

0800a3f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a412:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <vPortEnterCritical+0x5c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3301      	adds	r3, #1
 800a418:	4a0e      	ldr	r2, [pc, #56]	@ (800a454 <vPortEnterCritical+0x5c>)
 800a41a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a41c:	4b0d      	ldr	r3, [pc, #52]	@ (800a454 <vPortEnterCritical+0x5c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d110      	bne.n	800a446 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a424:	4b0c      	ldr	r3, [pc, #48]	@ (800a458 <vPortEnterCritical+0x60>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <vPortEnterCritical+0x4e>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	603b      	str	r3, [r7, #0]
}
 800a440:	bf00      	nop
 800a442:	bf00      	nop
 800a444:	e7fd      	b.n	800a442 <vPortEnterCritical+0x4a>
	}
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	2000000c 	.word	0x2000000c
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a462:	4b12      	ldr	r3, [pc, #72]	@ (800a4ac <vPortExitCritical+0x50>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10b      	bne.n	800a482 <vPortExitCritical+0x26>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	607b      	str	r3, [r7, #4]
}
 800a47c:	bf00      	nop
 800a47e:	bf00      	nop
 800a480:	e7fd      	b.n	800a47e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a482:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ac <vPortExitCritical+0x50>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3b01      	subs	r3, #1
 800a488:	4a08      	ldr	r2, [pc, #32]	@ (800a4ac <vPortExitCritical+0x50>)
 800a48a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a48c:	4b07      	ldr	r3, [pc, #28]	@ (800a4ac <vPortExitCritical+0x50>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d105      	bne.n	800a4a0 <vPortExitCritical+0x44>
 800a494:	2300      	movs	r3, #0
 800a496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	f383 8811 	msr	BASEPRI, r3
}
 800a49e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	2000000c 	.word	0x2000000c

0800a4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4b0:	f3ef 8009 	mrs	r0, PSP
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	4b15      	ldr	r3, [pc, #84]	@ (800a510 <pxCurrentTCBConst>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	f01e 0f10 	tst.w	lr, #16
 800a4c0:	bf08      	it	eq
 800a4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	6010      	str	r0, [r2, #0]
 800a4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a4d4:	f380 8811 	msr	BASEPRI, r0
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f7fe ffac 	bl	800943c <vTaskSwitchContext>
 800a4e4:	f04f 0000 	mov.w	r0, #0
 800a4e8:	f380 8811 	msr	BASEPRI, r0
 800a4ec:	bc09      	pop	{r0, r3}
 800a4ee:	6819      	ldr	r1, [r3, #0]
 800a4f0:	6808      	ldr	r0, [r1, #0]
 800a4f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f6:	f01e 0f10 	tst.w	lr, #16
 800a4fa:	bf08      	it	eq
 800a4fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a500:	f380 8809 	msr	PSP, r0
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w

0800a510 <pxCurrentTCBConst>:
 800a510:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a514:	bf00      	nop
 800a516:	bf00      	nop

0800a518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	607b      	str	r3, [r7, #4]
}
 800a530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a532:	f7fe fec9 	bl	80092c8 <xTaskIncrementTick>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a53c:	4b06      	ldr	r3, [pc, #24]	@ (800a558 <xPortSysTickHandler+0x40>)
 800a53e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	2300      	movs	r3, #0
 800a546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	f383 8811 	msr	BASEPRI, r3
}
 800a54e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a560:	4b0b      	ldr	r3, [pc, #44]	@ (800a590 <vPortSetupTimerInterrupt+0x34>)
 800a562:	2200      	movs	r2, #0
 800a564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a566:	4b0b      	ldr	r3, [pc, #44]	@ (800a594 <vPortSetupTimerInterrupt+0x38>)
 800a568:	2200      	movs	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <vPortSetupTimerInterrupt+0x3c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a0a      	ldr	r2, [pc, #40]	@ (800a59c <vPortSetupTimerInterrupt+0x40>)
 800a572:	fba2 2303 	umull	r2, r3, r2, r3
 800a576:	099b      	lsrs	r3, r3, #6
 800a578:	4a09      	ldr	r2, [pc, #36]	@ (800a5a0 <vPortSetupTimerInterrupt+0x44>)
 800a57a:	3b01      	subs	r3, #1
 800a57c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a57e:	4b04      	ldr	r3, [pc, #16]	@ (800a590 <vPortSetupTimerInterrupt+0x34>)
 800a580:	2207      	movs	r2, #7
 800a582:	601a      	str	r2, [r3, #0]
}
 800a584:	bf00      	nop
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	e000e010 	.word	0xe000e010
 800a594:	e000e018 	.word	0xe000e018
 800a598:	20000000 	.word	0x20000000
 800a59c:	10624dd3 	.word	0x10624dd3
 800a5a0:	e000e014 	.word	0xe000e014

0800a5a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a5b4 <vPortEnableVFP+0x10>
 800a5a8:	6801      	ldr	r1, [r0, #0]
 800a5aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5ae:	6001      	str	r1, [r0, #0]
 800a5b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5b2:	bf00      	nop
 800a5b4:	e000ed88 	.word	0xe000ed88

0800a5b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5be:	f3ef 8305 	mrs	r3, IPSR
 800a5c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b0f      	cmp	r3, #15
 800a5c8:	d915      	bls.n	800a5f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5ca:	4a18      	ldr	r2, [pc, #96]	@ (800a62c <vPortValidateInterruptPriority+0x74>)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5d4:	4b16      	ldr	r3, [pc, #88]	@ (800a630 <vPortValidateInterruptPriority+0x78>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	7afa      	ldrb	r2, [r7, #11]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d20b      	bcs.n	800a5f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	607b      	str	r3, [r7, #4]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a634 <vPortValidateInterruptPriority+0x7c>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a638 <vPortValidateInterruptPriority+0x80>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d90b      	bls.n	800a61e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	603b      	str	r3, [r7, #0]
}
 800a618:	bf00      	nop
 800a61a:	bf00      	nop
 800a61c:	e7fd      	b.n	800a61a <vPortValidateInterruptPriority+0x62>
	}
 800a61e:	bf00      	nop
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	e000e3f0 	.word	0xe000e3f0
 800a630:	200010e0 	.word	0x200010e0
 800a634:	e000ed0c 	.word	0xe000ed0c
 800a638:	200010e4 	.word	0x200010e4

0800a63c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08a      	sub	sp, #40	@ 0x28
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a644:	2300      	movs	r3, #0
 800a646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a648:	f7fe fd82 	bl	8009150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a64c:	4b5c      	ldr	r3, [pc, #368]	@ (800a7c0 <pvPortMalloc+0x184>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a654:	f000 f924 	bl	800a8a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a658:	4b5a      	ldr	r3, [pc, #360]	@ (800a7c4 <pvPortMalloc+0x188>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4013      	ands	r3, r2
 800a660:	2b00      	cmp	r3, #0
 800a662:	f040 8095 	bne.w	800a790 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01e      	beq.n	800a6aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a66c:	2208      	movs	r2, #8
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4413      	add	r3, r2
 800a672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d015      	beq.n	800a6aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f023 0307 	bic.w	r3, r3, #7
 800a684:	3308      	adds	r3, #8
 800a686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f003 0307 	and.w	r3, r3, #7
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00b      	beq.n	800a6aa <pvPortMalloc+0x6e>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	617b      	str	r3, [r7, #20]
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop
 800a6a8:	e7fd      	b.n	800a6a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d06f      	beq.n	800a790 <pvPortMalloc+0x154>
 800a6b0:	4b45      	ldr	r3, [pc, #276]	@ (800a7c8 <pvPortMalloc+0x18c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d86a      	bhi.n	800a790 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6ba:	4b44      	ldr	r3, [pc, #272]	@ (800a7cc <pvPortMalloc+0x190>)
 800a6bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6be:	4b43      	ldr	r3, [pc, #268]	@ (800a7cc <pvPortMalloc+0x190>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6c4:	e004      	b.n	800a6d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d903      	bls.n	800a6e2 <pvPortMalloc+0xa6>
 800a6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1f1      	bne.n	800a6c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6e2:	4b37      	ldr	r3, [pc, #220]	@ (800a7c0 <pvPortMalloc+0x184>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d051      	beq.n	800a790 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	4413      	add	r3, r2
 800a6f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	1ad2      	subs	r2, r2, r3
 800a706:	2308      	movs	r3, #8
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d920      	bls.n	800a750 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a70e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4413      	add	r3, r2
 800a714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	f003 0307 	and.w	r3, r3, #7
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <pvPortMalloc+0xfc>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	613b      	str	r3, [r7, #16]
}
 800a732:	bf00      	nop
 800a734:	bf00      	nop
 800a736:	e7fd      	b.n	800a734 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a74a:	69b8      	ldr	r0, [r7, #24]
 800a74c:	f000 f90a 	bl	800a964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a750:	4b1d      	ldr	r3, [pc, #116]	@ (800a7c8 <pvPortMalloc+0x18c>)
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7c8 <pvPortMalloc+0x18c>)
 800a75c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a75e:	4b1a      	ldr	r3, [pc, #104]	@ (800a7c8 <pvPortMalloc+0x18c>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d0 <pvPortMalloc+0x194>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	429a      	cmp	r2, r3
 800a768:	d203      	bcs.n	800a772 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a76a:	4b17      	ldr	r3, [pc, #92]	@ (800a7c8 <pvPortMalloc+0x18c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a18      	ldr	r2, [pc, #96]	@ (800a7d0 <pvPortMalloc+0x194>)
 800a770:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	4b13      	ldr	r3, [pc, #76]	@ (800a7c4 <pvPortMalloc+0x188>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	431a      	orrs	r2, r3
 800a77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a786:	4b13      	ldr	r3, [pc, #76]	@ (800a7d4 <pvPortMalloc+0x198>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3301      	adds	r3, #1
 800a78c:	4a11      	ldr	r2, [pc, #68]	@ (800a7d4 <pvPortMalloc+0x198>)
 800a78e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a790:	f7fe fcec 	bl	800916c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	f003 0307 	and.w	r3, r3, #7
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60fb      	str	r3, [r7, #12]
}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	e7fd      	b.n	800a7b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a7b6:	69fb      	ldr	r3, [r7, #28]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3728      	adds	r7, #40	@ 0x28
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	20004cf0 	.word	0x20004cf0
 800a7c4:	20004d04 	.word	0x20004d04
 800a7c8:	20004cf4 	.word	0x20004cf4
 800a7cc:	20004ce8 	.word	0x20004ce8
 800a7d0:	20004cf8 	.word	0x20004cf8
 800a7d4:	20004cfc 	.word	0x20004cfc

0800a7d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d04f      	beq.n	800a88a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7ea:	2308      	movs	r3, #8
 800a7ec:	425b      	negs	r3, r3
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	4b25      	ldr	r3, [pc, #148]	@ (800a894 <vPortFree+0xbc>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4013      	ands	r3, r2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10b      	bne.n	800a81e <vPortFree+0x46>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	60fb      	str	r3, [r7, #12]
}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	e7fd      	b.n	800a81a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00b      	beq.n	800a83e <vPortFree+0x66>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60bb      	str	r3, [r7, #8]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	4b14      	ldr	r3, [pc, #80]	@ (800a894 <vPortFree+0xbc>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4013      	ands	r3, r2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d01e      	beq.n	800a88a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d11a      	bne.n	800a88a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	685a      	ldr	r2, [r3, #4]
 800a858:	4b0e      	ldr	r3, [pc, #56]	@ (800a894 <vPortFree+0xbc>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	43db      	mvns	r3, r3
 800a85e:	401a      	ands	r2, r3
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a864:	f7fe fc74 	bl	8009150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	4b0a      	ldr	r3, [pc, #40]	@ (800a898 <vPortFree+0xc0>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4413      	add	r3, r2
 800a872:	4a09      	ldr	r2, [pc, #36]	@ (800a898 <vPortFree+0xc0>)
 800a874:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a876:	6938      	ldr	r0, [r7, #16]
 800a878:	f000 f874 	bl	800a964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a87c:	4b07      	ldr	r3, [pc, #28]	@ (800a89c <vPortFree+0xc4>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3301      	adds	r3, #1
 800a882:	4a06      	ldr	r2, [pc, #24]	@ (800a89c <vPortFree+0xc4>)
 800a884:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a886:	f7fe fc71 	bl	800916c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a88a:	bf00      	nop
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	20004d04 	.word	0x20004d04
 800a898:	20004cf4 	.word	0x20004cf4
 800a89c:	20004d00 	.word	0x20004d00

0800a8a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a8aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8ac:	4b27      	ldr	r3, [pc, #156]	@ (800a94c <prvHeapInit+0xac>)
 800a8ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00c      	beq.n	800a8d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3307      	adds	r3, #7
 800a8be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 0307 	bic.w	r3, r3, #7
 800a8c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a94c <prvHeapInit+0xac>)
 800a8d0:	4413      	add	r3, r2
 800a8d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a950 <prvHeapInit+0xb0>)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8de:	4b1c      	ldr	r3, [pc, #112]	@ (800a950 <prvHeapInit+0xb0>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8ec:	2208      	movs	r2, #8
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	1a9b      	subs	r3, r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0307 	bic.w	r3, r3, #7
 800a8fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4a15      	ldr	r2, [pc, #84]	@ (800a954 <prvHeapInit+0xb4>)
 800a900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a902:	4b14      	ldr	r3, [pc, #80]	@ (800a954 <prvHeapInit+0xb4>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2200      	movs	r2, #0
 800a908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a90a:	4b12      	ldr	r3, [pc, #72]	@ (800a954 <prvHeapInit+0xb4>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2200      	movs	r2, #0
 800a910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	1ad2      	subs	r2, r2, r3
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a920:	4b0c      	ldr	r3, [pc, #48]	@ (800a954 <prvHeapInit+0xb4>)
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	4a0a      	ldr	r2, [pc, #40]	@ (800a958 <prvHeapInit+0xb8>)
 800a92e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	4a09      	ldr	r2, [pc, #36]	@ (800a95c <prvHeapInit+0xbc>)
 800a936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a938:	4b09      	ldr	r3, [pc, #36]	@ (800a960 <prvHeapInit+0xc0>)
 800a93a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a93e:	601a      	str	r2, [r3, #0]
}
 800a940:	bf00      	nop
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	200010e8 	.word	0x200010e8
 800a950:	20004ce8 	.word	0x20004ce8
 800a954:	20004cf0 	.word	0x20004cf0
 800a958:	20004cf8 	.word	0x20004cf8
 800a95c:	20004cf4 	.word	0x20004cf4
 800a960:	20004d04 	.word	0x20004d04

0800a964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a96c:	4b28      	ldr	r3, [pc, #160]	@ (800aa10 <prvInsertBlockIntoFreeList+0xac>)
 800a96e:	60fb      	str	r3, [r7, #12]
 800a970:	e002      	b.n	800a978 <prvInsertBlockIntoFreeList+0x14>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d8f7      	bhi.n	800a972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	4413      	add	r3, r2
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	429a      	cmp	r2, r3
 800a992:	d108      	bne.n	800a9a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	441a      	add	r2, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	441a      	add	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d118      	bne.n	800a9ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	4b15      	ldr	r3, [pc, #84]	@ (800aa14 <prvInsertBlockIntoFreeList+0xb0>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d00d      	beq.n	800a9e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	441a      	add	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	e008      	b.n	800a9f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9e2:	4b0c      	ldr	r3, [pc, #48]	@ (800aa14 <prvInsertBlockIntoFreeList+0xb0>)
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	e003      	b.n	800a9f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d002      	beq.n	800aa02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	20004ce8 	.word	0x20004ce8
 800aa14:	20004cf0 	.word	0x20004cf0

0800aa18 <rand>:
 800aa18:	4b16      	ldr	r3, [pc, #88]	@ (800aa74 <rand+0x5c>)
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	681c      	ldr	r4, [r3, #0]
 800aa1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aa20:	b9b3      	cbnz	r3, 800aa50 <rand+0x38>
 800aa22:	2018      	movs	r0, #24
 800aa24:	f000 fa2e 	bl	800ae84 <malloc>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	6320      	str	r0, [r4, #48]	@ 0x30
 800aa2c:	b920      	cbnz	r0, 800aa38 <rand+0x20>
 800aa2e:	4b12      	ldr	r3, [pc, #72]	@ (800aa78 <rand+0x60>)
 800aa30:	4812      	ldr	r0, [pc, #72]	@ (800aa7c <rand+0x64>)
 800aa32:	2152      	movs	r1, #82	@ 0x52
 800aa34:	f000 f9be 	bl	800adb4 <__assert_func>
 800aa38:	4911      	ldr	r1, [pc, #68]	@ (800aa80 <rand+0x68>)
 800aa3a:	4b12      	ldr	r3, [pc, #72]	@ (800aa84 <rand+0x6c>)
 800aa3c:	e9c0 1300 	strd	r1, r3, [r0]
 800aa40:	4b11      	ldr	r3, [pc, #68]	@ (800aa88 <rand+0x70>)
 800aa42:	6083      	str	r3, [r0, #8]
 800aa44:	230b      	movs	r3, #11
 800aa46:	8183      	strh	r3, [r0, #12]
 800aa48:	2100      	movs	r1, #0
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aa50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa52:	480e      	ldr	r0, [pc, #56]	@ (800aa8c <rand+0x74>)
 800aa54:	690b      	ldr	r3, [r1, #16]
 800aa56:	694c      	ldr	r4, [r1, #20]
 800aa58:	4a0d      	ldr	r2, [pc, #52]	@ (800aa90 <rand+0x78>)
 800aa5a:	4358      	muls	r0, r3
 800aa5c:	fb02 0004 	mla	r0, r2, r4, r0
 800aa60:	fba3 3202 	umull	r3, r2, r3, r2
 800aa64:	3301      	adds	r3, #1
 800aa66:	eb40 0002 	adc.w	r0, r0, r2
 800aa6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800aa6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800aa72:	bd10      	pop	{r4, pc}
 800aa74:	2000001c 	.word	0x2000001c
 800aa78:	0800bab8 	.word	0x0800bab8
 800aa7c:	0800bacf 	.word	0x0800bacf
 800aa80:	abcd330e 	.word	0xabcd330e
 800aa84:	e66d1234 	.word	0xe66d1234
 800aa88:	0005deec 	.word	0x0005deec
 800aa8c:	5851f42d 	.word	0x5851f42d
 800aa90:	4c957f2d 	.word	0x4c957f2d

0800aa94 <std>:
 800aa94:	2300      	movs	r3, #0
 800aa96:	b510      	push	{r4, lr}
 800aa98:	4604      	mov	r4, r0
 800aa9a:	e9c0 3300 	strd	r3, r3, [r0]
 800aa9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaa2:	6083      	str	r3, [r0, #8]
 800aaa4:	8181      	strh	r1, [r0, #12]
 800aaa6:	6643      	str	r3, [r0, #100]	@ 0x64
 800aaa8:	81c2      	strh	r2, [r0, #14]
 800aaaa:	6183      	str	r3, [r0, #24]
 800aaac:	4619      	mov	r1, r3
 800aaae:	2208      	movs	r2, #8
 800aab0:	305c      	adds	r0, #92	@ 0x5c
 800aab2:	f000 f8f4 	bl	800ac9e <memset>
 800aab6:	4b0d      	ldr	r3, [pc, #52]	@ (800aaec <std+0x58>)
 800aab8:	6263      	str	r3, [r4, #36]	@ 0x24
 800aaba:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf0 <std+0x5c>)
 800aabc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aabe:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf4 <std+0x60>)
 800aac0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aac2:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf8 <std+0x64>)
 800aac4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aac6:	4b0d      	ldr	r3, [pc, #52]	@ (800aafc <std+0x68>)
 800aac8:	6224      	str	r4, [r4, #32]
 800aaca:	429c      	cmp	r4, r3
 800aacc:	d006      	beq.n	800aadc <std+0x48>
 800aace:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aad2:	4294      	cmp	r4, r2
 800aad4:	d002      	beq.n	800aadc <std+0x48>
 800aad6:	33d0      	adds	r3, #208	@ 0xd0
 800aad8:	429c      	cmp	r4, r3
 800aada:	d105      	bne.n	800aae8 <std+0x54>
 800aadc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aae4:	f000 b954 	b.w	800ad90 <__retarget_lock_init_recursive>
 800aae8:	bd10      	pop	{r4, pc}
 800aaea:	bf00      	nop
 800aaec:	0800ac19 	.word	0x0800ac19
 800aaf0:	0800ac3b 	.word	0x0800ac3b
 800aaf4:	0800ac73 	.word	0x0800ac73
 800aaf8:	0800ac97 	.word	0x0800ac97
 800aafc:	20004d08 	.word	0x20004d08

0800ab00 <stdio_exit_handler>:
 800ab00:	4a02      	ldr	r2, [pc, #8]	@ (800ab0c <stdio_exit_handler+0xc>)
 800ab02:	4903      	ldr	r1, [pc, #12]	@ (800ab10 <stdio_exit_handler+0x10>)
 800ab04:	4803      	ldr	r0, [pc, #12]	@ (800ab14 <stdio_exit_handler+0x14>)
 800ab06:	f000 b869 	b.w	800abdc <_fwalk_sglue>
 800ab0a:	bf00      	nop
 800ab0c:	20000010 	.word	0x20000010
 800ab10:	0800b0f9 	.word	0x0800b0f9
 800ab14:	20000020 	.word	0x20000020

0800ab18 <cleanup_stdio>:
 800ab18:	6841      	ldr	r1, [r0, #4]
 800ab1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab4c <cleanup_stdio+0x34>)
 800ab1c:	4299      	cmp	r1, r3
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	4604      	mov	r4, r0
 800ab22:	d001      	beq.n	800ab28 <cleanup_stdio+0x10>
 800ab24:	f000 fae8 	bl	800b0f8 <_fflush_r>
 800ab28:	68a1      	ldr	r1, [r4, #8]
 800ab2a:	4b09      	ldr	r3, [pc, #36]	@ (800ab50 <cleanup_stdio+0x38>)
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	d002      	beq.n	800ab36 <cleanup_stdio+0x1e>
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 fae1 	bl	800b0f8 <_fflush_r>
 800ab36:	68e1      	ldr	r1, [r4, #12]
 800ab38:	4b06      	ldr	r3, [pc, #24]	@ (800ab54 <cleanup_stdio+0x3c>)
 800ab3a:	4299      	cmp	r1, r3
 800ab3c:	d004      	beq.n	800ab48 <cleanup_stdio+0x30>
 800ab3e:	4620      	mov	r0, r4
 800ab40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab44:	f000 bad8 	b.w	800b0f8 <_fflush_r>
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20004d08 	.word	0x20004d08
 800ab50:	20004d70 	.word	0x20004d70
 800ab54:	20004dd8 	.word	0x20004dd8

0800ab58 <global_stdio_init.part.0>:
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab88 <global_stdio_init.part.0+0x30>)
 800ab5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ab8c <global_stdio_init.part.0+0x34>)
 800ab5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ab90 <global_stdio_init.part.0+0x38>)
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	4620      	mov	r0, r4
 800ab64:	2200      	movs	r2, #0
 800ab66:	2104      	movs	r1, #4
 800ab68:	f7ff ff94 	bl	800aa94 <std>
 800ab6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab70:	2201      	movs	r2, #1
 800ab72:	2109      	movs	r1, #9
 800ab74:	f7ff ff8e 	bl	800aa94 <std>
 800ab78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab82:	2112      	movs	r1, #18
 800ab84:	f7ff bf86 	b.w	800aa94 <std>
 800ab88:	20004e40 	.word	0x20004e40
 800ab8c:	20004d08 	.word	0x20004d08
 800ab90:	0800ab01 	.word	0x0800ab01

0800ab94 <__sfp_lock_acquire>:
 800ab94:	4801      	ldr	r0, [pc, #4]	@ (800ab9c <__sfp_lock_acquire+0x8>)
 800ab96:	f000 b8fc 	b.w	800ad92 <__retarget_lock_acquire_recursive>
 800ab9a:	bf00      	nop
 800ab9c:	20004e49 	.word	0x20004e49

0800aba0 <__sfp_lock_release>:
 800aba0:	4801      	ldr	r0, [pc, #4]	@ (800aba8 <__sfp_lock_release+0x8>)
 800aba2:	f000 b8f7 	b.w	800ad94 <__retarget_lock_release_recursive>
 800aba6:	bf00      	nop
 800aba8:	20004e49 	.word	0x20004e49

0800abac <__sinit>:
 800abac:	b510      	push	{r4, lr}
 800abae:	4604      	mov	r4, r0
 800abb0:	f7ff fff0 	bl	800ab94 <__sfp_lock_acquire>
 800abb4:	6a23      	ldr	r3, [r4, #32]
 800abb6:	b11b      	cbz	r3, 800abc0 <__sinit+0x14>
 800abb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abbc:	f7ff bff0 	b.w	800aba0 <__sfp_lock_release>
 800abc0:	4b04      	ldr	r3, [pc, #16]	@ (800abd4 <__sinit+0x28>)
 800abc2:	6223      	str	r3, [r4, #32]
 800abc4:	4b04      	ldr	r3, [pc, #16]	@ (800abd8 <__sinit+0x2c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1f5      	bne.n	800abb8 <__sinit+0xc>
 800abcc:	f7ff ffc4 	bl	800ab58 <global_stdio_init.part.0>
 800abd0:	e7f2      	b.n	800abb8 <__sinit+0xc>
 800abd2:	bf00      	nop
 800abd4:	0800ab19 	.word	0x0800ab19
 800abd8:	20004e40 	.word	0x20004e40

0800abdc <_fwalk_sglue>:
 800abdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe0:	4607      	mov	r7, r0
 800abe2:	4688      	mov	r8, r1
 800abe4:	4614      	mov	r4, r2
 800abe6:	2600      	movs	r6, #0
 800abe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abec:	f1b9 0901 	subs.w	r9, r9, #1
 800abf0:	d505      	bpl.n	800abfe <_fwalk_sglue+0x22>
 800abf2:	6824      	ldr	r4, [r4, #0]
 800abf4:	2c00      	cmp	r4, #0
 800abf6:	d1f7      	bne.n	800abe8 <_fwalk_sglue+0xc>
 800abf8:	4630      	mov	r0, r6
 800abfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d907      	bls.n	800ac14 <_fwalk_sglue+0x38>
 800ac04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	d003      	beq.n	800ac14 <_fwalk_sglue+0x38>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4638      	mov	r0, r7
 800ac10:	47c0      	blx	r8
 800ac12:	4306      	orrs	r6, r0
 800ac14:	3568      	adds	r5, #104	@ 0x68
 800ac16:	e7e9      	b.n	800abec <_fwalk_sglue+0x10>

0800ac18 <__sread>:
 800ac18:	b510      	push	{r4, lr}
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac20:	f000 f868 	bl	800acf4 <_read_r>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	bfab      	itete	ge
 800ac28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac2c:	181b      	addge	r3, r3, r0
 800ac2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac32:	bfac      	ite	ge
 800ac34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac36:	81a3      	strhlt	r3, [r4, #12]
 800ac38:	bd10      	pop	{r4, pc}

0800ac3a <__swrite>:
 800ac3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3e:	461f      	mov	r7, r3
 800ac40:	898b      	ldrh	r3, [r1, #12]
 800ac42:	05db      	lsls	r3, r3, #23
 800ac44:	4605      	mov	r5, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	4616      	mov	r6, r2
 800ac4a:	d505      	bpl.n	800ac58 <__swrite+0x1e>
 800ac4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac50:	2302      	movs	r3, #2
 800ac52:	2200      	movs	r2, #0
 800ac54:	f000 f83c 	bl	800acd0 <_lseek_r>
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	4632      	mov	r2, r6
 800ac66:	463b      	mov	r3, r7
 800ac68:	4628      	mov	r0, r5
 800ac6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6e:	f000 b853 	b.w	800ad18 <_write_r>

0800ac72 <__sseek>:
 800ac72:	b510      	push	{r4, lr}
 800ac74:	460c      	mov	r4, r1
 800ac76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7a:	f000 f829 	bl	800acd0 <_lseek_r>
 800ac7e:	1c43      	adds	r3, r0, #1
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	bf15      	itete	ne
 800ac84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac8e:	81a3      	strheq	r3, [r4, #12]
 800ac90:	bf18      	it	ne
 800ac92:	81a3      	strhne	r3, [r4, #12]
 800ac94:	bd10      	pop	{r4, pc}

0800ac96 <__sclose>:
 800ac96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9a:	f000 b809 	b.w	800acb0 <_close_r>

0800ac9e <memset>:
 800ac9e:	4402      	add	r2, r0
 800aca0:	4603      	mov	r3, r0
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d100      	bne.n	800aca8 <memset+0xa>
 800aca6:	4770      	bx	lr
 800aca8:	f803 1b01 	strb.w	r1, [r3], #1
 800acac:	e7f9      	b.n	800aca2 <memset+0x4>
	...

0800acb0 <_close_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d06      	ldr	r5, [pc, #24]	@ (800accc <_close_r+0x1c>)
 800acb4:	2300      	movs	r3, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	4608      	mov	r0, r1
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	f7f7 f998 	bl	8001ff0 <_close>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d102      	bne.n	800acca <_close_r+0x1a>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	b103      	cbz	r3, 800acca <_close_r+0x1a>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	20004e44 	.word	0x20004e44

0800acd0 <_lseek_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d07      	ldr	r5, [pc, #28]	@ (800acf0 <_lseek_r+0x20>)
 800acd4:	4604      	mov	r4, r0
 800acd6:	4608      	mov	r0, r1
 800acd8:	4611      	mov	r1, r2
 800acda:	2200      	movs	r2, #0
 800acdc:	602a      	str	r2, [r5, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	f7f7 f9ad 	bl	800203e <_lseek>
 800ace4:	1c43      	adds	r3, r0, #1
 800ace6:	d102      	bne.n	800acee <_lseek_r+0x1e>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	b103      	cbz	r3, 800acee <_lseek_r+0x1e>
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	bd38      	pop	{r3, r4, r5, pc}
 800acf0:	20004e44 	.word	0x20004e44

0800acf4 <_read_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d07      	ldr	r5, [pc, #28]	@ (800ad14 <_read_r+0x20>)
 800acf8:	4604      	mov	r4, r0
 800acfa:	4608      	mov	r0, r1
 800acfc:	4611      	mov	r1, r2
 800acfe:	2200      	movs	r2, #0
 800ad00:	602a      	str	r2, [r5, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	f7f7 f93b 	bl	8001f7e <_read>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_read_r+0x1e>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_read_r+0x1e>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	20004e44 	.word	0x20004e44

0800ad18 <_write_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	@ (800ad38 <_write_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f7 f946 	bl	8001fb8 <_write>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_write_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_write_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20004e44 	.word	0x20004e44

0800ad3c <__errno>:
 800ad3c:	4b01      	ldr	r3, [pc, #4]	@ (800ad44 <__errno+0x8>)
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	2000001c 	.word	0x2000001c

0800ad48 <__libc_init_array>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	4d0d      	ldr	r5, [pc, #52]	@ (800ad80 <__libc_init_array+0x38>)
 800ad4c:	4c0d      	ldr	r4, [pc, #52]	@ (800ad84 <__libc_init_array+0x3c>)
 800ad4e:	1b64      	subs	r4, r4, r5
 800ad50:	10a4      	asrs	r4, r4, #2
 800ad52:	2600      	movs	r6, #0
 800ad54:	42a6      	cmp	r6, r4
 800ad56:	d109      	bne.n	800ad6c <__libc_init_array+0x24>
 800ad58:	4d0b      	ldr	r5, [pc, #44]	@ (800ad88 <__libc_init_array+0x40>)
 800ad5a:	4c0c      	ldr	r4, [pc, #48]	@ (800ad8c <__libc_init_array+0x44>)
 800ad5c:	f000 fe46 	bl	800b9ec <_init>
 800ad60:	1b64      	subs	r4, r4, r5
 800ad62:	10a4      	asrs	r4, r4, #2
 800ad64:	2600      	movs	r6, #0
 800ad66:	42a6      	cmp	r6, r4
 800ad68:	d105      	bne.n	800ad76 <__libc_init_array+0x2e>
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad70:	4798      	blx	r3
 800ad72:	3601      	adds	r6, #1
 800ad74:	e7ee      	b.n	800ad54 <__libc_init_array+0xc>
 800ad76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7a:	4798      	blx	r3
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	e7f2      	b.n	800ad66 <__libc_init_array+0x1e>
 800ad80:	0800bba0 	.word	0x0800bba0
 800ad84:	0800bba0 	.word	0x0800bba0
 800ad88:	0800bba0 	.word	0x0800bba0
 800ad8c:	0800bba4 	.word	0x0800bba4

0800ad90 <__retarget_lock_init_recursive>:
 800ad90:	4770      	bx	lr

0800ad92 <__retarget_lock_acquire_recursive>:
 800ad92:	4770      	bx	lr

0800ad94 <__retarget_lock_release_recursive>:
 800ad94:	4770      	bx	lr

0800ad96 <memcpy>:
 800ad96:	440a      	add	r2, r1
 800ad98:	4291      	cmp	r1, r2
 800ad9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad9e:	d100      	bne.n	800ada2 <memcpy+0xc>
 800ada0:	4770      	bx	lr
 800ada2:	b510      	push	{r4, lr}
 800ada4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ada8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adac:	4291      	cmp	r1, r2
 800adae:	d1f9      	bne.n	800ada4 <memcpy+0xe>
 800adb0:	bd10      	pop	{r4, pc}
	...

0800adb4 <__assert_func>:
 800adb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adb6:	4614      	mov	r4, r2
 800adb8:	461a      	mov	r2, r3
 800adba:	4b09      	ldr	r3, [pc, #36]	@ (800ade0 <__assert_func+0x2c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4605      	mov	r5, r0
 800adc0:	68d8      	ldr	r0, [r3, #12]
 800adc2:	b14c      	cbz	r4, 800add8 <__assert_func+0x24>
 800adc4:	4b07      	ldr	r3, [pc, #28]	@ (800ade4 <__assert_func+0x30>)
 800adc6:	9100      	str	r1, [sp, #0]
 800adc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adcc:	4906      	ldr	r1, [pc, #24]	@ (800ade8 <__assert_func+0x34>)
 800adce:	462b      	mov	r3, r5
 800add0:	f000 f9ba 	bl	800b148 <fiprintf>
 800add4:	f000 f9da 	bl	800b18c <abort>
 800add8:	4b04      	ldr	r3, [pc, #16]	@ (800adec <__assert_func+0x38>)
 800adda:	461c      	mov	r4, r3
 800addc:	e7f3      	b.n	800adc6 <__assert_func+0x12>
 800adde:	bf00      	nop
 800ade0:	2000001c 	.word	0x2000001c
 800ade4:	0800bb27 	.word	0x0800bb27
 800ade8:	0800bb34 	.word	0x0800bb34
 800adec:	0800bb62 	.word	0x0800bb62

0800adf0 <_free_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4605      	mov	r5, r0
 800adf4:	2900      	cmp	r1, #0
 800adf6:	d041      	beq.n	800ae7c <_free_r+0x8c>
 800adf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfc:	1f0c      	subs	r4, r1, #4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bfb8      	it	lt
 800ae02:	18e4      	addlt	r4, r4, r3
 800ae04:	f000 f8e8 	bl	800afd8 <__malloc_lock>
 800ae08:	4a1d      	ldr	r2, [pc, #116]	@ (800ae80 <_free_r+0x90>)
 800ae0a:	6813      	ldr	r3, [r2, #0]
 800ae0c:	b933      	cbnz	r3, 800ae1c <_free_r+0x2c>
 800ae0e:	6063      	str	r3, [r4, #4]
 800ae10:	6014      	str	r4, [r2, #0]
 800ae12:	4628      	mov	r0, r5
 800ae14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae18:	f000 b8e4 	b.w	800afe4 <__malloc_unlock>
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	d908      	bls.n	800ae32 <_free_r+0x42>
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	1821      	adds	r1, r4, r0
 800ae24:	428b      	cmp	r3, r1
 800ae26:	bf01      	itttt	eq
 800ae28:	6819      	ldreq	r1, [r3, #0]
 800ae2a:	685b      	ldreq	r3, [r3, #4]
 800ae2c:	1809      	addeq	r1, r1, r0
 800ae2e:	6021      	streq	r1, [r4, #0]
 800ae30:	e7ed      	b.n	800ae0e <_free_r+0x1e>
 800ae32:	461a      	mov	r2, r3
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	b10b      	cbz	r3, 800ae3c <_free_r+0x4c>
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	d9fa      	bls.n	800ae32 <_free_r+0x42>
 800ae3c:	6811      	ldr	r1, [r2, #0]
 800ae3e:	1850      	adds	r0, r2, r1
 800ae40:	42a0      	cmp	r0, r4
 800ae42:	d10b      	bne.n	800ae5c <_free_r+0x6c>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	4401      	add	r1, r0
 800ae48:	1850      	adds	r0, r2, r1
 800ae4a:	4283      	cmp	r3, r0
 800ae4c:	6011      	str	r1, [r2, #0]
 800ae4e:	d1e0      	bne.n	800ae12 <_free_r+0x22>
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	6053      	str	r3, [r2, #4]
 800ae56:	4408      	add	r0, r1
 800ae58:	6010      	str	r0, [r2, #0]
 800ae5a:	e7da      	b.n	800ae12 <_free_r+0x22>
 800ae5c:	d902      	bls.n	800ae64 <_free_r+0x74>
 800ae5e:	230c      	movs	r3, #12
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	e7d6      	b.n	800ae12 <_free_r+0x22>
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	1821      	adds	r1, r4, r0
 800ae68:	428b      	cmp	r3, r1
 800ae6a:	bf04      	itt	eq
 800ae6c:	6819      	ldreq	r1, [r3, #0]
 800ae6e:	685b      	ldreq	r3, [r3, #4]
 800ae70:	6063      	str	r3, [r4, #4]
 800ae72:	bf04      	itt	eq
 800ae74:	1809      	addeq	r1, r1, r0
 800ae76:	6021      	streq	r1, [r4, #0]
 800ae78:	6054      	str	r4, [r2, #4]
 800ae7a:	e7ca      	b.n	800ae12 <_free_r+0x22>
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
 800ae7e:	bf00      	nop
 800ae80:	20004e50 	.word	0x20004e50

0800ae84 <malloc>:
 800ae84:	4b02      	ldr	r3, [pc, #8]	@ (800ae90 <malloc+0xc>)
 800ae86:	4601      	mov	r1, r0
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	f000 b825 	b.w	800aed8 <_malloc_r>
 800ae8e:	bf00      	nop
 800ae90:	2000001c 	.word	0x2000001c

0800ae94 <sbrk_aligned>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	4e0f      	ldr	r6, [pc, #60]	@ (800aed4 <sbrk_aligned+0x40>)
 800ae98:	460c      	mov	r4, r1
 800ae9a:	6831      	ldr	r1, [r6, #0]
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	b911      	cbnz	r1, 800aea6 <sbrk_aligned+0x12>
 800aea0:	f000 f964 	bl	800b16c <_sbrk_r>
 800aea4:	6030      	str	r0, [r6, #0]
 800aea6:	4621      	mov	r1, r4
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f000 f95f 	bl	800b16c <_sbrk_r>
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	d103      	bne.n	800aeba <sbrk_aligned+0x26>
 800aeb2:	f04f 34ff 	mov.w	r4, #4294967295
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
 800aeba:	1cc4      	adds	r4, r0, #3
 800aebc:	f024 0403 	bic.w	r4, r4, #3
 800aec0:	42a0      	cmp	r0, r4
 800aec2:	d0f8      	beq.n	800aeb6 <sbrk_aligned+0x22>
 800aec4:	1a21      	subs	r1, r4, r0
 800aec6:	4628      	mov	r0, r5
 800aec8:	f000 f950 	bl	800b16c <_sbrk_r>
 800aecc:	3001      	adds	r0, #1
 800aece:	d1f2      	bne.n	800aeb6 <sbrk_aligned+0x22>
 800aed0:	e7ef      	b.n	800aeb2 <sbrk_aligned+0x1e>
 800aed2:	bf00      	nop
 800aed4:	20004e4c 	.word	0x20004e4c

0800aed8 <_malloc_r>:
 800aed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aedc:	1ccd      	adds	r5, r1, #3
 800aede:	f025 0503 	bic.w	r5, r5, #3
 800aee2:	3508      	adds	r5, #8
 800aee4:	2d0c      	cmp	r5, #12
 800aee6:	bf38      	it	cc
 800aee8:	250c      	movcc	r5, #12
 800aeea:	2d00      	cmp	r5, #0
 800aeec:	4606      	mov	r6, r0
 800aeee:	db01      	blt.n	800aef4 <_malloc_r+0x1c>
 800aef0:	42a9      	cmp	r1, r5
 800aef2:	d904      	bls.n	800aefe <_malloc_r+0x26>
 800aef4:	230c      	movs	r3, #12
 800aef6:	6033      	str	r3, [r6, #0]
 800aef8:	2000      	movs	r0, #0
 800aefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afd4 <_malloc_r+0xfc>
 800af02:	f000 f869 	bl	800afd8 <__malloc_lock>
 800af06:	f8d8 3000 	ldr.w	r3, [r8]
 800af0a:	461c      	mov	r4, r3
 800af0c:	bb44      	cbnz	r4, 800af60 <_malloc_r+0x88>
 800af0e:	4629      	mov	r1, r5
 800af10:	4630      	mov	r0, r6
 800af12:	f7ff ffbf 	bl	800ae94 <sbrk_aligned>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	4604      	mov	r4, r0
 800af1a:	d158      	bne.n	800afce <_malloc_r+0xf6>
 800af1c:	f8d8 4000 	ldr.w	r4, [r8]
 800af20:	4627      	mov	r7, r4
 800af22:	2f00      	cmp	r7, #0
 800af24:	d143      	bne.n	800afae <_malloc_r+0xd6>
 800af26:	2c00      	cmp	r4, #0
 800af28:	d04b      	beq.n	800afc2 <_malloc_r+0xea>
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	4639      	mov	r1, r7
 800af2e:	4630      	mov	r0, r6
 800af30:	eb04 0903 	add.w	r9, r4, r3
 800af34:	f000 f91a 	bl	800b16c <_sbrk_r>
 800af38:	4581      	cmp	r9, r0
 800af3a:	d142      	bne.n	800afc2 <_malloc_r+0xea>
 800af3c:	6821      	ldr	r1, [r4, #0]
 800af3e:	1a6d      	subs	r5, r5, r1
 800af40:	4629      	mov	r1, r5
 800af42:	4630      	mov	r0, r6
 800af44:	f7ff ffa6 	bl	800ae94 <sbrk_aligned>
 800af48:	3001      	adds	r0, #1
 800af4a:	d03a      	beq.n	800afc2 <_malloc_r+0xea>
 800af4c:	6823      	ldr	r3, [r4, #0]
 800af4e:	442b      	add	r3, r5
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	f8d8 3000 	ldr.w	r3, [r8]
 800af56:	685a      	ldr	r2, [r3, #4]
 800af58:	bb62      	cbnz	r2, 800afb4 <_malloc_r+0xdc>
 800af5a:	f8c8 7000 	str.w	r7, [r8]
 800af5e:	e00f      	b.n	800af80 <_malloc_r+0xa8>
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	1b52      	subs	r2, r2, r5
 800af64:	d420      	bmi.n	800afa8 <_malloc_r+0xd0>
 800af66:	2a0b      	cmp	r2, #11
 800af68:	d917      	bls.n	800af9a <_malloc_r+0xc2>
 800af6a:	1961      	adds	r1, r4, r5
 800af6c:	42a3      	cmp	r3, r4
 800af6e:	6025      	str	r5, [r4, #0]
 800af70:	bf18      	it	ne
 800af72:	6059      	strne	r1, [r3, #4]
 800af74:	6863      	ldr	r3, [r4, #4]
 800af76:	bf08      	it	eq
 800af78:	f8c8 1000 	streq.w	r1, [r8]
 800af7c:	5162      	str	r2, [r4, r5]
 800af7e:	604b      	str	r3, [r1, #4]
 800af80:	4630      	mov	r0, r6
 800af82:	f000 f82f 	bl	800afe4 <__malloc_unlock>
 800af86:	f104 000b 	add.w	r0, r4, #11
 800af8a:	1d23      	adds	r3, r4, #4
 800af8c:	f020 0007 	bic.w	r0, r0, #7
 800af90:	1ac2      	subs	r2, r0, r3
 800af92:	bf1c      	itt	ne
 800af94:	1a1b      	subne	r3, r3, r0
 800af96:	50a3      	strne	r3, [r4, r2]
 800af98:	e7af      	b.n	800aefa <_malloc_r+0x22>
 800af9a:	6862      	ldr	r2, [r4, #4]
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	bf0c      	ite	eq
 800afa0:	f8c8 2000 	streq.w	r2, [r8]
 800afa4:	605a      	strne	r2, [r3, #4]
 800afa6:	e7eb      	b.n	800af80 <_malloc_r+0xa8>
 800afa8:	4623      	mov	r3, r4
 800afaa:	6864      	ldr	r4, [r4, #4]
 800afac:	e7ae      	b.n	800af0c <_malloc_r+0x34>
 800afae:	463c      	mov	r4, r7
 800afb0:	687f      	ldr	r7, [r7, #4]
 800afb2:	e7b6      	b.n	800af22 <_malloc_r+0x4a>
 800afb4:	461a      	mov	r2, r3
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	42a3      	cmp	r3, r4
 800afba:	d1fb      	bne.n	800afb4 <_malloc_r+0xdc>
 800afbc:	2300      	movs	r3, #0
 800afbe:	6053      	str	r3, [r2, #4]
 800afc0:	e7de      	b.n	800af80 <_malloc_r+0xa8>
 800afc2:	230c      	movs	r3, #12
 800afc4:	6033      	str	r3, [r6, #0]
 800afc6:	4630      	mov	r0, r6
 800afc8:	f000 f80c 	bl	800afe4 <__malloc_unlock>
 800afcc:	e794      	b.n	800aef8 <_malloc_r+0x20>
 800afce:	6005      	str	r5, [r0, #0]
 800afd0:	e7d6      	b.n	800af80 <_malloc_r+0xa8>
 800afd2:	bf00      	nop
 800afd4:	20004e50 	.word	0x20004e50

0800afd8 <__malloc_lock>:
 800afd8:	4801      	ldr	r0, [pc, #4]	@ (800afe0 <__malloc_lock+0x8>)
 800afda:	f7ff beda 	b.w	800ad92 <__retarget_lock_acquire_recursive>
 800afde:	bf00      	nop
 800afe0:	20004e48 	.word	0x20004e48

0800afe4 <__malloc_unlock>:
 800afe4:	4801      	ldr	r0, [pc, #4]	@ (800afec <__malloc_unlock+0x8>)
 800afe6:	f7ff bed5 	b.w	800ad94 <__retarget_lock_release_recursive>
 800afea:	bf00      	nop
 800afec:	20004e48 	.word	0x20004e48

0800aff0 <__sflush_r>:
 800aff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	0716      	lsls	r6, r2, #28
 800affa:	4605      	mov	r5, r0
 800affc:	460c      	mov	r4, r1
 800affe:	d454      	bmi.n	800b0aa <__sflush_r+0xba>
 800b000:	684b      	ldr	r3, [r1, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	dc02      	bgt.n	800b00c <__sflush_r+0x1c>
 800b006:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	dd48      	ble.n	800b09e <__sflush_r+0xae>
 800b00c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b00e:	2e00      	cmp	r6, #0
 800b010:	d045      	beq.n	800b09e <__sflush_r+0xae>
 800b012:	2300      	movs	r3, #0
 800b014:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b018:	682f      	ldr	r7, [r5, #0]
 800b01a:	6a21      	ldr	r1, [r4, #32]
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	d030      	beq.n	800b082 <__sflush_r+0x92>
 800b020:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	0759      	lsls	r1, r3, #29
 800b026:	d505      	bpl.n	800b034 <__sflush_r+0x44>
 800b028:	6863      	ldr	r3, [r4, #4]
 800b02a:	1ad2      	subs	r2, r2, r3
 800b02c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b02e:	b10b      	cbz	r3, 800b034 <__sflush_r+0x44>
 800b030:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b032:	1ad2      	subs	r2, r2, r3
 800b034:	2300      	movs	r3, #0
 800b036:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b038:	6a21      	ldr	r1, [r4, #32]
 800b03a:	4628      	mov	r0, r5
 800b03c:	47b0      	blx	r6
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	d106      	bne.n	800b052 <__sflush_r+0x62>
 800b044:	6829      	ldr	r1, [r5, #0]
 800b046:	291d      	cmp	r1, #29
 800b048:	d82b      	bhi.n	800b0a2 <__sflush_r+0xb2>
 800b04a:	4a2a      	ldr	r2, [pc, #168]	@ (800b0f4 <__sflush_r+0x104>)
 800b04c:	40ca      	lsrs	r2, r1
 800b04e:	07d6      	lsls	r6, r2, #31
 800b050:	d527      	bpl.n	800b0a2 <__sflush_r+0xb2>
 800b052:	2200      	movs	r2, #0
 800b054:	6062      	str	r2, [r4, #4]
 800b056:	04d9      	lsls	r1, r3, #19
 800b058:	6922      	ldr	r2, [r4, #16]
 800b05a:	6022      	str	r2, [r4, #0]
 800b05c:	d504      	bpl.n	800b068 <__sflush_r+0x78>
 800b05e:	1c42      	adds	r2, r0, #1
 800b060:	d101      	bne.n	800b066 <__sflush_r+0x76>
 800b062:	682b      	ldr	r3, [r5, #0]
 800b064:	b903      	cbnz	r3, 800b068 <__sflush_r+0x78>
 800b066:	6560      	str	r0, [r4, #84]	@ 0x54
 800b068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b06a:	602f      	str	r7, [r5, #0]
 800b06c:	b1b9      	cbz	r1, 800b09e <__sflush_r+0xae>
 800b06e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b072:	4299      	cmp	r1, r3
 800b074:	d002      	beq.n	800b07c <__sflush_r+0x8c>
 800b076:	4628      	mov	r0, r5
 800b078:	f7ff feba 	bl	800adf0 <_free_r>
 800b07c:	2300      	movs	r3, #0
 800b07e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b080:	e00d      	b.n	800b09e <__sflush_r+0xae>
 800b082:	2301      	movs	r3, #1
 800b084:	4628      	mov	r0, r5
 800b086:	47b0      	blx	r6
 800b088:	4602      	mov	r2, r0
 800b08a:	1c50      	adds	r0, r2, #1
 800b08c:	d1c9      	bne.n	800b022 <__sflush_r+0x32>
 800b08e:	682b      	ldr	r3, [r5, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d0c6      	beq.n	800b022 <__sflush_r+0x32>
 800b094:	2b1d      	cmp	r3, #29
 800b096:	d001      	beq.n	800b09c <__sflush_r+0xac>
 800b098:	2b16      	cmp	r3, #22
 800b09a:	d11e      	bne.n	800b0da <__sflush_r+0xea>
 800b09c:	602f      	str	r7, [r5, #0]
 800b09e:	2000      	movs	r0, #0
 800b0a0:	e022      	b.n	800b0e8 <__sflush_r+0xf8>
 800b0a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0a6:	b21b      	sxth	r3, r3
 800b0a8:	e01b      	b.n	800b0e2 <__sflush_r+0xf2>
 800b0aa:	690f      	ldr	r7, [r1, #16]
 800b0ac:	2f00      	cmp	r7, #0
 800b0ae:	d0f6      	beq.n	800b09e <__sflush_r+0xae>
 800b0b0:	0793      	lsls	r3, r2, #30
 800b0b2:	680e      	ldr	r6, [r1, #0]
 800b0b4:	bf08      	it	eq
 800b0b6:	694b      	ldreq	r3, [r1, #20]
 800b0b8:	600f      	str	r7, [r1, #0]
 800b0ba:	bf18      	it	ne
 800b0bc:	2300      	movne	r3, #0
 800b0be:	eba6 0807 	sub.w	r8, r6, r7
 800b0c2:	608b      	str	r3, [r1, #8]
 800b0c4:	f1b8 0f00 	cmp.w	r8, #0
 800b0c8:	dde9      	ble.n	800b09e <__sflush_r+0xae>
 800b0ca:	6a21      	ldr	r1, [r4, #32]
 800b0cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0ce:	4643      	mov	r3, r8
 800b0d0:	463a      	mov	r2, r7
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	47b0      	blx	r6
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	dc08      	bgt.n	800b0ec <__sflush_r+0xfc>
 800b0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0e2:	81a3      	strh	r3, [r4, #12]
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ec:	4407      	add	r7, r0
 800b0ee:	eba8 0800 	sub.w	r8, r8, r0
 800b0f2:	e7e7      	b.n	800b0c4 <__sflush_r+0xd4>
 800b0f4:	20400001 	.word	0x20400001

0800b0f8 <_fflush_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	690b      	ldr	r3, [r1, #16]
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	460c      	mov	r4, r1
 800b100:	b913      	cbnz	r3, 800b108 <_fflush_r+0x10>
 800b102:	2500      	movs	r5, #0
 800b104:	4628      	mov	r0, r5
 800b106:	bd38      	pop	{r3, r4, r5, pc}
 800b108:	b118      	cbz	r0, 800b112 <_fflush_r+0x1a>
 800b10a:	6a03      	ldr	r3, [r0, #32]
 800b10c:	b90b      	cbnz	r3, 800b112 <_fflush_r+0x1a>
 800b10e:	f7ff fd4d 	bl	800abac <__sinit>
 800b112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d0f3      	beq.n	800b102 <_fflush_r+0xa>
 800b11a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b11c:	07d0      	lsls	r0, r2, #31
 800b11e:	d404      	bmi.n	800b12a <_fflush_r+0x32>
 800b120:	0599      	lsls	r1, r3, #22
 800b122:	d402      	bmi.n	800b12a <_fflush_r+0x32>
 800b124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b126:	f7ff fe34 	bl	800ad92 <__retarget_lock_acquire_recursive>
 800b12a:	4628      	mov	r0, r5
 800b12c:	4621      	mov	r1, r4
 800b12e:	f7ff ff5f 	bl	800aff0 <__sflush_r>
 800b132:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b134:	07da      	lsls	r2, r3, #31
 800b136:	4605      	mov	r5, r0
 800b138:	d4e4      	bmi.n	800b104 <_fflush_r+0xc>
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	059b      	lsls	r3, r3, #22
 800b13e:	d4e1      	bmi.n	800b104 <_fflush_r+0xc>
 800b140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b142:	f7ff fe27 	bl	800ad94 <__retarget_lock_release_recursive>
 800b146:	e7dd      	b.n	800b104 <_fflush_r+0xc>

0800b148 <fiprintf>:
 800b148:	b40e      	push	{r1, r2, r3}
 800b14a:	b503      	push	{r0, r1, lr}
 800b14c:	4601      	mov	r1, r0
 800b14e:	ab03      	add	r3, sp, #12
 800b150:	4805      	ldr	r0, [pc, #20]	@ (800b168 <fiprintf+0x20>)
 800b152:	f853 2b04 	ldr.w	r2, [r3], #4
 800b156:	6800      	ldr	r0, [r0, #0]
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	f000 f847 	bl	800b1ec <_vfiprintf_r>
 800b15e:	b002      	add	sp, #8
 800b160:	f85d eb04 	ldr.w	lr, [sp], #4
 800b164:	b003      	add	sp, #12
 800b166:	4770      	bx	lr
 800b168:	2000001c 	.word	0x2000001c

0800b16c <_sbrk_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d06      	ldr	r5, [pc, #24]	@ (800b188 <_sbrk_r+0x1c>)
 800b170:	2300      	movs	r3, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	602b      	str	r3, [r5, #0]
 800b178:	f7f6 ff6e 	bl	8002058 <_sbrk>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d102      	bne.n	800b186 <_sbrk_r+0x1a>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	b103      	cbz	r3, 800b186 <_sbrk_r+0x1a>
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	20004e44 	.word	0x20004e44

0800b18c <abort>:
 800b18c:	b508      	push	{r3, lr}
 800b18e:	2006      	movs	r0, #6
 800b190:	f000 fb8c 	bl	800b8ac <raise>
 800b194:	2001      	movs	r0, #1
 800b196:	f7f6 fee7 	bl	8001f68 <_exit>

0800b19a <__sfputc_r>:
 800b19a:	6893      	ldr	r3, [r2, #8]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	b410      	push	{r4}
 800b1a2:	6093      	str	r3, [r2, #8]
 800b1a4:	da08      	bge.n	800b1b8 <__sfputc_r+0x1e>
 800b1a6:	6994      	ldr	r4, [r2, #24]
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	db01      	blt.n	800b1b0 <__sfputc_r+0x16>
 800b1ac:	290a      	cmp	r1, #10
 800b1ae:	d103      	bne.n	800b1b8 <__sfputc_r+0x1e>
 800b1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1b4:	f000 babe 	b.w	800b734 <__swbuf_r>
 800b1b8:	6813      	ldr	r3, [r2, #0]
 800b1ba:	1c58      	adds	r0, r3, #1
 800b1bc:	6010      	str	r0, [r2, #0]
 800b1be:	7019      	strb	r1, [r3, #0]
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <__sfputs_r>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	4614      	mov	r4, r2
 800b1d0:	18d5      	adds	r5, r2, r3
 800b1d2:	42ac      	cmp	r4, r5
 800b1d4:	d101      	bne.n	800b1da <__sfputs_r+0x12>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e007      	b.n	800b1ea <__sfputs_r+0x22>
 800b1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1de:	463a      	mov	r2, r7
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7ff ffda 	bl	800b19a <__sfputc_r>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	d1f3      	bne.n	800b1d2 <__sfputs_r+0xa>
 800b1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1ec <_vfiprintf_r>:
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	460d      	mov	r5, r1
 800b1f2:	b09d      	sub	sp, #116	@ 0x74
 800b1f4:	4614      	mov	r4, r2
 800b1f6:	4698      	mov	r8, r3
 800b1f8:	4606      	mov	r6, r0
 800b1fa:	b118      	cbz	r0, 800b204 <_vfiprintf_r+0x18>
 800b1fc:	6a03      	ldr	r3, [r0, #32]
 800b1fe:	b90b      	cbnz	r3, 800b204 <_vfiprintf_r+0x18>
 800b200:	f7ff fcd4 	bl	800abac <__sinit>
 800b204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b206:	07d9      	lsls	r1, r3, #31
 800b208:	d405      	bmi.n	800b216 <_vfiprintf_r+0x2a>
 800b20a:	89ab      	ldrh	r3, [r5, #12]
 800b20c:	059a      	lsls	r2, r3, #22
 800b20e:	d402      	bmi.n	800b216 <_vfiprintf_r+0x2a>
 800b210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b212:	f7ff fdbe 	bl	800ad92 <__retarget_lock_acquire_recursive>
 800b216:	89ab      	ldrh	r3, [r5, #12]
 800b218:	071b      	lsls	r3, r3, #28
 800b21a:	d501      	bpl.n	800b220 <_vfiprintf_r+0x34>
 800b21c:	692b      	ldr	r3, [r5, #16]
 800b21e:	b99b      	cbnz	r3, 800b248 <_vfiprintf_r+0x5c>
 800b220:	4629      	mov	r1, r5
 800b222:	4630      	mov	r0, r6
 800b224:	f000 fac4 	bl	800b7b0 <__swsetup_r>
 800b228:	b170      	cbz	r0, 800b248 <_vfiprintf_r+0x5c>
 800b22a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b22c:	07dc      	lsls	r4, r3, #31
 800b22e:	d504      	bpl.n	800b23a <_vfiprintf_r+0x4e>
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
 800b234:	b01d      	add	sp, #116	@ 0x74
 800b236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23a:	89ab      	ldrh	r3, [r5, #12]
 800b23c:	0598      	lsls	r0, r3, #22
 800b23e:	d4f7      	bmi.n	800b230 <_vfiprintf_r+0x44>
 800b240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b242:	f7ff fda7 	bl	800ad94 <__retarget_lock_release_recursive>
 800b246:	e7f3      	b.n	800b230 <_vfiprintf_r+0x44>
 800b248:	2300      	movs	r3, #0
 800b24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b24c:	2320      	movs	r3, #32
 800b24e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b252:	f8cd 800c 	str.w	r8, [sp, #12]
 800b256:	2330      	movs	r3, #48	@ 0x30
 800b258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b408 <_vfiprintf_r+0x21c>
 800b25c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b260:	f04f 0901 	mov.w	r9, #1
 800b264:	4623      	mov	r3, r4
 800b266:	469a      	mov	sl, r3
 800b268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b26c:	b10a      	cbz	r2, 800b272 <_vfiprintf_r+0x86>
 800b26e:	2a25      	cmp	r2, #37	@ 0x25
 800b270:	d1f9      	bne.n	800b266 <_vfiprintf_r+0x7a>
 800b272:	ebba 0b04 	subs.w	fp, sl, r4
 800b276:	d00b      	beq.n	800b290 <_vfiprintf_r+0xa4>
 800b278:	465b      	mov	r3, fp
 800b27a:	4622      	mov	r2, r4
 800b27c:	4629      	mov	r1, r5
 800b27e:	4630      	mov	r0, r6
 800b280:	f7ff ffa2 	bl	800b1c8 <__sfputs_r>
 800b284:	3001      	adds	r0, #1
 800b286:	f000 80a7 	beq.w	800b3d8 <_vfiprintf_r+0x1ec>
 800b28a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b28c:	445a      	add	r2, fp
 800b28e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b290:	f89a 3000 	ldrb.w	r3, [sl]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 809f 	beq.w	800b3d8 <_vfiprintf_r+0x1ec>
 800b29a:	2300      	movs	r3, #0
 800b29c:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a4:	f10a 0a01 	add.w	sl, sl, #1
 800b2a8:	9304      	str	r3, [sp, #16]
 800b2aa:	9307      	str	r3, [sp, #28]
 800b2ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2b2:	4654      	mov	r4, sl
 800b2b4:	2205      	movs	r2, #5
 800b2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ba:	4853      	ldr	r0, [pc, #332]	@ (800b408 <_vfiprintf_r+0x21c>)
 800b2bc:	f7f4 ff90 	bl	80001e0 <memchr>
 800b2c0:	9a04      	ldr	r2, [sp, #16]
 800b2c2:	b9d8      	cbnz	r0, 800b2fc <_vfiprintf_r+0x110>
 800b2c4:	06d1      	lsls	r1, r2, #27
 800b2c6:	bf44      	itt	mi
 800b2c8:	2320      	movmi	r3, #32
 800b2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2ce:	0713      	lsls	r3, r2, #28
 800b2d0:	bf44      	itt	mi
 800b2d2:	232b      	movmi	r3, #43	@ 0x2b
 800b2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2de:	d015      	beq.n	800b30c <_vfiprintf_r+0x120>
 800b2e0:	9a07      	ldr	r2, [sp, #28]
 800b2e2:	4654      	mov	r4, sl
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	f04f 0c0a 	mov.w	ip, #10
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f0:	3b30      	subs	r3, #48	@ 0x30
 800b2f2:	2b09      	cmp	r3, #9
 800b2f4:	d94b      	bls.n	800b38e <_vfiprintf_r+0x1a2>
 800b2f6:	b1b0      	cbz	r0, 800b326 <_vfiprintf_r+0x13a>
 800b2f8:	9207      	str	r2, [sp, #28]
 800b2fa:	e014      	b.n	800b326 <_vfiprintf_r+0x13a>
 800b2fc:	eba0 0308 	sub.w	r3, r0, r8
 800b300:	fa09 f303 	lsl.w	r3, r9, r3
 800b304:	4313      	orrs	r3, r2
 800b306:	9304      	str	r3, [sp, #16]
 800b308:	46a2      	mov	sl, r4
 800b30a:	e7d2      	b.n	800b2b2 <_vfiprintf_r+0xc6>
 800b30c:	9b03      	ldr	r3, [sp, #12]
 800b30e:	1d19      	adds	r1, r3, #4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	9103      	str	r1, [sp, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	bfbb      	ittet	lt
 800b318:	425b      	neglt	r3, r3
 800b31a:	f042 0202 	orrlt.w	r2, r2, #2
 800b31e:	9307      	strge	r3, [sp, #28]
 800b320:	9307      	strlt	r3, [sp, #28]
 800b322:	bfb8      	it	lt
 800b324:	9204      	strlt	r2, [sp, #16]
 800b326:	7823      	ldrb	r3, [r4, #0]
 800b328:	2b2e      	cmp	r3, #46	@ 0x2e
 800b32a:	d10a      	bne.n	800b342 <_vfiprintf_r+0x156>
 800b32c:	7863      	ldrb	r3, [r4, #1]
 800b32e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b330:	d132      	bne.n	800b398 <_vfiprintf_r+0x1ac>
 800b332:	9b03      	ldr	r3, [sp, #12]
 800b334:	1d1a      	adds	r2, r3, #4
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	9203      	str	r2, [sp, #12]
 800b33a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b33e:	3402      	adds	r4, #2
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b418 <_vfiprintf_r+0x22c>
 800b346:	7821      	ldrb	r1, [r4, #0]
 800b348:	2203      	movs	r2, #3
 800b34a:	4650      	mov	r0, sl
 800b34c:	f7f4 ff48 	bl	80001e0 <memchr>
 800b350:	b138      	cbz	r0, 800b362 <_vfiprintf_r+0x176>
 800b352:	9b04      	ldr	r3, [sp, #16]
 800b354:	eba0 000a 	sub.w	r0, r0, sl
 800b358:	2240      	movs	r2, #64	@ 0x40
 800b35a:	4082      	lsls	r2, r0
 800b35c:	4313      	orrs	r3, r2
 800b35e:	3401      	adds	r4, #1
 800b360:	9304      	str	r3, [sp, #16]
 800b362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b366:	4829      	ldr	r0, [pc, #164]	@ (800b40c <_vfiprintf_r+0x220>)
 800b368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b36c:	2206      	movs	r2, #6
 800b36e:	f7f4 ff37 	bl	80001e0 <memchr>
 800b372:	2800      	cmp	r0, #0
 800b374:	d03f      	beq.n	800b3f6 <_vfiprintf_r+0x20a>
 800b376:	4b26      	ldr	r3, [pc, #152]	@ (800b410 <_vfiprintf_r+0x224>)
 800b378:	bb1b      	cbnz	r3, 800b3c2 <_vfiprintf_r+0x1d6>
 800b37a:	9b03      	ldr	r3, [sp, #12]
 800b37c:	3307      	adds	r3, #7
 800b37e:	f023 0307 	bic.w	r3, r3, #7
 800b382:	3308      	adds	r3, #8
 800b384:	9303      	str	r3, [sp, #12]
 800b386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b388:	443b      	add	r3, r7
 800b38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b38c:	e76a      	b.n	800b264 <_vfiprintf_r+0x78>
 800b38e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b392:	460c      	mov	r4, r1
 800b394:	2001      	movs	r0, #1
 800b396:	e7a8      	b.n	800b2ea <_vfiprintf_r+0xfe>
 800b398:	2300      	movs	r3, #0
 800b39a:	3401      	adds	r4, #1
 800b39c:	9305      	str	r3, [sp, #20]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	f04f 0c0a 	mov.w	ip, #10
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3aa:	3a30      	subs	r2, #48	@ 0x30
 800b3ac:	2a09      	cmp	r2, #9
 800b3ae:	d903      	bls.n	800b3b8 <_vfiprintf_r+0x1cc>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0c6      	beq.n	800b342 <_vfiprintf_r+0x156>
 800b3b4:	9105      	str	r1, [sp, #20]
 800b3b6:	e7c4      	b.n	800b342 <_vfiprintf_r+0x156>
 800b3b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3bc:	4604      	mov	r4, r0
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e7f0      	b.n	800b3a4 <_vfiprintf_r+0x1b8>
 800b3c2:	ab03      	add	r3, sp, #12
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4b12      	ldr	r3, [pc, #72]	@ (800b414 <_vfiprintf_r+0x228>)
 800b3ca:	a904      	add	r1, sp, #16
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f3af 8000 	nop.w
 800b3d2:	4607      	mov	r7, r0
 800b3d4:	1c78      	adds	r0, r7, #1
 800b3d6:	d1d6      	bne.n	800b386 <_vfiprintf_r+0x19a>
 800b3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3da:	07d9      	lsls	r1, r3, #31
 800b3dc:	d405      	bmi.n	800b3ea <_vfiprintf_r+0x1fe>
 800b3de:	89ab      	ldrh	r3, [r5, #12]
 800b3e0:	059a      	lsls	r2, r3, #22
 800b3e2:	d402      	bmi.n	800b3ea <_vfiprintf_r+0x1fe>
 800b3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3e6:	f7ff fcd5 	bl	800ad94 <__retarget_lock_release_recursive>
 800b3ea:	89ab      	ldrh	r3, [r5, #12]
 800b3ec:	065b      	lsls	r3, r3, #25
 800b3ee:	f53f af1f 	bmi.w	800b230 <_vfiprintf_r+0x44>
 800b3f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3f4:	e71e      	b.n	800b234 <_vfiprintf_r+0x48>
 800b3f6:	ab03      	add	r3, sp, #12
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	4b05      	ldr	r3, [pc, #20]	@ (800b414 <_vfiprintf_r+0x228>)
 800b3fe:	a904      	add	r1, sp, #16
 800b400:	4630      	mov	r0, r6
 800b402:	f000 f879 	bl	800b4f8 <_printf_i>
 800b406:	e7e4      	b.n	800b3d2 <_vfiprintf_r+0x1e6>
 800b408:	0800bb63 	.word	0x0800bb63
 800b40c:	0800bb6d 	.word	0x0800bb6d
 800b410:	00000000 	.word	0x00000000
 800b414:	0800b1c9 	.word	0x0800b1c9
 800b418:	0800bb69 	.word	0x0800bb69

0800b41c <_printf_common>:
 800b41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b420:	4616      	mov	r6, r2
 800b422:	4698      	mov	r8, r3
 800b424:	688a      	ldr	r2, [r1, #8]
 800b426:	690b      	ldr	r3, [r1, #16]
 800b428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b42c:	4293      	cmp	r3, r2
 800b42e:	bfb8      	it	lt
 800b430:	4613      	movlt	r3, r2
 800b432:	6033      	str	r3, [r6, #0]
 800b434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b438:	4607      	mov	r7, r0
 800b43a:	460c      	mov	r4, r1
 800b43c:	b10a      	cbz	r2, 800b442 <_printf_common+0x26>
 800b43e:	3301      	adds	r3, #1
 800b440:	6033      	str	r3, [r6, #0]
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	0699      	lsls	r1, r3, #26
 800b446:	bf42      	ittt	mi
 800b448:	6833      	ldrmi	r3, [r6, #0]
 800b44a:	3302      	addmi	r3, #2
 800b44c:	6033      	strmi	r3, [r6, #0]
 800b44e:	6825      	ldr	r5, [r4, #0]
 800b450:	f015 0506 	ands.w	r5, r5, #6
 800b454:	d106      	bne.n	800b464 <_printf_common+0x48>
 800b456:	f104 0a19 	add.w	sl, r4, #25
 800b45a:	68e3      	ldr	r3, [r4, #12]
 800b45c:	6832      	ldr	r2, [r6, #0]
 800b45e:	1a9b      	subs	r3, r3, r2
 800b460:	42ab      	cmp	r3, r5
 800b462:	dc26      	bgt.n	800b4b2 <_printf_common+0x96>
 800b464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b468:	6822      	ldr	r2, [r4, #0]
 800b46a:	3b00      	subs	r3, #0
 800b46c:	bf18      	it	ne
 800b46e:	2301      	movne	r3, #1
 800b470:	0692      	lsls	r2, r2, #26
 800b472:	d42b      	bmi.n	800b4cc <_printf_common+0xb0>
 800b474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b478:	4641      	mov	r1, r8
 800b47a:	4638      	mov	r0, r7
 800b47c:	47c8      	blx	r9
 800b47e:	3001      	adds	r0, #1
 800b480:	d01e      	beq.n	800b4c0 <_printf_common+0xa4>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	6922      	ldr	r2, [r4, #16]
 800b486:	f003 0306 	and.w	r3, r3, #6
 800b48a:	2b04      	cmp	r3, #4
 800b48c:	bf02      	ittt	eq
 800b48e:	68e5      	ldreq	r5, [r4, #12]
 800b490:	6833      	ldreq	r3, [r6, #0]
 800b492:	1aed      	subeq	r5, r5, r3
 800b494:	68a3      	ldr	r3, [r4, #8]
 800b496:	bf0c      	ite	eq
 800b498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b49c:	2500      	movne	r5, #0
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	bfc4      	itt	gt
 800b4a2:	1a9b      	subgt	r3, r3, r2
 800b4a4:	18ed      	addgt	r5, r5, r3
 800b4a6:	2600      	movs	r6, #0
 800b4a8:	341a      	adds	r4, #26
 800b4aa:	42b5      	cmp	r5, r6
 800b4ac:	d11a      	bne.n	800b4e4 <_printf_common+0xc8>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	e008      	b.n	800b4c4 <_printf_common+0xa8>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	4652      	mov	r2, sl
 800b4b6:	4641      	mov	r1, r8
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	47c8      	blx	r9
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d103      	bne.n	800b4c8 <_printf_common+0xac>
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c8:	3501      	adds	r5, #1
 800b4ca:	e7c6      	b.n	800b45a <_printf_common+0x3e>
 800b4cc:	18e1      	adds	r1, r4, r3
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	2030      	movs	r0, #48	@ 0x30
 800b4d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4d6:	4422      	add	r2, r4
 800b4d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4e0:	3302      	adds	r3, #2
 800b4e2:	e7c7      	b.n	800b474 <_printf_common+0x58>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	4641      	mov	r1, r8
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	47c8      	blx	r9
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d0e6      	beq.n	800b4c0 <_printf_common+0xa4>
 800b4f2:	3601      	adds	r6, #1
 800b4f4:	e7d9      	b.n	800b4aa <_printf_common+0x8e>
	...

0800b4f8 <_printf_i>:
 800b4f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fc:	7e0f      	ldrb	r7, [r1, #24]
 800b4fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b500:	2f78      	cmp	r7, #120	@ 0x78
 800b502:	4691      	mov	r9, r2
 800b504:	4680      	mov	r8, r0
 800b506:	460c      	mov	r4, r1
 800b508:	469a      	mov	sl, r3
 800b50a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b50e:	d807      	bhi.n	800b520 <_printf_i+0x28>
 800b510:	2f62      	cmp	r7, #98	@ 0x62
 800b512:	d80a      	bhi.n	800b52a <_printf_i+0x32>
 800b514:	2f00      	cmp	r7, #0
 800b516:	f000 80d1 	beq.w	800b6bc <_printf_i+0x1c4>
 800b51a:	2f58      	cmp	r7, #88	@ 0x58
 800b51c:	f000 80b8 	beq.w	800b690 <_printf_i+0x198>
 800b520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b528:	e03a      	b.n	800b5a0 <_printf_i+0xa8>
 800b52a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b52e:	2b15      	cmp	r3, #21
 800b530:	d8f6      	bhi.n	800b520 <_printf_i+0x28>
 800b532:	a101      	add	r1, pc, #4	@ (adr r1, 800b538 <_printf_i+0x40>)
 800b534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b538:	0800b591 	.word	0x0800b591
 800b53c:	0800b5a5 	.word	0x0800b5a5
 800b540:	0800b521 	.word	0x0800b521
 800b544:	0800b521 	.word	0x0800b521
 800b548:	0800b521 	.word	0x0800b521
 800b54c:	0800b521 	.word	0x0800b521
 800b550:	0800b5a5 	.word	0x0800b5a5
 800b554:	0800b521 	.word	0x0800b521
 800b558:	0800b521 	.word	0x0800b521
 800b55c:	0800b521 	.word	0x0800b521
 800b560:	0800b521 	.word	0x0800b521
 800b564:	0800b6a3 	.word	0x0800b6a3
 800b568:	0800b5cf 	.word	0x0800b5cf
 800b56c:	0800b65d 	.word	0x0800b65d
 800b570:	0800b521 	.word	0x0800b521
 800b574:	0800b521 	.word	0x0800b521
 800b578:	0800b6c5 	.word	0x0800b6c5
 800b57c:	0800b521 	.word	0x0800b521
 800b580:	0800b5cf 	.word	0x0800b5cf
 800b584:	0800b521 	.word	0x0800b521
 800b588:	0800b521 	.word	0x0800b521
 800b58c:	0800b665 	.word	0x0800b665
 800b590:	6833      	ldr	r3, [r6, #0]
 800b592:	1d1a      	adds	r2, r3, #4
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6032      	str	r2, [r6, #0]
 800b598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b59c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e09c      	b.n	800b6de <_printf_i+0x1e6>
 800b5a4:	6833      	ldr	r3, [r6, #0]
 800b5a6:	6820      	ldr	r0, [r4, #0]
 800b5a8:	1d19      	adds	r1, r3, #4
 800b5aa:	6031      	str	r1, [r6, #0]
 800b5ac:	0606      	lsls	r6, r0, #24
 800b5ae:	d501      	bpl.n	800b5b4 <_printf_i+0xbc>
 800b5b0:	681d      	ldr	r5, [r3, #0]
 800b5b2:	e003      	b.n	800b5bc <_printf_i+0xc4>
 800b5b4:	0645      	lsls	r5, r0, #25
 800b5b6:	d5fb      	bpl.n	800b5b0 <_printf_i+0xb8>
 800b5b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5bc:	2d00      	cmp	r5, #0
 800b5be:	da03      	bge.n	800b5c8 <_printf_i+0xd0>
 800b5c0:	232d      	movs	r3, #45	@ 0x2d
 800b5c2:	426d      	negs	r5, r5
 800b5c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5c8:	4858      	ldr	r0, [pc, #352]	@ (800b72c <_printf_i+0x234>)
 800b5ca:	230a      	movs	r3, #10
 800b5cc:	e011      	b.n	800b5f2 <_printf_i+0xfa>
 800b5ce:	6821      	ldr	r1, [r4, #0]
 800b5d0:	6833      	ldr	r3, [r6, #0]
 800b5d2:	0608      	lsls	r0, r1, #24
 800b5d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5d8:	d402      	bmi.n	800b5e0 <_printf_i+0xe8>
 800b5da:	0649      	lsls	r1, r1, #25
 800b5dc:	bf48      	it	mi
 800b5de:	b2ad      	uxthmi	r5, r5
 800b5e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5e2:	4852      	ldr	r0, [pc, #328]	@ (800b72c <_printf_i+0x234>)
 800b5e4:	6033      	str	r3, [r6, #0]
 800b5e6:	bf14      	ite	ne
 800b5e8:	230a      	movne	r3, #10
 800b5ea:	2308      	moveq	r3, #8
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5f2:	6866      	ldr	r6, [r4, #4]
 800b5f4:	60a6      	str	r6, [r4, #8]
 800b5f6:	2e00      	cmp	r6, #0
 800b5f8:	db05      	blt.n	800b606 <_printf_i+0x10e>
 800b5fa:	6821      	ldr	r1, [r4, #0]
 800b5fc:	432e      	orrs	r6, r5
 800b5fe:	f021 0104 	bic.w	r1, r1, #4
 800b602:	6021      	str	r1, [r4, #0]
 800b604:	d04b      	beq.n	800b69e <_printf_i+0x1a6>
 800b606:	4616      	mov	r6, r2
 800b608:	fbb5 f1f3 	udiv	r1, r5, r3
 800b60c:	fb03 5711 	mls	r7, r3, r1, r5
 800b610:	5dc7      	ldrb	r7, [r0, r7]
 800b612:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b616:	462f      	mov	r7, r5
 800b618:	42bb      	cmp	r3, r7
 800b61a:	460d      	mov	r5, r1
 800b61c:	d9f4      	bls.n	800b608 <_printf_i+0x110>
 800b61e:	2b08      	cmp	r3, #8
 800b620:	d10b      	bne.n	800b63a <_printf_i+0x142>
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	07df      	lsls	r7, r3, #31
 800b626:	d508      	bpl.n	800b63a <_printf_i+0x142>
 800b628:	6923      	ldr	r3, [r4, #16]
 800b62a:	6861      	ldr	r1, [r4, #4]
 800b62c:	4299      	cmp	r1, r3
 800b62e:	bfde      	ittt	le
 800b630:	2330      	movle	r3, #48	@ 0x30
 800b632:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b636:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b63a:	1b92      	subs	r2, r2, r6
 800b63c:	6122      	str	r2, [r4, #16]
 800b63e:	f8cd a000 	str.w	sl, [sp]
 800b642:	464b      	mov	r3, r9
 800b644:	aa03      	add	r2, sp, #12
 800b646:	4621      	mov	r1, r4
 800b648:	4640      	mov	r0, r8
 800b64a:	f7ff fee7 	bl	800b41c <_printf_common>
 800b64e:	3001      	adds	r0, #1
 800b650:	d14a      	bne.n	800b6e8 <_printf_i+0x1f0>
 800b652:	f04f 30ff 	mov.w	r0, #4294967295
 800b656:	b004      	add	sp, #16
 800b658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	f043 0320 	orr.w	r3, r3, #32
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	4832      	ldr	r0, [pc, #200]	@ (800b730 <_printf_i+0x238>)
 800b666:	2778      	movs	r7, #120	@ 0x78
 800b668:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	6831      	ldr	r1, [r6, #0]
 800b670:	061f      	lsls	r7, r3, #24
 800b672:	f851 5b04 	ldr.w	r5, [r1], #4
 800b676:	d402      	bmi.n	800b67e <_printf_i+0x186>
 800b678:	065f      	lsls	r7, r3, #25
 800b67a:	bf48      	it	mi
 800b67c:	b2ad      	uxthmi	r5, r5
 800b67e:	6031      	str	r1, [r6, #0]
 800b680:	07d9      	lsls	r1, r3, #31
 800b682:	bf44      	itt	mi
 800b684:	f043 0320 	orrmi.w	r3, r3, #32
 800b688:	6023      	strmi	r3, [r4, #0]
 800b68a:	b11d      	cbz	r5, 800b694 <_printf_i+0x19c>
 800b68c:	2310      	movs	r3, #16
 800b68e:	e7ad      	b.n	800b5ec <_printf_i+0xf4>
 800b690:	4826      	ldr	r0, [pc, #152]	@ (800b72c <_printf_i+0x234>)
 800b692:	e7e9      	b.n	800b668 <_printf_i+0x170>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	f023 0320 	bic.w	r3, r3, #32
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	e7f6      	b.n	800b68c <_printf_i+0x194>
 800b69e:	4616      	mov	r6, r2
 800b6a0:	e7bd      	b.n	800b61e <_printf_i+0x126>
 800b6a2:	6833      	ldr	r3, [r6, #0]
 800b6a4:	6825      	ldr	r5, [r4, #0]
 800b6a6:	6961      	ldr	r1, [r4, #20]
 800b6a8:	1d18      	adds	r0, r3, #4
 800b6aa:	6030      	str	r0, [r6, #0]
 800b6ac:	062e      	lsls	r6, r5, #24
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	d501      	bpl.n	800b6b6 <_printf_i+0x1be>
 800b6b2:	6019      	str	r1, [r3, #0]
 800b6b4:	e002      	b.n	800b6bc <_printf_i+0x1c4>
 800b6b6:	0668      	lsls	r0, r5, #25
 800b6b8:	d5fb      	bpl.n	800b6b2 <_printf_i+0x1ba>
 800b6ba:	8019      	strh	r1, [r3, #0]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	6123      	str	r3, [r4, #16]
 800b6c0:	4616      	mov	r6, r2
 800b6c2:	e7bc      	b.n	800b63e <_printf_i+0x146>
 800b6c4:	6833      	ldr	r3, [r6, #0]
 800b6c6:	1d1a      	adds	r2, r3, #4
 800b6c8:	6032      	str	r2, [r6, #0]
 800b6ca:	681e      	ldr	r6, [r3, #0]
 800b6cc:	6862      	ldr	r2, [r4, #4]
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7f4 fd85 	bl	80001e0 <memchr>
 800b6d6:	b108      	cbz	r0, 800b6dc <_printf_i+0x1e4>
 800b6d8:	1b80      	subs	r0, r0, r6
 800b6da:	6060      	str	r0, [r4, #4]
 800b6dc:	6863      	ldr	r3, [r4, #4]
 800b6de:	6123      	str	r3, [r4, #16]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6e6:	e7aa      	b.n	800b63e <_printf_i+0x146>
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	47d0      	blx	sl
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	d0ad      	beq.n	800b652 <_printf_i+0x15a>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	079b      	lsls	r3, r3, #30
 800b6fa:	d413      	bmi.n	800b724 <_printf_i+0x22c>
 800b6fc:	68e0      	ldr	r0, [r4, #12]
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	4298      	cmp	r0, r3
 800b702:	bfb8      	it	lt
 800b704:	4618      	movlt	r0, r3
 800b706:	e7a6      	b.n	800b656 <_printf_i+0x15e>
 800b708:	2301      	movs	r3, #1
 800b70a:	4632      	mov	r2, r6
 800b70c:	4649      	mov	r1, r9
 800b70e:	4640      	mov	r0, r8
 800b710:	47d0      	blx	sl
 800b712:	3001      	adds	r0, #1
 800b714:	d09d      	beq.n	800b652 <_printf_i+0x15a>
 800b716:	3501      	adds	r5, #1
 800b718:	68e3      	ldr	r3, [r4, #12]
 800b71a:	9903      	ldr	r1, [sp, #12]
 800b71c:	1a5b      	subs	r3, r3, r1
 800b71e:	42ab      	cmp	r3, r5
 800b720:	dcf2      	bgt.n	800b708 <_printf_i+0x210>
 800b722:	e7eb      	b.n	800b6fc <_printf_i+0x204>
 800b724:	2500      	movs	r5, #0
 800b726:	f104 0619 	add.w	r6, r4, #25
 800b72a:	e7f5      	b.n	800b718 <_printf_i+0x220>
 800b72c:	0800bb74 	.word	0x0800bb74
 800b730:	0800bb85 	.word	0x0800bb85

0800b734 <__swbuf_r>:
 800b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b736:	460e      	mov	r6, r1
 800b738:	4614      	mov	r4, r2
 800b73a:	4605      	mov	r5, r0
 800b73c:	b118      	cbz	r0, 800b746 <__swbuf_r+0x12>
 800b73e:	6a03      	ldr	r3, [r0, #32]
 800b740:	b90b      	cbnz	r3, 800b746 <__swbuf_r+0x12>
 800b742:	f7ff fa33 	bl	800abac <__sinit>
 800b746:	69a3      	ldr	r3, [r4, #24]
 800b748:	60a3      	str	r3, [r4, #8]
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	071a      	lsls	r2, r3, #28
 800b74e:	d501      	bpl.n	800b754 <__swbuf_r+0x20>
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	b943      	cbnz	r3, 800b766 <__swbuf_r+0x32>
 800b754:	4621      	mov	r1, r4
 800b756:	4628      	mov	r0, r5
 800b758:	f000 f82a 	bl	800b7b0 <__swsetup_r>
 800b75c:	b118      	cbz	r0, 800b766 <__swbuf_r+0x32>
 800b75e:	f04f 37ff 	mov.w	r7, #4294967295
 800b762:	4638      	mov	r0, r7
 800b764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	6922      	ldr	r2, [r4, #16]
 800b76a:	1a98      	subs	r0, r3, r2
 800b76c:	6963      	ldr	r3, [r4, #20]
 800b76e:	b2f6      	uxtb	r6, r6
 800b770:	4283      	cmp	r3, r0
 800b772:	4637      	mov	r7, r6
 800b774:	dc05      	bgt.n	800b782 <__swbuf_r+0x4e>
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f7ff fcbd 	bl	800b0f8 <_fflush_r>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d1ed      	bne.n	800b75e <__swbuf_r+0x2a>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	3b01      	subs	r3, #1
 800b786:	60a3      	str	r3, [r4, #8]
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	6022      	str	r2, [r4, #0]
 800b78e:	701e      	strb	r6, [r3, #0]
 800b790:	6962      	ldr	r2, [r4, #20]
 800b792:	1c43      	adds	r3, r0, #1
 800b794:	429a      	cmp	r2, r3
 800b796:	d004      	beq.n	800b7a2 <__swbuf_r+0x6e>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	07db      	lsls	r3, r3, #31
 800b79c:	d5e1      	bpl.n	800b762 <__swbuf_r+0x2e>
 800b79e:	2e0a      	cmp	r6, #10
 800b7a0:	d1df      	bne.n	800b762 <__swbuf_r+0x2e>
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f7ff fca7 	bl	800b0f8 <_fflush_r>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d0d9      	beq.n	800b762 <__swbuf_r+0x2e>
 800b7ae:	e7d6      	b.n	800b75e <__swbuf_r+0x2a>

0800b7b0 <__swsetup_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4b29      	ldr	r3, [pc, #164]	@ (800b858 <__swsetup_r+0xa8>)
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	6818      	ldr	r0, [r3, #0]
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	b118      	cbz	r0, 800b7c4 <__swsetup_r+0x14>
 800b7bc:	6a03      	ldr	r3, [r0, #32]
 800b7be:	b90b      	cbnz	r3, 800b7c4 <__swsetup_r+0x14>
 800b7c0:	f7ff f9f4 	bl	800abac <__sinit>
 800b7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c8:	0719      	lsls	r1, r3, #28
 800b7ca:	d422      	bmi.n	800b812 <__swsetup_r+0x62>
 800b7cc:	06da      	lsls	r2, r3, #27
 800b7ce:	d407      	bmi.n	800b7e0 <__swsetup_r+0x30>
 800b7d0:	2209      	movs	r2, #9
 800b7d2:	602a      	str	r2, [r5, #0]
 800b7d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	f04f 30ff 	mov.w	r0, #4294967295
 800b7de:	e033      	b.n	800b848 <__swsetup_r+0x98>
 800b7e0:	0758      	lsls	r0, r3, #29
 800b7e2:	d512      	bpl.n	800b80a <__swsetup_r+0x5a>
 800b7e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7e6:	b141      	cbz	r1, 800b7fa <__swsetup_r+0x4a>
 800b7e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7ec:	4299      	cmp	r1, r3
 800b7ee:	d002      	beq.n	800b7f6 <__swsetup_r+0x46>
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f7ff fafd 	bl	800adf0 <_free_r>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b800:	81a3      	strh	r3, [r4, #12]
 800b802:	2300      	movs	r3, #0
 800b804:	6063      	str	r3, [r4, #4]
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	f043 0308 	orr.w	r3, r3, #8
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	b94b      	cbnz	r3, 800b82a <__swsetup_r+0x7a>
 800b816:	89a3      	ldrh	r3, [r4, #12]
 800b818:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b81c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b820:	d003      	beq.n	800b82a <__swsetup_r+0x7a>
 800b822:	4621      	mov	r1, r4
 800b824:	4628      	mov	r0, r5
 800b826:	f000 f883 	bl	800b930 <__smakebuf_r>
 800b82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82e:	f013 0201 	ands.w	r2, r3, #1
 800b832:	d00a      	beq.n	800b84a <__swsetup_r+0x9a>
 800b834:	2200      	movs	r2, #0
 800b836:	60a2      	str	r2, [r4, #8]
 800b838:	6962      	ldr	r2, [r4, #20]
 800b83a:	4252      	negs	r2, r2
 800b83c:	61a2      	str	r2, [r4, #24]
 800b83e:	6922      	ldr	r2, [r4, #16]
 800b840:	b942      	cbnz	r2, 800b854 <__swsetup_r+0xa4>
 800b842:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b846:	d1c5      	bne.n	800b7d4 <__swsetup_r+0x24>
 800b848:	bd38      	pop	{r3, r4, r5, pc}
 800b84a:	0799      	lsls	r1, r3, #30
 800b84c:	bf58      	it	pl
 800b84e:	6962      	ldrpl	r2, [r4, #20]
 800b850:	60a2      	str	r2, [r4, #8]
 800b852:	e7f4      	b.n	800b83e <__swsetup_r+0x8e>
 800b854:	2000      	movs	r0, #0
 800b856:	e7f7      	b.n	800b848 <__swsetup_r+0x98>
 800b858:	2000001c 	.word	0x2000001c

0800b85c <_raise_r>:
 800b85c:	291f      	cmp	r1, #31
 800b85e:	b538      	push	{r3, r4, r5, lr}
 800b860:	4605      	mov	r5, r0
 800b862:	460c      	mov	r4, r1
 800b864:	d904      	bls.n	800b870 <_raise_r+0x14>
 800b866:	2316      	movs	r3, #22
 800b868:	6003      	str	r3, [r0, #0]
 800b86a:	f04f 30ff 	mov.w	r0, #4294967295
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b872:	b112      	cbz	r2, 800b87a <_raise_r+0x1e>
 800b874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b878:	b94b      	cbnz	r3, 800b88e <_raise_r+0x32>
 800b87a:	4628      	mov	r0, r5
 800b87c:	f000 f830 	bl	800b8e0 <_getpid_r>
 800b880:	4622      	mov	r2, r4
 800b882:	4601      	mov	r1, r0
 800b884:	4628      	mov	r0, r5
 800b886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b88a:	f000 b817 	b.w	800b8bc <_kill_r>
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d00a      	beq.n	800b8a8 <_raise_r+0x4c>
 800b892:	1c59      	adds	r1, r3, #1
 800b894:	d103      	bne.n	800b89e <_raise_r+0x42>
 800b896:	2316      	movs	r3, #22
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	2001      	movs	r0, #1
 800b89c:	e7e7      	b.n	800b86e <_raise_r+0x12>
 800b89e:	2100      	movs	r1, #0
 800b8a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	4798      	blx	r3
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	e7e0      	b.n	800b86e <_raise_r+0x12>

0800b8ac <raise>:
 800b8ac:	4b02      	ldr	r3, [pc, #8]	@ (800b8b8 <raise+0xc>)
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	f7ff bfd3 	b.w	800b85c <_raise_r>
 800b8b6:	bf00      	nop
 800b8b8:	2000001c 	.word	0x2000001c

0800b8bc <_kill_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d07      	ldr	r5, [pc, #28]	@ (800b8dc <_kill_r+0x20>)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	602b      	str	r3, [r5, #0]
 800b8ca:	f7f6 fb3d 	bl	8001f48 <_kill>
 800b8ce:	1c43      	adds	r3, r0, #1
 800b8d0:	d102      	bne.n	800b8d8 <_kill_r+0x1c>
 800b8d2:	682b      	ldr	r3, [r5, #0]
 800b8d4:	b103      	cbz	r3, 800b8d8 <_kill_r+0x1c>
 800b8d6:	6023      	str	r3, [r4, #0]
 800b8d8:	bd38      	pop	{r3, r4, r5, pc}
 800b8da:	bf00      	nop
 800b8dc:	20004e44 	.word	0x20004e44

0800b8e0 <_getpid_r>:
 800b8e0:	f7f6 bb2a 	b.w	8001f38 <_getpid>

0800b8e4 <__swhatbuf_r>:
 800b8e4:	b570      	push	{r4, r5, r6, lr}
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	b096      	sub	sp, #88	@ 0x58
 800b8f0:	4615      	mov	r5, r2
 800b8f2:	461e      	mov	r6, r3
 800b8f4:	da0d      	bge.n	800b912 <__swhatbuf_r+0x2e>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8fc:	f04f 0100 	mov.w	r1, #0
 800b900:	bf14      	ite	ne
 800b902:	2340      	movne	r3, #64	@ 0x40
 800b904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b908:	2000      	movs	r0, #0
 800b90a:	6031      	str	r1, [r6, #0]
 800b90c:	602b      	str	r3, [r5, #0]
 800b90e:	b016      	add	sp, #88	@ 0x58
 800b910:	bd70      	pop	{r4, r5, r6, pc}
 800b912:	466a      	mov	r2, sp
 800b914:	f000 f848 	bl	800b9a8 <_fstat_r>
 800b918:	2800      	cmp	r0, #0
 800b91a:	dbec      	blt.n	800b8f6 <__swhatbuf_r+0x12>
 800b91c:	9901      	ldr	r1, [sp, #4]
 800b91e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b926:	4259      	negs	r1, r3
 800b928:	4159      	adcs	r1, r3
 800b92a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b92e:	e7eb      	b.n	800b908 <__swhatbuf_r+0x24>

0800b930 <__smakebuf_r>:
 800b930:	898b      	ldrh	r3, [r1, #12]
 800b932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b934:	079d      	lsls	r5, r3, #30
 800b936:	4606      	mov	r6, r0
 800b938:	460c      	mov	r4, r1
 800b93a:	d507      	bpl.n	800b94c <__smakebuf_r+0x1c>
 800b93c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	6123      	str	r3, [r4, #16]
 800b944:	2301      	movs	r3, #1
 800b946:	6163      	str	r3, [r4, #20]
 800b948:	b003      	add	sp, #12
 800b94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94c:	ab01      	add	r3, sp, #4
 800b94e:	466a      	mov	r2, sp
 800b950:	f7ff ffc8 	bl	800b8e4 <__swhatbuf_r>
 800b954:	9f00      	ldr	r7, [sp, #0]
 800b956:	4605      	mov	r5, r0
 800b958:	4639      	mov	r1, r7
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7ff fabc 	bl	800aed8 <_malloc_r>
 800b960:	b948      	cbnz	r0, 800b976 <__smakebuf_r+0x46>
 800b962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b966:	059a      	lsls	r2, r3, #22
 800b968:	d4ee      	bmi.n	800b948 <__smakebuf_r+0x18>
 800b96a:	f023 0303 	bic.w	r3, r3, #3
 800b96e:	f043 0302 	orr.w	r3, r3, #2
 800b972:	81a3      	strh	r3, [r4, #12]
 800b974:	e7e2      	b.n	800b93c <__smakebuf_r+0xc>
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	6020      	str	r0, [r4, #0]
 800b97a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b97e:	81a3      	strh	r3, [r4, #12]
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b986:	b15b      	cbz	r3, 800b9a0 <__smakebuf_r+0x70>
 800b988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b98c:	4630      	mov	r0, r6
 800b98e:	f000 f81d 	bl	800b9cc <_isatty_r>
 800b992:	b128      	cbz	r0, 800b9a0 <__smakebuf_r+0x70>
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	f023 0303 	bic.w	r3, r3, #3
 800b99a:	f043 0301 	orr.w	r3, r3, #1
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	89a3      	ldrh	r3, [r4, #12]
 800b9a2:	431d      	orrs	r5, r3
 800b9a4:	81a5      	strh	r5, [r4, #12]
 800b9a6:	e7cf      	b.n	800b948 <__smakebuf_r+0x18>

0800b9a8 <_fstat_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4d07      	ldr	r5, [pc, #28]	@ (800b9c8 <_fstat_r+0x20>)
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	4608      	mov	r0, r1
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	602b      	str	r3, [r5, #0]
 800b9b6:	f7f6 fb27 	bl	8002008 <_fstat>
 800b9ba:	1c43      	adds	r3, r0, #1
 800b9bc:	d102      	bne.n	800b9c4 <_fstat_r+0x1c>
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	b103      	cbz	r3, 800b9c4 <_fstat_r+0x1c>
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20004e44 	.word	0x20004e44

0800b9cc <_isatty_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4d06      	ldr	r5, [pc, #24]	@ (800b9e8 <_isatty_r+0x1c>)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	602b      	str	r3, [r5, #0]
 800b9d8:	f7f6 fb26 	bl	8002028 <_isatty>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d102      	bne.n	800b9e6 <_isatty_r+0x1a>
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	b103      	cbz	r3, 800b9e6 <_isatty_r+0x1a>
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	20004e44 	.word	0x20004e44

0800b9ec <_init>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr

0800b9f8 <_fini>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	bf00      	nop
 800b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fe:	bc08      	pop	{r3}
 800ba00:	469e      	mov	lr, r3
 800ba02:	4770      	bx	lr

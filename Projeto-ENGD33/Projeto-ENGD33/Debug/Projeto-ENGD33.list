
Projeto-ENGD33.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b954  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800baf4  0800baf4  0000caf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc70  0800bc70  0000d06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bc70  0800bc70  0000cc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc78  0800bc78  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc78  0800bc78  0000cc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc7c  0800bc7c  0000cc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800bc80  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dec  2000006c  0800bcec  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e58  0800bcec  0000de58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020733  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043bb  00000000  00000000  0002d7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  00031b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001697  00000000  00000000  00033868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dc3  00000000  00000000  00034eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021604  00000000  00000000  0003acc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b14d7  00000000  00000000  0005c2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d79d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000846c  00000000  00000000  0010d7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00115c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800badc 	.word	0x0800badc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800badc 	.word	0x0800badc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 fe40 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f82c 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fbde 	bl	8000d78 <MX_GPIO_Init>
  MX_RTC_Init();
 80005bc:	f000 f944 	bl	8000848 <MX_RTC_Init>
  MX_ADC1_Init();
 80005c0:	f000 f890 	bl	80006e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005c4:	f000 f912 	bl	80007ec <MX_I2C1_Init>
  MX_SPI1_Init();
 80005c8:	f000 f998 	bl	80008fc <MX_SPI1_Init>
  MX_TIM1_Init();
 80005cc:	f000 f9cc 	bl	8000968 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005d0:	f000 fa82 	bl	8000ad8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005d4:	f000 fad4 	bl	8000b80 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005d8:	f000 fb26 	bl	8000c28 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 fb78 	bl	8000cd0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005e0:	f000 fba0 	bl	8000d24 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  SetupTarefasPortaCOMM();
 80005e4:	f001 f81e 	bl	8001624 <SetupTarefasPortaCOMM>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e8:	f007 fc54 	bl	8007e94 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <main+0x58>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <main+0x5c>)
 80005f2:	f007 fc99 	bl	8007f28 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <main+0x60>)
 80005fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f007 fc6e 	bl	8007edc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x54>
 8000604:	0800bb54 	.word	0x0800bb54
 8000608:	08000e89 	.word	0x08000e89
 800060c:	2000034c 	.word	0x2000034c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00a fbb5 	bl	800ad8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	@ (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800066c:	2305      	movs	r3, #5
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000676:	2301      	movs	r3, #1
 8000678:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000684:	2319      	movs	r3, #25
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000688:	23a0      	movs	r3, #160	@ 0xa0
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fa15 	bl	8004ac8 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fc0a 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fc77 	bl	8004fb8 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d0:	f000 fbf4 	bl	8000ebc <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	@ 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f6:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 80006f8:	4a3a      	ldr	r2, [pc, #232]	@ (80007e4 <MX_ADC1_Init+0x100>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b38      	ldr	r3, [pc, #224]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 80006fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000704:	4b36      	ldr	r3, [pc, #216]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000706:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070c:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b33      	ldr	r3, [pc, #204]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b31      	ldr	r3, [pc, #196]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000720:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b2e      	ldr	r3, [pc, #184]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000728:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <MX_ADC1_Init+0x104>)
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072c:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000734:	2201      	movs	r2, #1
 8000736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000742:	2201      	movs	r2, #1
 8000744:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000746:	4826      	ldr	r0, [pc, #152]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000748:	f001 fdb6 	bl	80022b8 <HAL_ADC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000752:	f000 fbb3 	bl	8000ebc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000756:	2304      	movs	r3, #4
 8000758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	481e      	ldr	r0, [pc, #120]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000768:	f001 fdea 	bl	8002340 <HAL_ADC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000772:	f000 fba3 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_5;
 8000776:	2305      	movs	r3, #5
 8000778:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800077e:	2305      	movs	r3, #5
 8000780:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 8000788:	f001 fdda 	bl	8002340 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0xb2>
    {
      Error_Handler();
 8000792:	f000 fb93 	bl	8000ebc <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_8;
 8000796:	2308      	movs	r3, #8
 8000798:	603b      	str	r3, [r7, #0]
      sConfig.Rank = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
      sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800079e:	2305      	movs	r3, #5
 80007a0:	60bb      	str	r3, [r7, #8]
      if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	480e      	ldr	r0, [pc, #56]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 80007a8:	f001 fdca 	bl	8002340 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0xd2>
      {
        Error_Handler();
 80007b2:	f000 fb83 	bl	8000ebc <Error_Handler>
      }

      sConfig.Channel = ADC_CHANNEL_9;
 80007b6:	2309      	movs	r3, #9
 80007b8:	603b      	str	r3, [r7, #0]
        sConfig.Rank = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
        sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80007be:	2305      	movs	r3, #5
 80007c0:	60bb      	str	r3, [r7, #8]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <MX_ADC1_Init+0xfc>)
 80007c8:	f001 fdba 	bl	8002340 <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0xf2>
        {
          Error_Handler();
 80007d2:	f000 fb73 	bl	8000ebc <Error_Handler>
        }

  /* USER CODE END ADC1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000088 	.word	0x20000088
 80007e4:	40012000 	.word	0x40012000
 80007e8:	0f000001 	.word	0x0f000001

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_I2C1_Init+0x50>)
 800082a:	f002 fafb 	bl	8002e24 <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 fb42 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000d0 	.word	0x200000d0
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000862:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <MX_RTC_Init+0xb0>)
 8000864:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000866:	4b23      	ldr	r3, [pc, #140]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800086c:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_RTC_Init+0xac>)
 800086e:	227f      	movs	r2, #127	@ 0x7f
 8000870:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000874:	22ff      	movs	r2, #255	@ 0xff
 8000876:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_RTC_Init+0xac>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_RTC_Init+0xac>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800088a:	481a      	ldr	r0, [pc, #104]	@ (80008f4 <MX_RTC_Init+0xac>)
 800088c:	f004 fe96 	bl	80055bc <HAL_RTC_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 fb11 	bl	8000ebc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800089a:	2300      	movs	r3, #0
 800089c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800089e:	2300      	movs	r3, #0
 80008a0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2201      	movs	r2, #1
 80008b2:	4619      	mov	r1, r3
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <MX_RTC_Init+0xac>)
 80008b6:	f004 ff02 	bl	80056be <HAL_RTC_SetTime>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 fafc 	bl	8000ebc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008c4:	2301      	movs	r3, #1
 80008c6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008c8:	2301      	movs	r3, #1
 80008ca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	2201      	movs	r2, #1
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	@ (80008f4 <MX_RTC_Init+0xac>)
 80008dc:	f004 ff89 	bl	80057f2 <HAL_RTC_SetDate>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008e6:	f000 fae9 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000124 	.word	0x20000124
 80008f8:	40002800 	.word	0x40002800

080008fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000902:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <MX_SPI1_Init+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000908:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800090c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000928:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800092c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_SPI1_Init+0x64>)
 8000948:	220a      	movs	r2, #10
 800094a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_SPI1_Init+0x64>)
 800094e:	f005 f875 	bl	8005a3c <HAL_SPI_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000958:	f000 fab0 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000144 	.word	0x20000144
 8000964:	40013000 	.word	0x40013000

08000968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b096      	sub	sp, #88	@ 0x58
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2220      	movs	r2, #32
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00a f9f4 	bl	800ad8e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009a8:	4a4a      	ldr	r2, [pc, #296]	@ (8000ad4 <MX_TIM1_Init+0x16c>)
 80009aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ac:	4b48      	ldr	r3, [pc, #288]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b47      	ldr	r3, [pc, #284]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009b8:	4b45      	ldr	r3, [pc, #276]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b43      	ldr	r3, [pc, #268]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c6:	4b42      	ldr	r3, [pc, #264]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b40      	ldr	r3, [pc, #256]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d2:	483f      	ldr	r0, [pc, #252]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009d4:	f005 f9da 	bl	8005d8c <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009de:	f000 fa6d 	bl	8000ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009ec:	4619      	mov	r1, r3
 80009ee:	4838      	ldr	r0, [pc, #224]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 80009f0:	f005 fd30 	bl	8006454 <HAL_TIM_ConfigClockSource>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009fa:	f000 fa5f 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009fe:	4834      	ldr	r0, [pc, #208]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a00:	f005 fa76 	bl	8005ef0 <HAL_TIM_PWM_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a0a:	f000 fa57 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	482c      	ldr	r0, [pc, #176]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a1e:	f006 f8b5 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a28:	f000 fa48 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2c:	2360      	movs	r3, #96	@ 0x60
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481f      	ldr	r0, [pc, #124]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a52:	f005 fc3d 	bl	80062d0 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a5c:	f000 fa2e 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	2204      	movs	r2, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a6a:	f005 fc31 	bl	80062d0 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000a74:	f000 fa22 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7c:	2208      	movs	r2, #8
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000a82:	f005 fc25 	bl	80062d0 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a8c:	f000 fa16 	bl	8000ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000ab4:	f006 f8d8 	bl	8006c68 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000abe:	f000 f9fd 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ac2:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <MX_TIM1_Init+0x168>)
 8000ac4:	f001 f8f6 	bl	8001cb4 <HAL_TIM_MspPostInit>

}
 8000ac8:	bf00      	nop
 8000aca:	3758      	adds	r7, #88	@ 0x58
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000019c 	.word	0x2000019c
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	@ 0x30
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2224      	movs	r2, #36	@ 0x24
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00a f951 	bl	800ad8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af4:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000af6:	4a21      	ldr	r2, [pc, #132]	@ (8000b7c <MX_TIM3_Init+0xa4>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b22:	2301      	movs	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b32:	2301      	movs	r3, #1
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b46:	f005 fa2c 	bl	8005fa2 <HAL_TIM_Encoder_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 f9b4 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_TIM3_Init+0xa0>)
 8000b62:	f006 f813 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b6c:	f000 f9a6 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3730      	adds	r7, #48	@ 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001e4 	.word	0x200001e4
 8000b7c:	40000400 	.word	0x40000400

08000b80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2224      	movs	r2, #36	@ 0x24
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00a f8fd 	bl	800ad8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b9c:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000b9e:	4a21      	ldr	r2, [pc, #132]	@ (8000c24 <MX_TIM4_Init+0xa4>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000bee:	f005 f9d8 	bl	8005fa2 <HAL_TIM_Encoder_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f000 f960 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_TIM4_Init+0xa0>)
 8000c0a:	f005 ffbf 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c14:	f000 f952 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3730      	adds	r7, #48	@ 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000022c 	.word	0x2000022c
 8000c24:	40000800 	.word	0x40000800

08000c28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	@ 0x30
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2224      	movs	r2, #36	@ 0x24
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00a f8a9 	bl	800ad8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c44:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c46:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <MX_TIM5_Init+0xa4>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000c96:	f005 f984 	bl	8005fa2 <HAL_TIM_Encoder_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ca0:	f000 f90c 	bl	8000ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_TIM5_Init+0xa0>)
 8000cb2:	f005 ff6b 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000cbc:	f000 f8fe 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	@ 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000274 	.word	0x20000274
 8000ccc:	40000c00 	.word	0x40000c00

08000cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <MX_USART2_UART_Init+0x50>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d08:	f006 f814 	bl	8006d34 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d12:	f000 f8d3 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200002bc 	.word	0x200002bc
 8000d20:	40004400 	.word	0x40004400

08000d24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <MX_USART6_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_USART6_UART_Init+0x4c>)
 8000d5c:	f005 ffea 	bl	8006d34 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f000 f8a9 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000304 	.word	0x20000304
 8000d74:	40011400 	.word	0x40011400

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a39      	ldr	r2, [pc, #228]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b37      	ldr	r3, [pc, #220]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a32      	ldr	r2, [pc, #200]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a2b      	ldr	r2, [pc, #172]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a24      	ldr	r2, [pc, #144]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <MX_GPIO_Init+0x104>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relays_Motores_Pin|NRF24_CE_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000e04:	481e      	ldr	r0, [pc, #120]	@ (8000e80 <MX_GPIO_Init+0x108>)
 8000e06:	f001 ffcf 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_DRDY_EXTI13_Pin */
  GPIO_InitStruct.Pin = IMU_DRDY_EXTI13_Pin;
 8000e0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e10:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_DRDY_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4818      	ldr	r0, [pc, #96]	@ (8000e84 <MX_GPIO_Init+0x10c>)
 8000e22:	f001 fe3d 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Relays_Motores_Pin */
  GPIO_InitStruct.Pin = Relays_Motores_Pin;
 8000e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relays_Motores_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4810      	ldr	r0, [pc, #64]	@ (8000e80 <MX_GPIO_Init+0x108>)
 8000e40:	f001 fe2e 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_CE_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8000e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4808      	ldr	r0, [pc, #32]	@ (8000e80 <MX_GPIO_Init+0x108>)
 8000e5e:	f001 fe1f 	bl	8002aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2105      	movs	r1, #5
 8000e66:	2028      	movs	r0, #40	@ 0x28
 8000e68:	f001 fd50 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e6c:	2028      	movs	r0, #40	@ 0x28
 8000e6e:	f001 fd69 	bl	8002944 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	@ 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800

08000e88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f007 f8db 	bl	800804c <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <StartDefaultTask+0x8>

08000e98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000eaa:	f001 f9e5 	bl	8002278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40014400 	.word	0x40014400

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <Error_Handler+0x8>

08000ec8 <vTaskGeraDadosMotor>:

TaskHandle_t xHandleRecepcao = NULL;

uint8_t comando_recebido;

void vTaskGeraDadosMotor(void *pvParameters) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	@ 0x50
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    DadosMotor_t dados;
    const TickType_t xPeriod = pdMS_TO_TICKS(1);
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	647b      	str	r3, [r7, #68]	@ 0x44
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8000ed4:	f008 fa64 	bl	80093a0 <xTaskGetTickCount>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60fb      	str	r3, [r7, #12]

    while (1) {
        dados.timestamp = xTaskGetTickCount();
 8000edc:	f008 fa60 	bl	80093a0 <xTaskGetTickCount>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	613b      	str	r3, [r7, #16]

        for (int i = 0; i < 3; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ee8:	e05e      	b.n	8000fa8 <vTaskGeraDadosMotor+0xe0>
            dados.corrente[i] = rand() % 1000;
 8000eea:	f009 fe0d 	bl	800ab08 <rand>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a37      	ldr	r2, [pc, #220]	@ (8000fd0 <vTaskGeraDadosMotor+0x108>)
 8000ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef6:	1191      	asrs	r1, r2, #6
 8000ef8:	17da      	asrs	r2, r3, #31
 8000efa:	1a8a      	subs	r2, r1, r2
 8000efc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f00:	fb01 f202 	mul.w	r2, r1, r2
 8000f04:	1a9a      	subs	r2, r3, r2
 8000f06:	b212      	sxth	r2, r2
 8000f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	3350      	adds	r3, #80	@ 0x50
 8000f0e:	443b      	add	r3, r7
 8000f10:	f823 2c3c 	strh.w	r2, [r3, #-60]
            dados.controle_tracao[i] = rand() % 200 - 100;
 8000f14:	f009 fdf8 	bl	800ab08 <rand>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000fd4 <vTaskGeraDadosMotor+0x10c>)
 8000f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f20:	1191      	asrs	r1, r2, #6
 8000f22:	17da      	asrs	r2, r3, #31
 8000f24:	1a8a      	subs	r2, r1, r2
 8000f26:	21c8      	movs	r1, #200	@ 0xc8
 8000f28:	fb01 f202 	mul.w	r2, r1, r2
 8000f2c:	1a9a      	subs	r2, r3, r2
 8000f2e:	b293      	uxth	r3, r2
 8000f30:	3b64      	subs	r3, #100	@ 0x64
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f38:	3304      	adds	r3, #4
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	3350      	adds	r3, #80	@ 0x50
 8000f3e:	443b      	add	r3, r7
 8000f40:	f823 2c3e 	strh.w	r2, [r3, #-62]
            for (int j = 0; j < 3; j++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f48:	e028      	b.n	8000f9c <vTaskGeraDadosMotor+0xd4>
                dados.ganho_tracao[3 * i + j] = 0.1f * ((rand() % 100) / 10.0f);
 8000f4a:	f009 fddd 	bl	800ab08 <rand>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a20      	ldr	r2, [pc, #128]	@ (8000fd4 <vTaskGeraDadosMotor+0x10c>)
 8000f52:	fb82 1203 	smull	r1, r2, r2, r3
 8000f56:	1151      	asrs	r1, r2, #5
 8000f58:	17da      	asrs	r2, r3, #31
 8000f5a:	1a8a      	subs	r2, r1, r2
 8000f5c:	2164      	movs	r1, #100	@ 0x64
 8000f5e:	fb01 f202 	mul.w	r2, r1, r2
 8000f62:	1a9a      	subs	r2, r3, r2
 8000f64:	ee07 2a90 	vmov	s15, r2
 8000f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	441a      	add	r2, r3
 8000f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f7e:	4413      	add	r3, r2
 8000f80:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000fd8 <vTaskGeraDadosMotor+0x110>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	3304      	adds	r3, #4
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	3350      	adds	r3, #80	@ 0x50
 8000f8e:	443b      	add	r3, r7
 8000f90:	3b40      	subs	r3, #64	@ 0x40
 8000f92:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8000f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f98:	3301      	adds	r3, #1
 8000f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	ddd3      	ble.n	8000f4a <vTaskGeraDadosMotor+0x82>
        for (int i = 0; i < 3; i++) {
 8000fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	dd9d      	ble.n	8000eea <vTaskGeraDadosMotor+0x22>
            }
        }

        xQueueSend(xFilaDadosMotor, &dados, portMAX_DELAY);
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <vTaskGeraDadosMotor+0x114>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f107 0110 	add.w	r1, r7, #16
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	f007 fa90 	bl	80084e0 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f008 f820 	bl	800900c <vTaskDelayUntil>
        dados.timestamp = xTaskGetTickCount();
 8000fcc:	e786      	b.n	8000edc <vTaskGeraDadosMotor+0x14>
 8000fce:	bf00      	nop
 8000fd0:	10624dd3 	.word	0x10624dd3
 8000fd4:	51eb851f 	.word	0x51eb851f
 8000fd8:	3dcccccd 	.word	0x3dcccccd
 8000fdc:	20000350 	.word	0x20000350

08000fe0 <vTaskGeraDadosVel>:
    }
}

void vTaskGeraDadosVel(void *pvParameters) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09c      	sub	sp, #112	@ 0x70
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    DadosVelocidade_t dados;
    const TickType_t xPeriod = pdMS_TO_TICKS(10);
 8000fe8:	230a      	movs	r3, #10
 8000fea:	667b      	str	r3, [r7, #100]	@ 0x64
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8000fec:	f008 f9d8 	bl	80093a0 <xTaskGetTickCount>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]

    while (1) {
        dados.timestamp = xTaskGetTickCount();
 8000ff4:	f008 f9d4 	bl	80093a0 <xTaskGetTickCount>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	613b      	str	r3, [r7, #16]

        for (int i = 0; i < 3; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001000:	e0ce      	b.n	80011a0 <vTaskGeraDadosVel+0x1c0>
            dados.velocidade_angular[i] = rand() % 500;
 8001002:	f009 fd81 	bl	800ab08 <rand>
 8001006:	4603      	mov	r3, r0
 8001008:	4a6f      	ldr	r2, [pc, #444]	@ (80011c8 <vTaskGeraDadosVel+0x1e8>)
 800100a:	fb82 1203 	smull	r1, r2, r2, r3
 800100e:	1151      	asrs	r1, r2, #5
 8001010:	17da      	asrs	r2, r3, #31
 8001012:	1a8a      	subs	r2, r1, r2
 8001014:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001018:	fb01 f202 	mul.w	r2, r1, r2
 800101c:	1a9a      	subs	r2, r3, r2
 800101e:	b212      	sxth	r2, r2
 8001020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	3370      	adds	r3, #112	@ 0x70
 8001026:	443b      	add	r3, r7
 8001028:	f823 2c5c 	strh.w	r2, [r3, #-92]
            dados.aceleracao_linear[i] = rand() % 100;
 800102c:	f009 fd6c 	bl	800ab08 <rand>
 8001030:	4603      	mov	r3, r0
 8001032:	4a66      	ldr	r2, [pc, #408]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 8001034:	fb82 1203 	smull	r1, r2, r2, r3
 8001038:	1151      	asrs	r1, r2, #5
 800103a:	17da      	asrs	r2, r3, #31
 800103c:	1a8a      	subs	r2, r1, r2
 800103e:	2164      	movs	r1, #100	@ 0x64
 8001040:	fb01 f202 	mul.w	r2, r1, r2
 8001044:	1a9a      	subs	r2, r3, r2
 8001046:	b212      	sxth	r2, r2
 8001048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800104a:	3304      	adds	r3, #4
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	3370      	adds	r3, #112	@ 0x70
 8001050:	443b      	add	r3, r7
 8001052:	f823 2c5e 	strh.w	r2, [r3, #-94]
            dados.giroscopio[i] = rand() % 360;
 8001056:	f009 fd57 	bl	800ab08 <rand>
 800105a:	4603      	mov	r3, r0
 800105c:	4a5c      	ldr	r2, [pc, #368]	@ (80011d0 <vTaskGeraDadosVel+0x1f0>)
 800105e:	fb82 1203 	smull	r1, r2, r2, r3
 8001062:	441a      	add	r2, r3
 8001064:	1211      	asrs	r1, r2, #8
 8001066:	17da      	asrs	r2, r3, #31
 8001068:	1a8a      	subs	r2, r1, r2
 800106a:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800106e:	fb01 f202 	mul.w	r2, r1, r2
 8001072:	1a9a      	subs	r2, r3, r2
 8001074:	b212      	sxth	r2, r2
 8001076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001078:	3308      	adds	r3, #8
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	3370      	adds	r3, #112	@ 0x70
 800107e:	443b      	add	r3, r7
 8001080:	f823 2c60 	strh.w	r2, [r3, #-96]
            dados.campo_magnetico[i] = rand() % 100;
 8001084:	f009 fd40 	bl	800ab08 <rand>
 8001088:	4603      	mov	r3, r0
 800108a:	4a50      	ldr	r2, [pc, #320]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 800108c:	fb82 1203 	smull	r1, r2, r2, r3
 8001090:	1151      	asrs	r1, r2, #5
 8001092:	17da      	asrs	r2, r3, #31
 8001094:	1a8a      	subs	r2, r1, r2
 8001096:	2164      	movs	r1, #100	@ 0x64
 8001098:	fb01 f202 	mul.w	r2, r1, r2
 800109c:	1a9a      	subs	r2, r3, r2
 800109e:	b212      	sxth	r2, r2
 80010a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010a2:	3308      	adds	r3, #8
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	3370      	adds	r3, #112	@ 0x70
 80010a8:	443b      	add	r3, r7
 80010aa:	f823 2c5a 	strh.w	r2, [r3, #-90]
            dados.controle_velocidade[i] = rand() % 200 - 100;
 80010ae:	f009 fd2b 	bl	800ab08 <rand>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a45      	ldr	r2, [pc, #276]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 80010b6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ba:	1191      	asrs	r1, r2, #6
 80010bc:	17da      	asrs	r2, r3, #31
 80010be:	1a8a      	subs	r2, r1, r2
 80010c0:	21c8      	movs	r1, #200	@ 0xc8
 80010c2:	fb01 f202 	mul.w	r2, r1, r2
 80010c6:	1a9a      	subs	r2, r3, r2
 80010c8:	b293      	uxth	r3, r2
 80010ca:	3b64      	subs	r3, #100	@ 0x64
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010d2:	330c      	adds	r3, #12
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	3370      	adds	r3, #112	@ 0x70
 80010d8:	443b      	add	r3, r7
 80010da:	f823 2c5c 	strh.w	r2, [r3, #-92]
            dados.setpoint_velocidade[i] = 100 + rand() % 200;
 80010de:	f009 fd13 	bl	800ab08 <rand>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a39      	ldr	r2, [pc, #228]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 80010e6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ea:	1191      	asrs	r1, r2, #6
 80010ec:	17da      	asrs	r2, r3, #31
 80010ee:	1a8a      	subs	r2, r1, r2
 80010f0:	21c8      	movs	r1, #200	@ 0xc8
 80010f2:	fb01 f202 	mul.w	r2, r1, r2
 80010f6:	1a9a      	subs	r2, r3, r2
 80010f8:	b293      	uxth	r3, r2
 80010fa:	3364      	adds	r3, #100	@ 0x64
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b21a      	sxth	r2, r3
 8001100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001102:	3310      	adds	r3, #16
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	3370      	adds	r3, #112	@ 0x70
 8001108:	443b      	add	r3, r7
 800110a:	f823 2c5e 	strh.w	r2, [r3, #-94]
            dados.angulo_rotacao[i] = rand() % 360;
 800110e:	f009 fcfb 	bl	800ab08 <rand>
 8001112:	4603      	mov	r3, r0
 8001114:	4a2e      	ldr	r2, [pc, #184]	@ (80011d0 <vTaskGeraDadosVel+0x1f0>)
 8001116:	fb82 1203 	smull	r1, r2, r2, r3
 800111a:	441a      	add	r2, r3
 800111c:	1211      	asrs	r1, r2, #8
 800111e:	17da      	asrs	r2, r3, #31
 8001120:	1a8a      	subs	r2, r1, r2
 8001122:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001126:	fb01 f202 	mul.w	r2, r1, r2
 800112a:	1a9a      	subs	r2, r3, r2
 800112c:	b212      	sxth	r2, r2
 800112e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001130:	3324      	adds	r3, #36	@ 0x24
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	3370      	adds	r3, #112	@ 0x70
 8001136:	443b      	add	r3, r7
 8001138:	f823 2c5c 	strh.w	r2, [r3, #-92]
            for (int j = 0; j < 3; j++) {
 800113c:	2300      	movs	r3, #0
 800113e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001140:	e028      	b.n	8001194 <vTaskGeraDadosVel+0x1b4>
                dados.ganho_velocidade[3 * i + j] = 0.05f * ((rand() % 100) / 10.0f);
 8001142:	f009 fce1 	bl	800ab08 <rand>
 8001146:	4603      	mov	r3, r0
 8001148:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <vTaskGeraDadosVel+0x1ec>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1151      	asrs	r1, r2, #5
 8001150:	17da      	asrs	r2, r3, #31
 8001152:	1a8a      	subs	r2, r1, r2
 8001154:	2164      	movs	r1, #100	@ 0x64
 8001156:	fb01 f202 	mul.w	r2, r1, r2
 800115a:	1a9a      	subs	r2, r3, r2
 800115c:	ee07 2a90 	vmov	s15, r2
 8001160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001164:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	441a      	add	r2, r3
 8001174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001176:	4413      	add	r3, r2
 8001178:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80011d4 <vTaskGeraDadosVel+0x1f4>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	330a      	adds	r3, #10
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	3370      	adds	r3, #112	@ 0x70
 8001186:	443b      	add	r3, r7
 8001188:	3b60      	subs	r3, #96	@ 0x60
 800118a:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 800118e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001190:	3301      	adds	r3, #1
 8001192:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001196:	2b02      	cmp	r3, #2
 8001198:	ddd3      	ble.n	8001142 <vTaskGeraDadosVel+0x162>
        for (int i = 0; i < 3; i++) {
 800119a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800119c:	3301      	adds	r3, #1
 800119e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	f77f af2d 	ble.w	8001002 <vTaskGeraDadosVel+0x22>
            }
        }

        xQueueSend(xFilaDadosVelocidade, &dados, portMAX_DELAY);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <vTaskGeraDadosVel+0x1f8>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	f107 0110 	add.w	r1, r7, #16
 80011b0:	2300      	movs	r3, #0
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	f007 f993 	bl	80084e0 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80011c0:	4618      	mov	r0, r3
 80011c2:	f007 ff23 	bl	800900c <vTaskDelayUntil>
        dados.timestamp = xTaskGetTickCount();
 80011c6:	e715      	b.n	8000ff4 <vTaskGeraDadosVel+0x14>
 80011c8:	10624dd3 	.word	0x10624dd3
 80011cc:	51eb851f 	.word	0x51eb851f
 80011d0:	b60b60b7 	.word	0xb60b60b7
 80011d4:	3d4ccccd 	.word	0x3d4ccccd
 80011d8:	20000354 	.word	0x20000354

080011dc <vTaskGeraDadosGPS>:
    }
}

void vTaskGeraDadosGPS(void *pvParameters) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b090      	sub	sp, #64	@ 0x40
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    DadosGPS_t dados;
    const TickType_t xPeriod = pdMS_TO_TICKS(100);
 80011e4:	2364      	movs	r3, #100	@ 0x64
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80011e8:	f008 f8da 	bl	80093a0 <xTaskGetTickCount>
 80011ec:	4603      	mov	r3, r0
 80011ee:	60bb      	str	r3, [r7, #8]

    while (1) {
        dados.timestamp = xTaskGetTickCount();
 80011f0:	f008 f8d6 	bl	80093a0 <xTaskGetTickCount>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
        dados.x = rand() % 10000;
 80011f8:	f009 fc86 	bl	800ab08 <rand>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b57      	ldr	r3, [pc, #348]	@ (800135c <vTaskGeraDadosGPS+0x180>)
 8001200:	fb83 1302 	smull	r1, r3, r3, r2
 8001204:	1319      	asrs	r1, r3, #12
 8001206:	17d3      	asrs	r3, r2, #31
 8001208:	1acb      	subs	r3, r1, r3
 800120a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	613b      	str	r3, [r7, #16]
        dados.y = rand() % 10000;
 8001216:	f009 fc77 	bl	800ab08 <rand>
 800121a:	4602      	mov	r2, r0
 800121c:	4b4f      	ldr	r3, [pc, #316]	@ (800135c <vTaskGeraDadosGPS+0x180>)
 800121e:	fb83 1302 	smull	r1, r3, r3, r2
 8001222:	1319      	asrs	r1, r3, #12
 8001224:	17d3      	asrs	r3, r2, #31
 8001226:	1acb      	subs	r3, r1, r3
 8001228:	f242 7110 	movw	r1, #10000	@ 0x2710
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
        dados.z = rand() % 1000;
 8001234:	f009 fc68 	bl	800ab08 <rand>
 8001238:	4602      	mov	r2, r0
 800123a:	4b49      	ldr	r3, [pc, #292]	@ (8001360 <vTaskGeraDadosGPS+0x184>)
 800123c:	fb83 1302 	smull	r1, r3, r3, r2
 8001240:	1199      	asrs	r1, r3, #6
 8001242:	17d3      	asrs	r3, r2, #31
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 3; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001256:	e03b      	b.n	80012d0 <vTaskGeraDadosGPS+0xf4>
            dados.controle_posicao[i] = rand() % 200 - 100;
 8001258:	f009 fc56 	bl	800ab08 <rand>
 800125c:	4603      	mov	r3, r0
 800125e:	4a41      	ldr	r2, [pc, #260]	@ (8001364 <vTaskGeraDadosGPS+0x188>)
 8001260:	fb82 1203 	smull	r1, r2, r2, r3
 8001264:	1191      	asrs	r1, r2, #6
 8001266:	17da      	asrs	r2, r3, #31
 8001268:	1a8a      	subs	r2, r1, r2
 800126a:	21c8      	movs	r1, #200	@ 0xc8
 800126c:	fb01 f202 	mul.w	r2, r1, r2
 8001270:	1a9a      	subs	r2, r3, r2
 8001272:	b293      	uxth	r3, r2
 8001274:	3b64      	subs	r3, #100	@ 0x64
 8001276:	b29b      	uxth	r3, r3
 8001278:	b21a      	sxth	r2, r3
 800127a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800127c:	3308      	adds	r3, #8
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	3340      	adds	r3, #64	@ 0x40
 8001282:	443b      	add	r3, r7
 8001284:	f823 2c34 	strh.w	r2, [r3, #-52]
            dados.ganho_posicao[i] = 0.01f * ((rand() % 100) / 10.0f);
 8001288:	f009 fc3e 	bl	800ab08 <rand>
 800128c:	4603      	mov	r3, r0
 800128e:	4a35      	ldr	r2, [pc, #212]	@ (8001364 <vTaskGeraDadosGPS+0x188>)
 8001290:	fb82 1203 	smull	r1, r2, r2, r3
 8001294:	1151      	asrs	r1, r2, #5
 8001296:	17da      	asrs	r2, r3, #31
 8001298:	1a8a      	subs	r2, r1, r2
 800129a:	2164      	movs	r1, #100	@ 0x64
 800129c:	fb01 f202 	mul.w	r2, r1, r2
 80012a0:	1a9a      	subs	r2, r3, r2
 80012a2:	ee07 2a90 	vmov	s15, r2
 80012a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012aa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001368 <vTaskGeraDadosGPS+0x18c>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012bc:	3306      	adds	r3, #6
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	3340      	adds	r3, #64	@ 0x40
 80012c2:	443b      	add	r3, r7
 80012c4:	3b34      	subs	r3, #52	@ 0x34
 80012c6:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80012ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012cc:	3301      	adds	r3, #1
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	ddc0      	ble.n	8001258 <vTaskGeraDadosGPS+0x7c>
        }

        dados.roll = rand() % 360;
 80012d6:	f009 fc17 	bl	800ab08 <rand>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a23      	ldr	r2, [pc, #140]	@ (800136c <vTaskGeraDadosGPS+0x190>)
 80012de:	fb82 1203 	smull	r1, r2, r2, r3
 80012e2:	441a      	add	r2, r3
 80012e4:	1211      	asrs	r1, r2, #8
 80012e6:	17da      	asrs	r2, r3, #31
 80012e8:	1a8a      	subs	r2, r1, r2
 80012ea:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80012ee:	fb01 f202 	mul.w	r2, r1, r2
 80012f2:	1a9a      	subs	r2, r3, r2
 80012f4:	b213      	sxth	r3, r2
 80012f6:	863b      	strh	r3, [r7, #48]	@ 0x30
        dados.pitch = rand() % 360;
 80012f8:	f009 fc06 	bl	800ab08 <rand>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1b      	ldr	r2, [pc, #108]	@ (800136c <vTaskGeraDadosGPS+0x190>)
 8001300:	fb82 1203 	smull	r1, r2, r2, r3
 8001304:	441a      	add	r2, r3
 8001306:	1211      	asrs	r1, r2, #8
 8001308:	17da      	asrs	r2, r3, #31
 800130a:	1a8a      	subs	r2, r1, r2
 800130c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001310:	fb01 f202 	mul.w	r2, r1, r2
 8001314:	1a9a      	subs	r2, r3, r2
 8001316:	b213      	sxth	r3, r2
 8001318:	867b      	strh	r3, [r7, #50]	@ 0x32
        dados.yaw = rand() % 360;
 800131a:	f009 fbf5 	bl	800ab08 <rand>
 800131e:	4603      	mov	r3, r0
 8001320:	4a12      	ldr	r2, [pc, #72]	@ (800136c <vTaskGeraDadosGPS+0x190>)
 8001322:	fb82 1203 	smull	r1, r2, r2, r3
 8001326:	441a      	add	r2, r3
 8001328:	1211      	asrs	r1, r2, #8
 800132a:	17da      	asrs	r2, r3, #31
 800132c:	1a8a      	subs	r2, r1, r2
 800132e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001332:	fb01 f202 	mul.w	r2, r1, r2
 8001336:	1a9a      	subs	r2, r3, r2
 8001338:	b213      	sxth	r3, r2
 800133a:	86bb      	strh	r3, [r7, #52]	@ 0x34

        xQueueSend(xFilaDadosGPS, &dados, portMAX_DELAY);
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <vTaskGeraDadosGPS+0x194>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	f107 010c 	add.w	r1, r7, #12
 8001344:	2300      	movs	r3, #0
 8001346:	f04f 32ff 	mov.w	r2, #4294967295
 800134a:	f007 f8c9 	bl	80084e0 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001354:	4618      	mov	r0, r3
 8001356:	f007 fe59 	bl	800900c <vTaskDelayUntil>
        dados.timestamp = xTaskGetTickCount();
 800135a:	e749      	b.n	80011f0 <vTaskGeraDadosGPS+0x14>
 800135c:	68db8bad 	.word	0x68db8bad
 8001360:	10624dd3 	.word	0x10624dd3
 8001364:	51eb851f 	.word	0x51eb851f
 8001368:	3c23d70a 	.word	0x3c23d70a
 800136c:	b60b60b7 	.word	0xb60b60b7
 8001370:	20000358 	.word	0x20000358

08001374 <serializar_bloco>:
    }
}

size_t serializar_bloco(uint8_t tipo, const void *dados, uint16_t tamanho, uint8_t *destino) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4603      	mov	r3, r0
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	4613      	mov	r3, r2
 8001384:	81bb      	strh	r3, [r7, #12]
    destino[0] = tipo;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	701a      	strb	r2, [r3, #0]
    destino[1] = (uint8_t)(tamanho & 0xFF);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	89ba      	ldrh	r2, [r7, #12]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]
    destino[2] = (uint8_t)((tamanho >> 8) & 0xFF);
 8001396:	89bb      	ldrh	r3, [r7, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3302      	adds	r3, #2
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
    memcpy(&destino[3], dados, tamanho);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3303      	adds	r3, #3
 80013a8:	89ba      	ldrh	r2, [r7, #12]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f009 fd6a 	bl	800ae86 <memcpy>
    return 3 + tamanho;
 80013b2:	89bb      	ldrh	r3, [r7, #12]
 80013b4:	3303      	adds	r3, #3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <vTaskSimulaDatalogger>:

void vTaskSimulaDatalogger(void *pvParameters) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0e4      	sub	sp, #400	@ 0x190
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80013ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80013ce:	6018      	str	r0, [r3, #0]
    size_t offset;
    DadosMotor_t motor;
    DadosVelocidade_t velocidade;
    DadosGPS_t gps;

    const TickType_t xPeriod = pdMS_TO_TICKS(100);
 80013d0:	2364      	movs	r3, #100	@ 0x64
 80013d2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80013d6:	f007 ffe3 	bl	80093a0 <xTaskGetTickCount>
 80013da:	4602      	mov	r2, r0
 80013dc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80013e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80013e4:	601a      	str	r2, [r3, #0]

    while (1) {
        offset = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

        if (xQueueReceive(xFilaDadosMotor, &motor, 0)) {
 80013ec:	4b42      	ldr	r3, [pc, #264]	@ (80014f8 <vTaskSimulaDatalogger+0x138>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80013f4:	2200      	movs	r2, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f007 fa12 	bl	8008820 <xQueueReceive>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d010      	beq.n	8001424 <vTaskSimulaDatalogger+0x64>
            offset += serializar_bloco(TIPO_MOTOR, &motor, sizeof(DadosMotor_t), &buffer[offset]);
 8001402:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001406:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800140a:	4413      	add	r3, r2
 800140c:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8001410:	2234      	movs	r2, #52	@ 0x34
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff ffae 	bl	8001374 <serializar_bloco>
 8001418:	4602      	mov	r2, r0
 800141a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800141e:	4413      	add	r3, r2
 8001420:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        }

        if (xQueueReceive(xFilaDadosVelocidade, &velocidade, 0)) {
 8001424:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <vTaskSimulaDatalogger+0x13c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800142c:	2200      	movs	r2, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f007 f9f6 	bl	8008820 <xQueueReceive>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <vTaskSimulaDatalogger+0x9c>
            offset += serializar_bloco(TIPO_VELOC, &velocidade, sizeof(DadosVelocidade_t), &buffer[offset]);
 800143a:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 800143e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001442:	4413      	add	r3, r2
 8001444:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001448:	2254      	movs	r2, #84	@ 0x54
 800144a:	2002      	movs	r0, #2
 800144c:	f7ff ff92 	bl	8001374 <serializar_bloco>
 8001450:	4602      	mov	r2, r0
 8001452:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001456:	4413      	add	r3, r2
 8001458:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        }

        if (xQueueReceive(xFilaDadosGPS, &gps, 0)) {
 800145c:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <vTaskSimulaDatalogger+0x140>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f107 0114 	add.w	r1, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f007 f9da 	bl	8008820 <xQueueReceive>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d010      	beq.n	8001494 <vTaskSimulaDatalogger+0xd4>
            offset += serializar_bloco(TIPO_GPS, &gps, sizeof(DadosGPS_t), &buffer[offset]);
 8001472:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001476:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800147a:	4413      	add	r3, r2
 800147c:	f107 0114 	add.w	r1, r7, #20
 8001480:	222c      	movs	r2, #44	@ 0x2c
 8001482:	2003      	movs	r0, #3
 8001484:	f7ff ff76 	bl	8001374 <serializar_bloco>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800148e:	4413      	add	r3, r2
 8001490:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        }

        if (offset > 0) {
 8001494:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001498:	2b00      	cmp	r3, #0
 800149a:	d025      	beq.n	80014e8 <vTaskSimulaDatalogger+0x128>
            uint8_t *pacote = pvPortMalloc(offset);
 800149c:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 80014a0:	f009 f944 	bl	800a72c <pvPortMalloc>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80014aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80014ae:	601a      	str	r2, [r3, #0]
            if (pacote != NULL) {
 80014b0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80014b4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d014      	beq.n	80014e8 <vTaskSimulaDatalogger+0x128>
                memcpy(pacote, buffer, offset);
 80014be:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80014c2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80014cc:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80014d0:	4618      	mov	r0, r3
 80014d2:	f009 fcd8 	bl	800ae86 <memcpy>
                xQueueSend(xFilaPacotesSerializados, &pacote, portMAX_DELAY);
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <vTaskSimulaDatalogger+0x144>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	f107 010c 	add.w	r1, r7, #12
 80014de:	2300      	movs	r3, #0
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	f006 fffc 	bl	80084e0 <xQueueGenericSend>
            }
        }

        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 fd8b 	bl	800900c <vTaskDelayUntil>
        offset = 0;
 80014f6:	e776      	b.n	80013e6 <vTaskSimulaDatalogger+0x26>
 80014f8:	20000350 	.word	0x20000350
 80014fc:	20000354 	.word	0x20000354
 8001500:	20000358 	.word	0x20000358
 8001504:	20000360 	.word	0x20000360

08001508 <vTaskTransmissao>:
    }
}

void vTaskTransmissao(void *pvParameters) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    uint8_t *pacote;

    const TickType_t xPeriod = pdMS_TO_TICKS(100);
 8001510:	2364      	movs	r3, #100	@ 0x64
 8001512:	617b      	str	r3, [r7, #20]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8001514:	f007 ff44 	bl	80093a0 <xTaskGetTickCount>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

    while (1) {
        if (xQueueReceive(xFilaPacotesSerializados, &pacote, portMAX_DELAY)) {
 800151c:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <vTaskTransmissao+0x68>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f107 0110 	add.w	r1, r7, #16
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	4618      	mov	r0, r3
 800152a:	f007 f979 	bl	8008820 <xQueueReceive>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d016      	beq.n	8001562 <vTaskTransmissao+0x5a>
            HAL_UART_Transmit(&huart6, pacote, pacote[1] + (pacote[2] << 8) + 3, HAL_MAX_DELAY);
 8001534:	6939      	ldr	r1, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	3301      	adds	r3, #1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	3302      	adds	r3, #2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b29b      	uxth	r3, r3
 8001548:	4413      	add	r3, r2
 800154a:	b29b      	uxth	r3, r3
 800154c:	3303      	adds	r3, #3
 800154e:	b29a      	uxth	r2, r3
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	4807      	ldr	r0, [pc, #28]	@ (8001574 <vTaskTransmissao+0x6c>)
 8001556:	f005 fc3d 	bl	8006dd4 <HAL_UART_Transmit>
            vPortFree(pacote);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4618      	mov	r0, r3
 800155e:	f009 f9b3 	bl	800a8c8 <vPortFree>
        }

        vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	6979      	ldr	r1, [r7, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	f007 fd4f 	bl	800900c <vTaskDelayUntil>
        if (xQueueReceive(xFilaPacotesSerializados, &pacote, portMAX_DELAY)) {
 800156e:	e7d5      	b.n	800151c <vTaskTransmissao+0x14>
 8001570:	20000360 	.word	0x20000360
 8001574:	20000304 	.word	0x20000304

08001578 <vTaskRecepcao>:
    }
    
}

void vTaskRecepcao(void *pvParameters) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    ComandoRecebido_t comando;
    while (1) {
        if (xQueueReceive(xFilaComandos, &comando, portMAX_DELAY)) {
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <vTaskRecepcao+0x44>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f107 010f 	add.w	r1, r7, #15
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	4618      	mov	r0, r3
 800158e:	f007 f947 	bl	8008820 <xQueueReceive>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f3      	beq.n	8001580 <vTaskRecepcao+0x8>
            switch (comando) {
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d006      	beq.n	80015ac <vTaskRecepcao+0x34>
 800159e:	2b02      	cmp	r3, #2
 80015a0:	dc06      	bgt.n	80015b0 <vTaskRecepcao+0x38>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <vTaskRecepcao+0x3c>
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d006      	beq.n	80015b8 <vTaskRecepcao+0x40>
                case CMD_RESET: break;
                case CMD_MODO_AUTONOMO: break;
                case CMD_MODO_MANUAL: break;
                default: break;
 80015aa:	e001      	b.n	80015b0 <vTaskRecepcao+0x38>
                case CMD_MODO_MANUAL: break;
 80015ac:	bf00      	nop
 80015ae:	e7e7      	b.n	8001580 <vTaskRecepcao+0x8>
                default: break;
 80015b0:	bf00      	nop
 80015b2:	e7e5      	b.n	8001580 <vTaskRecepcao+0x8>
                case CMD_RESET: break;
 80015b4:	bf00      	nop
 80015b6:	e7e3      	b.n	8001580 <vTaskRecepcao+0x8>
                case CMD_MODO_AUTONOMO: break;
 80015b8:	bf00      	nop
        if (xQueueReceive(xFilaComandos, &comando, portMAX_DELAY)) {
 80015ba:	e7e1      	b.n	8001580 <vTaskRecepcao+0x8>
 80015bc:	2000035c 	.word	0x2000035c

080015c0 <HAL_UART_RxCpltCallback>:
            }
        }
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a12      	ldr	r2, [pc, #72]	@ (8001614 <HAL_UART_RxCpltCallback+0x54>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d11d      	bne.n	800160c <HAL_UART_RxCpltCallback+0x4c>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
        ComandoRecebido_t cmd = (ComandoRecebido_t)comando_recebido;
 80015d4:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_UART_RxCpltCallback+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	72fb      	strb	r3, [r7, #11]
        xQueueSendFromISR(xFilaComandos, &cmd, &xHigherPriorityTaskWoken);
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <HAL_UART_RxCpltCallback+0x5c>)
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	f107 020c 	add.w	r2, r7, #12
 80015e2:	f107 010b 	add.w	r1, r7, #11
 80015e6:	2300      	movs	r3, #0
 80015e8:	f007 f87c 	bl	80086e4 <xQueueGenericSendFromISR>
        HAL_UART_Receive_IT(&huart6, &comando_recebido, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	490a      	ldr	r1, [pc, #40]	@ (8001618 <HAL_UART_RxCpltCallback+0x58>)
 80015f0:	4808      	ldr	r0, [pc, #32]	@ (8001614 <HAL_UART_RxCpltCallback+0x54>)
 80015f2:	f005 fc7a 	bl	8006eea <HAL_UART_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_UART_RxCpltCallback+0x4c>
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_UART_RxCpltCallback+0x60>)
 80015fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	f3bf 8f4f 	dsb	sy
 8001608:	f3bf 8f6f 	isb	sy
    }
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000304 	.word	0x20000304
 8001618:	20000368 	.word	0x20000368
 800161c:	2000035c 	.word	0x2000035c
 8001620:	e000ed04 	.word	0xe000ed04

08001624 <SetupTarefasPortaCOMM>:

void SetupTarefasPortaCOMM(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
    xFilaDadosMotor       = xQueueCreate(TAM_FILA_DADOS_MOTOR, sizeof(DadosMotor_t));
 800162a:	2200      	movs	r2, #0
 800162c:	2134      	movs	r1, #52	@ 0x34
 800162e:	2078      	movs	r0, #120	@ 0x78
 8001630:	f006 fef7 	bl	8008422 <xQueueGenericCreate>
 8001634:	4603      	mov	r3, r0
 8001636:	4a5e      	ldr	r2, [pc, #376]	@ (80017b0 <SetupTarefasPortaCOMM+0x18c>)
 8001638:	6013      	str	r3, [r2, #0]
    xFilaDadosVelocidade  = xQueueCreate(TAM_FILA_DADOS_VELOCIDADE, sizeof(DadosVelocidade_t));
 800163a:	2200      	movs	r2, #0
 800163c:	2154      	movs	r1, #84	@ 0x54
 800163e:	200c      	movs	r0, #12
 8001640:	f006 feef 	bl	8008422 <xQueueGenericCreate>
 8001644:	4603      	mov	r3, r0
 8001646:	4a5b      	ldr	r2, [pc, #364]	@ (80017b4 <SetupTarefasPortaCOMM+0x190>)
 8001648:	6013      	str	r3, [r2, #0]
    xFilaDadosGPS         = xQueueCreate(TAM_FILA_DADOS_GPS, sizeof(DadosGPS_t));
 800164a:	2200      	movs	r2, #0
 800164c:	212c      	movs	r1, #44	@ 0x2c
 800164e:	2002      	movs	r0, #2
 8001650:	f006 fee7 	bl	8008422 <xQueueGenericCreate>
 8001654:	4603      	mov	r3, r0
 8001656:	4a58      	ldr	r2, [pc, #352]	@ (80017b8 <SetupTarefasPortaCOMM+0x194>)
 8001658:	6013      	str	r3, [r2, #0]
    xFilaComandos         = xQueueCreate(5, sizeof(ComandoRecebido_t));
 800165a:	2200      	movs	r2, #0
 800165c:	2101      	movs	r1, #1
 800165e:	2005      	movs	r0, #5
 8001660:	f006 fedf 	bl	8008422 <xQueueGenericCreate>
 8001664:	4603      	mov	r3, r0
 8001666:	4a55      	ldr	r2, [pc, #340]	@ (80017bc <SetupTarefasPortaCOMM+0x198>)
 8001668:	6013      	str	r3, [r2, #0]
    xFilaPacotesSerializados = xQueueCreate(TAM_FILA_PACOTES_SERIALIZADOS, sizeof(uint8_t*));
 800166a:	2200      	movs	r2, #0
 800166c:	2104      	movs	r1, #4
 800166e:	200a      	movs	r0, #10
 8001670:	f006 fed7 	bl	8008422 <xQueueGenericCreate>
 8001674:	4603      	mov	r3, r0
 8001676:	4a52      	ldr	r2, [pc, #328]	@ (80017c0 <SetupTarefasPortaCOMM+0x19c>)
 8001678:	6013      	str	r3, [r2, #0]

    configASSERT(xFilaDadosMotor != NULL);
 800167a:	4b4d      	ldr	r3, [pc, #308]	@ (80017b0 <SetupTarefasPortaCOMM+0x18c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10b      	bne.n	800169a <SetupTarefasPortaCOMM+0x76>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001686:	f383 8811 	msr	BASEPRI, r3
 800168a:	f3bf 8f6f 	isb	sy
 800168e:	f3bf 8f4f 	dsb	sy
 8001692:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	e7fd      	b.n	8001696 <SetupTarefasPortaCOMM+0x72>
    configASSERT(xFilaDadosVelocidade != NULL);
 800169a:	4b46      	ldr	r3, [pc, #280]	@ (80017b4 <SetupTarefasPortaCOMM+0x190>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10b      	bne.n	80016ba <SetupTarefasPortaCOMM+0x96>
	__asm volatile
 80016a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016a6:	f383 8811 	msr	BASEPRI, r3
 80016aa:	f3bf 8f6f 	isb	sy
 80016ae:	f3bf 8f4f 	dsb	sy
 80016b2:	613b      	str	r3, [r7, #16]
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	e7fd      	b.n	80016b6 <SetupTarefasPortaCOMM+0x92>
    configASSERT(xFilaDadosGPS != NULL);
 80016ba:	4b3f      	ldr	r3, [pc, #252]	@ (80017b8 <SetupTarefasPortaCOMM+0x194>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10b      	bne.n	80016da <SetupTarefasPortaCOMM+0xb6>
	__asm volatile
 80016c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016c6:	f383 8811 	msr	BASEPRI, r3
 80016ca:	f3bf 8f6f 	isb	sy
 80016ce:	f3bf 8f4f 	dsb	sy
 80016d2:	60fb      	str	r3, [r7, #12]
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	e7fd      	b.n	80016d6 <SetupTarefasPortaCOMM+0xb2>
    configASSERT(xFilaComandos != NULL);
 80016da:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <SetupTarefasPortaCOMM+0x198>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10b      	bne.n	80016fa <SetupTarefasPortaCOMM+0xd6>
	__asm volatile
 80016e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	60bb      	str	r3, [r7, #8]
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	e7fd      	b.n	80016f6 <SetupTarefasPortaCOMM+0xd2>
    configASSERT(xFilaPacotesSerializados != NULL);
 80016fa:	4b31      	ldr	r3, [pc, #196]	@ (80017c0 <SetupTarefasPortaCOMM+0x19c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10b      	bne.n	800171a <SetupTarefasPortaCOMM+0xf6>
	__asm volatile
 8001702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001706:	f383 8811 	msr	BASEPRI, r3
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	f3bf 8f4f 	dsb	sy
 8001712:	607b      	str	r3, [r7, #4]
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	e7fd      	b.n	8001716 <SetupTarefasPortaCOMM+0xf2>

    HAL_UART_Receive_IT(&huart6, &comando_recebido, 1);
 800171a:	2201      	movs	r2, #1
 800171c:	4929      	ldr	r1, [pc, #164]	@ (80017c4 <SetupTarefasPortaCOMM+0x1a0>)
 800171e:	482a      	ldr	r0, [pc, #168]	@ (80017c8 <SetupTarefasPortaCOMM+0x1a4>)
 8001720:	f005 fbe3 	bl	8006eea <HAL_UART_Receive_IT>

    xTaskCreate(vTaskSimulaDatalogger, "Datalog", 256, NULL, 2, NULL);
 8001724:	2300      	movs	r3, #0
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2302      	movs	r3, #2
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001732:	4926      	ldr	r1, [pc, #152]	@ (80017cc <SetupTarefasPortaCOMM+0x1a8>)
 8001734:	4826      	ldr	r0, [pc, #152]	@ (80017d0 <SetupTarefasPortaCOMM+0x1ac>)
 8001736:	f007 fb23 	bl	8008d80 <xTaskCreate>
    xTaskCreate(vTaskTransmissao,     "Transmite", 256, NULL, 2, NULL);
 800173a:	2300      	movs	r3, #0
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	2302      	movs	r3, #2
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2300      	movs	r3, #0
 8001744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001748:	4922      	ldr	r1, [pc, #136]	@ (80017d4 <SetupTarefasPortaCOMM+0x1b0>)
 800174a:	4823      	ldr	r0, [pc, #140]	@ (80017d8 <SetupTarefasPortaCOMM+0x1b4>)
 800174c:	f007 fb18 	bl	8008d80 <xTaskCreate>
    xTaskCreate(vTaskRecepcao,       "Recepcao",  256, NULL, 2, &xHandleRecepcao);
 8001750:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <SetupTarefasPortaCOMM+0x1b8>)
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2302      	movs	r3, #2
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2300      	movs	r3, #0
 800175a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800175e:	4920      	ldr	r1, [pc, #128]	@ (80017e0 <SetupTarefasPortaCOMM+0x1bc>)
 8001760:	4820      	ldr	r0, [pc, #128]	@ (80017e4 <SetupTarefasPortaCOMM+0x1c0>)
 8001762:	f007 fb0d 	bl	8008d80 <xTaskCreate>
    xTaskCreate(vTaskGeraDadosMotor, "GeraMotor", 256, NULL, 2, NULL);
 8001766:	2300      	movs	r3, #0
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	2302      	movs	r3, #2
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001774:	491c      	ldr	r1, [pc, #112]	@ (80017e8 <SetupTarefasPortaCOMM+0x1c4>)
 8001776:	481d      	ldr	r0, [pc, #116]	@ (80017ec <SetupTarefasPortaCOMM+0x1c8>)
 8001778:	f007 fb02 	bl	8008d80 <xTaskCreate>
    xTaskCreate(vTaskGeraDadosVel,   "GeraVel",   256, NULL, 2, NULL);
 800177c:	2300      	movs	r3, #0
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	2302      	movs	r3, #2
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800178a:	4919      	ldr	r1, [pc, #100]	@ (80017f0 <SetupTarefasPortaCOMM+0x1cc>)
 800178c:	4819      	ldr	r0, [pc, #100]	@ (80017f4 <SetupTarefasPortaCOMM+0x1d0>)
 800178e:	f007 faf7 	bl	8008d80 <xTaskCreate>
    xTaskCreate(vTaskGeraDadosGPS,   "GeraGPS",   256, NULL, 2, NULL);
 8001792:	2300      	movs	r3, #0
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	2302      	movs	r3, #2
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017a0:	4915      	ldr	r1, [pc, #84]	@ (80017f8 <SetupTarefasPortaCOMM+0x1d4>)
 80017a2:	4816      	ldr	r0, [pc, #88]	@ (80017fc <SetupTarefasPortaCOMM+0x1d8>)
 80017a4:	f007 faec 	bl	8008d80 <xTaskCreate>
}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000350 	.word	0x20000350
 80017b4:	20000354 	.word	0x20000354
 80017b8:	20000358 	.word	0x20000358
 80017bc:	2000035c 	.word	0x2000035c
 80017c0:	20000360 	.word	0x20000360
 80017c4:	20000368 	.word	0x20000368
 80017c8:	20000304 	.word	0x20000304
 80017cc:	0800bb00 	.word	0x0800bb00
 80017d0:	080013c1 	.word	0x080013c1
 80017d4:	0800bb08 	.word	0x0800bb08
 80017d8:	08001509 	.word	0x08001509
 80017dc:	20000364 	.word	0x20000364
 80017e0:	0800bb14 	.word	0x0800bb14
 80017e4:	08001579 	.word	0x08001579
 80017e8:	0800bb20 	.word	0x0800bb20
 80017ec:	08000ec9 	.word	0x08000ec9
 80017f0:	0800bb2c 	.word	0x0800bb2c
 80017f4:	08000fe1 	.word	0x08000fe1
 80017f8:	0800bb34 	.word	0x0800bb34
 80017fc:	080011dd 	.word	0x080011dd

08001800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_MspInit+0x54>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <HAL_MspInit+0x54>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001814:	6453      	str	r3, [r2, #68]	@ 0x44
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_MspInit+0x54>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_MspInit+0x54>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <HAL_MspInit+0x54>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_MspInit+0x54>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	210f      	movs	r1, #15
 8001842:	f06f 0001 	mvn.w	r0, #1
 8001846:	f001 f861 	bl	800290c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a24      	ldr	r2, [pc, #144]	@ (8001908 <HAL_ADC_MspInit+0xb0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d141      	bne.n	80018fe <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b23      	ldr	r3, [pc, #140]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	4a22      	ldr	r2, [pc, #136]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001888:	6453      	str	r3, [r2, #68]	@ 0x44
 800188a:	4b20      	ldr	r3, [pc, #128]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a1b      	ldr	r2, [pc, #108]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a14      	ldr	r2, [pc, #80]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_ADC_MspInit+0xb4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Corrente_Motor1_ADC1_IN4_Pin|Corrente_Motor2_ADC1_IN5_Pin;
 80018ce:	2330      	movs	r3, #48	@ 0x30
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d2:	2303      	movs	r3, #3
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	480b      	ldr	r0, [pc, #44]	@ (8001910 <HAL_ADC_MspInit+0xb8>)
 80018e2:	f001 f8dd 	bl	8002aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Corrente_Motor3_ADC1_IN8_Pin|Monitor_Voltagem_Bateria_Pin;
 80018e6:	2303      	movs	r3, #3
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ea:	2303      	movs	r3, #3
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4806      	ldr	r0, [pc, #24]	@ (8001914 <HAL_ADC_MspInit+0xbc>)
 80018fa:	f001 f8d1 	bl	8002aa0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	@ 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40012000 	.word	0x40012000
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400

08001918 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	@ 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_I2C_MspInit+0xa4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d13c      	bne.n	80019b4 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_I2C_MspInit+0xa8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <HAL_I2C_MspInit+0xa8>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <HAL_I2C_MspInit+0xa8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001956:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800195a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195c:	2312      	movs	r3, #18
 800195e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001968:	2304      	movs	r3, #4
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4814      	ldr	r0, [pc, #80]	@ (80019c4 <HAL_I2C_MspInit+0xac>)
 8001974:	f001 f894 	bl	8002aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_I2C_MspInit+0xa8>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a0f      	ldr	r2, [pc, #60]	@ (80019c0 <HAL_I2C_MspInit+0xa8>)
 8001982:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <HAL_I2C_MspInit+0xa8>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2105      	movs	r1, #5
 8001998:	201f      	movs	r0, #31
 800199a:	f000 ffb7 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800199e:	201f      	movs	r0, #31
 80019a0:	f000 ffd0 	bl	8002944 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2105      	movs	r1, #5
 80019a8:	2020      	movs	r0, #32
 80019aa:	f000 ffaf 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019ae:	2020      	movs	r0, #32
 80019b0:	f000 ffc8 	bl	8002944 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	@ 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40005400 	.word	0x40005400
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020400 	.word	0x40020400

080019c8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <HAL_RTC_MspInit+0x50>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d111      	bne.n	8001a10 <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019ec:	2302      	movs	r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fcee 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001a06:	f7ff fa59 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a0a:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <HAL_RTC_MspInit+0x54>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a10:	bf00      	nop
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40002800 	.word	0x40002800
 8001a1c:	42470e3c 	.word	0x42470e3c

08001a20 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001af0 <HAL_SPI_MspInit+0xd0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d152      	bne.n	8001ae8 <HAL_SPI_MspInit+0xc8>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a23      	ldr	r2, [pc, #140]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_SPI_MspInit+0xd4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ETH_SPI1_MISO_Pin|ETH_SPI1_MOSI_Pin|ETH_SPI1_NSS_Pin;
 8001a96:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa8:	2305      	movs	r3, #5
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4811      	ldr	r0, [pc, #68]	@ (8001af8 <HAL_SPI_MspInit+0xd8>)
 8001ab4:	f000 fff4 	bl	8002aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_SPI1_SCK_Pin;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac8:	2305      	movs	r3, #5
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ETH_SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480a      	ldr	r0, [pc, #40]	@ (8001afc <HAL_SPI_MspInit+0xdc>)
 8001ad4:	f000 ffe4 	bl	8002aa0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2105      	movs	r1, #5
 8001adc:	2023      	movs	r0, #35	@ 0x23
 8001ade:	f000 ff15 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ae2:	2023      	movs	r0, #35	@ 0x23
 8001ae4:	f000 ff2e 	bl	8002944 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	@ 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40013000 	.word	0x40013000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400

08001b00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <HAL_TIM_Base_MspInit+0x48>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d115      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <HAL_TIM_Base_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	210f      	movs	r1, #15
 8001b32:	2019      	movs	r0, #25
 8001b34:	f000 feea 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b38:	2019      	movs	r0, #25
 8001b3a:	f000 ff03 	bl	8002944 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40023800 	.word	0x40023800

08001b50 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08e      	sub	sp, #56	@ 0x38
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0x14c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12c      	bne.n	8001bcc <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
 8001b76:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a49      	ldr	r2, [pc, #292]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b47      	ldr	r3, [pc, #284]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
 8001b8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	4b43      	ldr	r3, [pc, #268]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4a42      	ldr	r2, [pc, #264]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Motor2_T3_CH1_Pin|Encoder_B_Motor2_T3_CH2_Pin;
 8001baa:	2330      	movs	r3, #48	@ 0x30
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4837      	ldr	r0, [pc, #220]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x154>)
 8001bc6:	f000 ff6b 	bl	8002aa0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001bca:	e062      	b.n	8001c92 <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM4)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a35      	ldr	r2, [pc, #212]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0x158>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d12c      	bne.n	8001c30 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	4a30      	ldr	r2, [pc, #192]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_A_Motor3_T4_CH1_Pin|Encoder_B_Motor3_T4_CH2_Pin;
 8001c0e:	23c0      	movs	r3, #192	@ 0xc0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c26:	4619      	mov	r1, r3
 8001c28:	481e      	ldr	r0, [pc, #120]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0x154>)
 8001c2a:	f000 ff39 	bl	8002aa0 <HAL_GPIO_Init>
}
 8001c2e:	e030      	b.n	8001c92 <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM5)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	@ (8001cac <HAL_TIM_Encoder_MspInit+0x15c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12b      	bne.n	8001c92 <HAL_TIM_Encoder_MspInit+0x142>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0x150>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_A_Motor1_T5_CH1_Pin|Encoder_B_Motor1_T5_CH2_Pin;
 8001c72:	2303      	movs	r3, #3
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c82:	2302      	movs	r3, #2
 8001c84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4808      	ldr	r0, [pc, #32]	@ (8001cb0 <HAL_TIM_Encoder_MspInit+0x160>)
 8001c8e:	f000 ff07 	bl	8002aa0 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3738      	adds	r7, #56	@ 0x38
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a22      	ldr	r2, [pc, #136]	@ (8001d5c <HAL_TIM_MspPostInit+0xa8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d13d      	bne.n	8001d52 <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <HAL_TIM_MspPostInit+0xac>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a20      	ldr	r2, [pc, #128]	@ (8001d60 <HAL_TIM_MspPostInit+0xac>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <HAL_TIM_MspPostInit+0xac>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_TIM_MspPostInit+0xac>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a19      	ldr	r2, [pc, #100]	@ (8001d60 <HAL_TIM_MspPostInit+0xac>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <HAL_TIM_MspPostInit+0xac>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_Motor1_T1_CH1N_Pin|PWM_Motor2_T1_CH2N_Pin|PWM_Motor3_T1_CH2N_Pin;
 8001d0e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480e      	ldr	r0, [pc, #56]	@ (8001d64 <HAL_TIM_MspPostInit+0xb0>)
 8001d2c:	f000 feb8 	bl	8002aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_Motor1_T1_CH1_Pin|PWM_Motor2_T1_CH2_Pin|PWM_Motor3_T1_CH3_Pin;
 8001d30:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <HAL_TIM_MspPostInit+0xb4>)
 8001d4e:	f000 fea7 	bl	8002aa0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	@ 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020000 	.word	0x40020000

08001d6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	@ 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3a      	ldr	r2, [pc, #232]	@ (8001e74 <HAL_UART_MspInit+0x108>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d134      	bne.n	8001df8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	4b39      	ldr	r3, [pc, #228]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a38      	ldr	r2, [pc, #224]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	4b32      	ldr	r3, [pc, #200]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a31      	ldr	r2, [pc, #196]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b2f      	ldr	r3, [pc, #188]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPS_UART2_TX_Pin|GPS_UART2_RX_Pin;
 8001dc6:	230c      	movs	r3, #12
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	4826      	ldr	r0, [pc, #152]	@ (8001e7c <HAL_UART_MspInit+0x110>)
 8001de2:	f000 fe5d 	bl	8002aa0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2105      	movs	r1, #5
 8001dea:	2026      	movs	r0, #38	@ 0x26
 8001dec:	f000 fd8e 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001df0:	2026      	movs	r0, #38	@ 0x26
 8001df2:	f000 fda7 	bl	8002944 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001df6:	e039      	b.n	8001e6c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a20      	ldr	r2, [pc, #128]	@ (8001e80 <HAL_UART_MspInit+0x114>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d134      	bne.n	8001e6c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	4b1c      	ldr	r3, [pc, #112]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a14      	ldr	r2, [pc, #80]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_UART_MspInit+0x10c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IHM_UART6_TX_Pin|IHM_UART6_RX_Pin;
 8001e3a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <HAL_UART_MspInit+0x110>)
 8001e58:	f000 fe22 	bl	8002aa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2105      	movs	r1, #5
 8001e60:	2047      	movs	r0, #71	@ 0x47
 8001e62:	f000 fd53 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e66:	2047      	movs	r0, #71	@ 0x47
 8001e68:	f000 fd6c 	bl	8002944 <HAL_NVIC_EnableIRQ>
}
 8001e6c:	bf00      	nop
 8001e6e:	3730      	adds	r7, #48	@ 0x30
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40004400 	.word	0x40004400
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40011400 	.word	0x40011400

08001e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	@ 0x30
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	4b2e      	ldr	r3, [pc, #184]	@ (8001f54 <HAL_InitTick+0xd0>)
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f54 <HAL_InitTick+0xd0>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <HAL_InitTick+0xd0>)
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb0:	f107 020c 	add.w	r2, r7, #12
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fa5c 	bl	8005378 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ec0:	f003 fa46 	bl	8005350 <HAL_RCC_GetPCLK2Freq>
 8001ec4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec8:	4a23      	ldr	r2, [pc, #140]	@ (8001f58 <HAL_InitTick+0xd4>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001ed4:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <HAL_InitTick+0xd8>)
 8001ed6:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <HAL_InitTick+0xdc>)
 8001ed8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <HAL_InitTick+0xd8>)
 8001edc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f5c <HAL_InitTick+0xd8>)
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <HAL_InitTick+0xd8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <HAL_InitTick+0xd8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_InitTick+0xd8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001efa:	4818      	ldr	r0, [pc, #96]	@ (8001f5c <HAL_InitTick+0xd8>)
 8001efc:	f003 ff46 	bl	8005d8c <HAL_TIM_Base_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11b      	bne.n	8001f46 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001f0e:	4813      	ldr	r0, [pc, #76]	@ (8001f5c <HAL_InitTick+0xd8>)
 8001f10:	f003 ff8c 	bl	8005e2c <HAL_TIM_Base_Start_IT>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d111      	bne.n	8001f46 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f22:	2019      	movs	r0, #25
 8001f24:	f000 fd0e 	bl	8002944 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b0f      	cmp	r3, #15
 8001f2c:	d808      	bhi.n	8001f40 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	2019      	movs	r0, #25
 8001f34:	f000 fcea 	bl	800290c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_InitTick+0xe0>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e002      	b.n	8001f46 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3730      	adds	r7, #48	@ 0x30
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	2000036c 	.word	0x2000036c
 8001f60:	40014400 	.word	0x40014400
 8001f64:	20000004 	.word	0x20000004

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <NMI_Handler+0x4>

08001f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <MemManage_Handler+0x4>

08001f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa4:	4803      	ldr	r0, [pc, #12]	@ (8001fb4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001fa6:	f004 f8a2 	bl	80060ee <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001faa:	4803      	ldr	r0, [pc, #12]	@ (8001fb8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001fac:	f004 f89f 	bl	80060ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000019c 	.word	0x2000019c
 8001fb8:	2000036c 	.word	0x2000036c

08001fbc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <I2C1_EV_IRQHandler+0x10>)
 8001fc2:	f001 f888 	bl	80030d6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200000d0 	.word	0x200000d0

08001fd0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <I2C1_ER_IRQHandler+0x10>)
 8001fd6:	f001 f9ef 	bl	80033b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200000d0 	.word	0x200000d0

08001fe4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001fe8:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <SPI1_IRQHandler+0x10>)
 8001fea:	f003 fdb1 	bl	8005b50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000144 	.word	0x20000144

08001ff8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <USART2_IRQHandler+0x10>)
 8001ffe:	f004 ff99 	bl	8006f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200002bc 	.word	0x200002bc

0800200c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_DRDY_EXTI13_Pin);
 8002010:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002014:	f000 fee2 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <USART6_IRQHandler+0x10>)
 8002022:	f004 ff87 	bl	8006f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000304 	.word	0x20000304

08002030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return 1;
 8002034:	2301      	movs	r3, #1
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_kill>:

int _kill(int pid, int sig)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800204a:	f008 feef 	bl	800ae2c <__errno>
 800204e:	4603      	mov	r3, r0
 8002050:	2216      	movs	r2, #22
 8002052:	601a      	str	r2, [r3, #0]
  return -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_exit>:

void _exit (int status)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffe7 	bl	8002040 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002072:	bf00      	nop
 8002074:	e7fd      	b.n	8002072 <_exit+0x12>

08002076 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e00a      	b.n	800209e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002088:	f3af 8000 	nop.w
 800208c:	4601      	mov	r1, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	60ba      	str	r2, [r7, #8]
 8002094:	b2ca      	uxtb	r2, r1
 8002096:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	dbf0      	blt.n	8002088 <_read+0x12>
  }

  return len;
 80020a6:	687b      	ldr	r3, [r7, #4]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e009      	b.n	80020d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf1      	blt.n	80020c2 <_write+0x12>
  }
  return len;
 80020de:	687b      	ldr	r3, [r7, #4]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_close>:

int _close(int file)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002110:	605a      	str	r2, [r3, #4]
  return 0;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_isatty>:

int _isatty(int file)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002128:	2301      	movs	r3, #1
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f008 fe54 	bl	800ae2c <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20020000 	.word	0x20020000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	200003b4 	.word	0x200003b4
 80021b8:	20004e58 	.word	0x20004e58

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002218 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021e4:	f7ff ffea 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ea:	490d      	ldr	r1, [pc, #52]	@ (8002220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002200:	4c0a      	ldr	r4, [pc, #40]	@ (800222c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f008 fe13 	bl	800ae38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002212:	f7fe f9cb 	bl	80005ac <main>
  bx  lr    
 8002216:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002224:	0800bc80 	.word	0x0800bc80
  ldr r2, =_sbss
 8002228:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800222c:	20004e58 	.word	0x20004e58

08002230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC_IRQHandler>
	...

08002234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <HAL_Init+0x40>)
 800223e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_Init+0x40>)
 800224a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800224e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_Init+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_Init+0x40>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 fb4a 	bl	80028f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	200f      	movs	r0, #15
 8002264:	f7ff fe0e 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff faca 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00

08002278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000008 	.word	0x20000008
 800229c:	200003b8 	.word	0x200003b8

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200003b8 	.word	0x200003b8

080022b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e033      	b.n	8002336 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fabe 	bl	8001858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022fe:	f023 0302 	bic.w	r3, r3, #2
 8002302:	f043 0202 	orr.w	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f94a 	bl	80025a4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40
 8002326:	e001      	b.n	800232c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1c>
 8002358:	2302      	movs	r3, #2
 800235a:	e113      	b.n	8002584 <HAL_ADC_ConfigChannel+0x244>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b09      	cmp	r3, #9
 800236a:	d925      	bls.n	80023b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	3b1e      	subs	r3, #30
 8002382:	2207      	movs	r2, #7
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43da      	mvns	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	400a      	ands	r2, r1
 8002390:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68d9      	ldr	r1, [r3, #12]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	4603      	mov	r3, r0
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4403      	add	r3, r0
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	409a      	lsls	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e022      	b.n	80023fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	2207      	movs	r2, #7
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4403      	add	r3, r0
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d824      	bhi.n	8002450 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b05      	subs	r3, #5
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b05      	subs	r3, #5
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	@ 0x34
 800244e:	e04c      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d824      	bhi.n	80024a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b23      	subs	r3, #35	@ 0x23
 800246a:	221f      	movs	r2, #31
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b23      	subs	r3, #35	@ 0x23
 8002494:	fa00 f203 	lsl.w	r2, r0, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a0:	e023      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3b41      	subs	r3, #65	@ 0x41
 80024b4:	221f      	movs	r2, #31
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b41      	subs	r3, #65	@ 0x41
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ea:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <HAL_ADC_ConfigChannel+0x250>)
 80024ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a28      	ldr	r2, [pc, #160]	@ (8002594 <HAL_ADC_ConfigChannel+0x254>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d10f      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1d8>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b12      	cmp	r3, #18
 80024fe:	d10b      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1d      	ldr	r2, [pc, #116]	@ (8002594 <HAL_ADC_ConfigChannel+0x254>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12b      	bne.n	800257a <HAL_ADC_ConfigChannel+0x23a>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_ADC_ConfigChannel+0x258>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d003      	beq.n	8002534 <HAL_ADC_ConfigChannel+0x1f4>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b11      	cmp	r3, #17
 8002532:	d122      	bne.n	800257a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_ADC_ConfigChannel+0x258>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d111      	bne.n	800257a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002556:	4b11      	ldr	r3, [pc, #68]	@ (800259c <HAL_ADC_ConfigChannel+0x25c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a11      	ldr	r2, [pc, #68]	@ (80025a0 <HAL_ADC_ConfigChannel+0x260>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	0c9a      	lsrs	r2, r3, #18
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800256c:	e002      	b.n	8002574 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3b01      	subs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f9      	bne.n	800256e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40012300 	.word	0x40012300
 8002594:	40012000 	.word	0x40012000
 8002598:	10000012 	.word	0x10000012
 800259c:	20000000 	.word	0x20000000
 80025a0:	431bde83 	.word	0x431bde83

080025a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ac:	4b79      	ldr	r3, [pc, #484]	@ (8002794 <ADC_Init+0x1f0>)
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	021a      	lsls	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800261e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002636:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <ADC_Init+0x1f4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d022      	beq.n	8002682 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800264a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800266c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	e00f      	b.n	80026a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0202 	bic.w	r2, r2, #2
 80026b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6899      	ldr	r1, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e1b      	ldrb	r3, [r3, #24]
 80026bc:	005a      	lsls	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01b      	beq.n	8002708 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026de:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	3b01      	subs	r3, #1
 80026fc:	035a      	lsls	r2, r3, #13
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	e007      	b.n	8002718 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002716:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	3b01      	subs	r3, #1
 8002734:	051a      	lsls	r2, r3, #20
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800274c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800275a:	025a      	lsls	r2, r3, #9
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	029a      	lsls	r2, r3, #10
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40012300 	.word	0x40012300
 8002798:	0f000001 	.word	0x0f000001

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	@ (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	@ (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	@ (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	@ 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff4c 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800291e:	f7ff ff61 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002922:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	6978      	ldr	r0, [r7, #20]
 800292a:	f7ff ffb1 	bl	8002890 <NVIC_EncodePriority>
 800292e:	4602      	mov	r2, r0
 8002930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff80 	bl	800283c <__NVIC_SetPriority>
}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff54 	bl	8002800 <__NVIC_EnableIRQ>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800296e:	f7ff fc97 	bl	80022a0 <HAL_GetTick>
 8002972:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d008      	beq.n	8002992 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2280      	movs	r2, #128	@ 0x80
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e052      	b.n	8002a38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0216 	bic.w	r2, r2, #22
 80029a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <HAL_DMA_Abort+0x62>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0208 	bic.w	r2, r2, #8
 80029d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e2:	e013      	b.n	8002a0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029e4:	f7ff fc5c 	bl	80022a0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d90c      	bls.n	8002a0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2203      	movs	r2, #3
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e015      	b.n	8002a38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e4      	bne.n	80029e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	223f      	movs	r2, #63	@ 0x3f
 8002a20:	409a      	lsls	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2280      	movs	r2, #128	@ 0x80
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e00c      	b.n	8002a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2205      	movs	r2, #5
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a92:	b2db      	uxtb	r3, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	@ 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e159      	b.n	8002d70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	f040 8148 	bne.w	8002d6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d005      	beq.n	8002af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d130      	bne.n	8002b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 0201 	and.w	r2, r3, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d017      	beq.n	8002b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d123      	bne.n	8002be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	08da      	lsrs	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3208      	adds	r2, #8
 8002bde:	69b9      	ldr	r1, [r7, #24]
 8002be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0203 	and.w	r2, r3, #3
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a2 	beq.w	8002d6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b57      	ldr	r3, [pc, #348]	@ (8002d88 <HAL_GPIO_Init+0x2e8>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	4a56      	ldr	r2, [pc, #344]	@ (8002d88 <HAL_GPIO_Init+0x2e8>)
 8002c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c36:	4b54      	ldr	r3, [pc, #336]	@ (8002d88 <HAL_GPIO_Init+0x2e8>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c42:	4a52      	ldr	r2, [pc, #328]	@ (8002d8c <HAL_GPIO_Init+0x2ec>)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	3302      	adds	r3, #2
 8002c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	220f      	movs	r2, #15
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a49      	ldr	r2, [pc, #292]	@ (8002d90 <HAL_GPIO_Init+0x2f0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d019      	beq.n	8002ca2 <HAL_GPIO_Init+0x202>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a48      	ldr	r2, [pc, #288]	@ (8002d94 <HAL_GPIO_Init+0x2f4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_GPIO_Init+0x1fe>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a47      	ldr	r2, [pc, #284]	@ (8002d98 <HAL_GPIO_Init+0x2f8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00d      	beq.n	8002c9a <HAL_GPIO_Init+0x1fa>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a46      	ldr	r2, [pc, #280]	@ (8002d9c <HAL_GPIO_Init+0x2fc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <HAL_GPIO_Init+0x1f6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a45      	ldr	r2, [pc, #276]	@ (8002da0 <HAL_GPIO_Init+0x300>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_GPIO_Init+0x1f2>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e008      	b.n	8002ca4 <HAL_GPIO_Init+0x204>
 8002c92:	2307      	movs	r3, #7
 8002c94:	e006      	b.n	8002ca4 <HAL_GPIO_Init+0x204>
 8002c96:	2303      	movs	r3, #3
 8002c98:	e004      	b.n	8002ca4 <HAL_GPIO_Init+0x204>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e002      	b.n	8002ca4 <HAL_GPIO_Init+0x204>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_GPIO_Init+0x204>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	f002 0203 	and.w	r2, r2, #3
 8002caa:	0092      	lsls	r2, r2, #2
 8002cac:	4093      	lsls	r3, r2
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb4:	4935      	ldr	r1, [pc, #212]	@ (8002d8c <HAL_GPIO_Init+0x2ec>)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	3302      	adds	r3, #2
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc2:	4b38      	ldr	r3, [pc, #224]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cec:	4b2d      	ldr	r3, [pc, #180]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d10:	4a24      	ldr	r2, [pc, #144]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d16:	4b23      	ldr	r3, [pc, #140]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d40:	4b18      	ldr	r3, [pc, #96]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d64:	4a0f      	ldr	r2, [pc, #60]	@ (8002da4 <HAL_GPIO_Init+0x304>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b0f      	cmp	r3, #15
 8002d74:	f67f aea2 	bls.w	8002abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bf00      	nop
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40013800 	.word	0x40013800
 8002d90:	40020000 	.word	0x40020000
 8002d94:	40020400 	.word	0x40020400
 8002d98:	40020800 	.word	0x40020800
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002de6:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002df2:	4a05      	ldr	r2, [pc, #20]	@ (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f806 	bl	8002e0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e12b      	b.n	800308e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fd64 	bl	8001918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	@ 0x24
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e88:	f002 fa4e 	bl	8005328 <HAL_RCC_GetPCLK1Freq>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a81      	ldr	r2, [pc, #516]	@ (8003098 <HAL_I2C_Init+0x274>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d807      	bhi.n	8002ea8 <HAL_I2C_Init+0x84>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a80      	ldr	r2, [pc, #512]	@ (800309c <HAL_I2C_Init+0x278>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bf94      	ite	ls
 8002ea0:	2301      	movls	r3, #1
 8002ea2:	2300      	movhi	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e006      	b.n	8002eb6 <HAL_I2C_Init+0x92>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a7d      	ldr	r2, [pc, #500]	@ (80030a0 <HAL_I2C_Init+0x27c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0e7      	b.n	800308e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a78      	ldr	r2, [pc, #480]	@ (80030a4 <HAL_I2C_Init+0x280>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	0c9b      	lsrs	r3, r3, #18
 8002ec8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a6a      	ldr	r2, [pc, #424]	@ (8003098 <HAL_I2C_Init+0x274>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d802      	bhi.n	8002ef8 <HAL_I2C_Init+0xd4>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	e009      	b.n	8002f0c <HAL_I2C_Init+0xe8>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	4a69      	ldr	r2, [pc, #420]	@ (80030a8 <HAL_I2C_Init+0x284>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	495c      	ldr	r1, [pc, #368]	@ (8003098 <HAL_I2C_Init+0x274>)
 8002f28:	428b      	cmp	r3, r1
 8002f2a:	d819      	bhi.n	8002f60 <HAL_I2C_Init+0x13c>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e59      	subs	r1, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f3a:	1c59      	adds	r1, r3, #1
 8002f3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f40:	400b      	ands	r3, r1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_I2C_Init+0x138>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1e59      	subs	r1, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5a:	e051      	b.n	8003000 <HAL_I2C_Init+0x1dc>
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	e04f      	b.n	8003000 <HAL_I2C_Init+0x1dc>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <HAL_I2C_Init+0x168>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e58      	subs	r0, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e012      	b.n	8002fb2 <HAL_I2C_Init+0x18e>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e58      	subs	r0, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	0099      	lsls	r1, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Init+0x196>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e022      	b.n	8003000 <HAL_I2C_Init+0x1dc>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_I2C_Init+0x1bc>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e58      	subs	r0, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	440b      	add	r3, r1
 8002fd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fde:	e00f      	b.n	8003000 <HAL_I2C_Init+0x1dc>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e58      	subs	r0, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	0099      	lsls	r1, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	6809      	ldr	r1, [r1, #0]
 8003004:	4313      	orrs	r3, r2
 8003006:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800302e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6911      	ldr	r1, [r2, #16]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68d2      	ldr	r2, [r2, #12]
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	430b      	orrs	r3, r1
 8003042:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	000186a0 	.word	0x000186a0
 800309c:	001e847f 	.word	0x001e847f
 80030a0:	003d08ff 	.word	0x003d08ff
 80030a4:	431bde83 	.word	0x431bde83
 80030a8:	10624dd3 	.word	0x10624dd3

080030ac <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030be:	2b80      	cmp	r3, #128	@ 0x80
 80030c0:	d103      	bne.n	80030ca <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b088      	sub	sp, #32
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fe:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b10      	cmp	r3, #16
 8003104:	d003      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0x38>
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b40      	cmp	r3, #64	@ 0x40
 800310a:	f040 80c1 	bne.w	8003290 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10d      	bne.n	8003144 <HAL_I2C_EV_IRQHandler+0x6e>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800312e:	d003      	beq.n	8003138 <HAL_I2C_EV_IRQHandler+0x62>
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003136:	d101      	bne.n	800313c <HAL_I2C_EV_IRQHandler+0x66>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_I2C_EV_IRQHandler+0x68>
 800313c:	2300      	movs	r3, #0
 800313e:	2b01      	cmp	r3, #1
 8003140:	f000 8132 	beq.w	80033a8 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x92>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	0a5b      	lsrs	r3, r3, #9
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f001 fc98 	bl	8004a90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fd9b 	bl	8003c9c <I2C_Master_SB>
 8003166:	e092      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	08db      	lsrs	r3, r3, #3
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d009      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0xb2>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	0a5b      	lsrs	r3, r3, #9
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fe11 	bl	8003da8 <I2C_Master_ADD10>
 8003186:	e082      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_I2C_EV_IRQHandler+0xd2>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	0a5b      	lsrs	r3, r3, #9
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fe2b 	bl	8003dfc <I2C_Master_ADDR>
 80031a6:	e072      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d03b      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031c2:	f000 80f3 	beq.w	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	09db      	lsrs	r3, r3, #7
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00f      	beq.n	80031f2 <HAL_I2C_EV_IRQHandler+0x11c>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	0a9b      	lsrs	r3, r3, #10
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_I2C_EV_IRQHandler+0x11c>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9f3 	bl	80035d6 <I2C_MasterTransmit_TXE>
 80031f0:	e04d      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80d6 	beq.w	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	0a5b      	lsrs	r3, r3, #9
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80cf 	beq.w	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800320e:	7bbb      	ldrb	r3, [r7, #14]
 8003210:	2b21      	cmp	r3, #33	@ 0x21
 8003212:	d103      	bne.n	800321c <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa7a 	bl	800370e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321a:	e0c7      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b40      	cmp	r3, #64	@ 0x40
 8003220:	f040 80c4 	bne.w	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fae8 	bl	80037fa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322a:	e0bf      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003236:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800323a:	f000 80b7 	beq.w	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00f      	beq.n	800326a <HAL_I2C_EV_IRQHandler+0x194>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	0a9b      	lsrs	r3, r3, #10
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_I2C_EV_IRQHandler+0x194>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fb61 	bl	800392a <I2C_MasterReceive_RXNE>
 8003268:	e011      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 809a 	beq.w	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8093 	beq.w	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fc17 	bl	8003aba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328c:	e08e      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
 800328e:	e08d      	b.n	80033ac <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e007      	b.n	80032b2 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_I2C_EV_IRQHandler+0x20e>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	0a5b      	lsrs	r3, r3, #9
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 ffdc 	bl	800429a <I2C_Slave_ADDR>
 80032e2:	e066      	b.n	80033b2 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_I2C_EV_IRQHandler+0x22e>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	0a5b      	lsrs	r3, r3, #9
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f001 f817 	bl	8004330 <I2C_Slave_STOPF>
 8003302:	e056      	b.n	80033b2 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003304:	7bbb      	ldrb	r3, [r7, #14]
 8003306:	2b21      	cmp	r3, #33	@ 0x21
 8003308:	d002      	beq.n	8003310 <HAL_I2C_EV_IRQHandler+0x23a>
 800330a:	7bbb      	ldrb	r3, [r7, #14]
 800330c:	2b29      	cmp	r3, #41	@ 0x29
 800330e:	d125      	bne.n	800335c <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	09db      	lsrs	r3, r3, #7
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00f      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x266>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x266>
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fef2 	bl	800411e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800333a:	e039      	b.n	80033b0 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d033      	beq.n	80033b0 <HAL_I2C_EV_IRQHandler+0x2da>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02d      	beq.n	80033b0 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 ff1f 	bl	8004198 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800335a:	e029      	b.n	80033b0 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00f      	beq.n	8003388 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	0a9b      	lsrs	r3, r3, #10
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 ff2a 	bl	80041da <I2C_SlaveReceive_RXNE>
 8003386:	e014      	b.n	80033b2 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	089b      	lsrs	r3, r3, #2
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00e      	beq.n	80033b2 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	0a5b      	lsrs	r3, r3, #9
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 ff58 	bl	8004256 <I2C_SlaveReceive_BTF>
 80033a6:	e004      	b.n	80033b2 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80033a8:	bf00      	nop
 80033aa:	e002      	b.n	80033b2 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033b0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	@ 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033da:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <HAL_I2C_ER_IRQHandler+0x4e>
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003404:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	0a5b      	lsrs	r3, r3, #9
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00e      	beq.n	8003430 <HAL_I2C_ER_IRQHandler+0x78>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800342e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	0a9b      	lsrs	r3, r3, #10
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d03f      	beq.n	80034bc <HAL_I2C_ER_IRQHandler+0x104>
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d039      	beq.n	80034bc <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003448:	7efb      	ldrb	r3, [r7, #27]
 800344a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003462:	7ebb      	ldrb	r3, [r7, #26]
 8003464:	2b20      	cmp	r3, #32
 8003466:	d112      	bne.n	800348e <HAL_I2C_ER_IRQHandler+0xd6>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <HAL_I2C_ER_IRQHandler+0xd6>
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	2b21      	cmp	r3, #33	@ 0x21
 8003472:	d008      	beq.n	8003486 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	2b29      	cmp	r3, #41	@ 0x29
 8003478:	d005      	beq.n	8003486 <HAL_I2C_ER_IRQHandler+0xce>
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b28      	cmp	r3, #40	@ 0x28
 800347e:	d106      	bne.n	800348e <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b21      	cmp	r3, #33	@ 0x21
 8003484:	d103      	bne.n	800348e <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f001 f882 	bl	8004590 <I2C_Slave_AF>
 800348c:	e016      	b.n	80034bc <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003496:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034a0:	7efb      	ldrb	r3, [r7, #27]
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d002      	beq.n	80034ac <HAL_I2C_ER_IRQHandler+0xf4>
 80034a6:	7efb      	ldrb	r3, [r7, #27]
 80034a8:	2b40      	cmp	r3, #64	@ 0x40
 80034aa:	d107      	bne.n	80034bc <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ba:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	0adb      	lsrs	r3, r3, #11
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00e      	beq.n	80034e6 <HAL_I2C_ER_IRQHandler+0x12e>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	f043 0308 	orr.w	r3, r3, #8
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80034e4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f001 f8bd 	bl	8004678 <I2C_ITError>
  }
}
 80034fe:	bf00      	nop
 8003500:	3728      	adds	r7, #40	@ 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	460b      	mov	r3, r1
 8003560:	70fb      	strb	r3, [r7, #3]
 8003562:	4613      	mov	r3, r2
 8003564:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ec:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d150      	bne.n	800369e <I2C_MasterTransmit_TXE+0xc8>
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b21      	cmp	r3, #33	@ 0x21
 8003600:	d14d      	bne.n	800369e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d01d      	beq.n	8003644 <I2C_MasterTransmit_TXE+0x6e>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b20      	cmp	r3, #32
 800360c:	d01a      	beq.n	8003644 <I2C_MasterTransmit_TXE+0x6e>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003614:	d016      	beq.n	8003644 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003624:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2211      	movs	r2, #17
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff62 	bl	8003506 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003642:	e060      	b.n	8003706 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003652:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003662:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	d107      	bne.n	800368e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ff7d 	bl	8003586 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800368c:	e03b      	b.n	8003706 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ff35 	bl	8003506 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800369c:	e033      	b.n	8003706 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b21      	cmp	r3, #33	@ 0x21
 80036a2:	d005      	beq.n	80036b0 <I2C_MasterTransmit_TXE+0xda>
 80036a4:	7bbb      	ldrb	r3, [r7, #14]
 80036a6:	2b40      	cmp	r3, #64	@ 0x40
 80036a8:	d12d      	bne.n	8003706 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b22      	cmp	r3, #34	@ 0x22
 80036ae:	d12a      	bne.n	8003706 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d108      	bne.n	80036cc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036ca:	e01c      	b.n	8003706 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d103      	bne.n	80036e0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f88e 	bl	80037fa <I2C_MemoryTransmit_TXE_BTF>
}
 80036de:	e012      	b.n	8003706 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003704:	e7ff      	b.n	8003706 <I2C_MasterTransmit_TXE+0x130>
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b21      	cmp	r3, #33	@ 0x21
 8003726:	d164      	bne.n	80037f2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d012      	beq.n	8003758 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	781a      	ldrb	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003756:	e04c      	b.n	80037f2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b08      	cmp	r3, #8
 800375c:	d01d      	beq.n	800379a <I2C_MasterTransmit_BTF+0x8c>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b20      	cmp	r3, #32
 8003762:	d01a      	beq.n	800379a <I2C_MasterTransmit_BTF+0x8c>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800376a:	d016      	beq.n	800379a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800377a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2211      	movs	r2, #17
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff feb7 	bl	8003506 <HAL_I2C_MasterTxCpltCallback>
}
 8003798:	e02b      	b.n	80037f2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037a8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b40      	cmp	r3, #64	@ 0x40
 80037d2:	d107      	bne.n	80037e4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fed2 	bl	8003586 <HAL_I2C_MemTxCpltCallback>
}
 80037e2:	e006      	b.n	80037f2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff fe8a 	bl	8003506 <HAL_I2C_MasterTxCpltCallback>
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003808:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d11d      	bne.n	800384e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10b      	bne.n	8003832 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381e:	b2da      	uxtb	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382a:	1c9a      	adds	r2, r3, #2
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003830:	e077      	b.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003836:	b29b      	uxth	r3, r3
 8003838:	121b      	asrs	r3, r3, #8
 800383a:	b2da      	uxtb	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800384c:	e069      	b.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003852:	2b01      	cmp	r3, #1
 8003854:	d10b      	bne.n	800386e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385a:	b2da      	uxtb	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800386c:	e059      	b.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003872:	2b02      	cmp	r3, #2
 8003874:	d152      	bne.n	800391c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b22      	cmp	r3, #34	@ 0x22
 800387a:	d10d      	bne.n	8003898 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800388a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003896:	e044      	b.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d015      	beq.n	80038ce <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b21      	cmp	r3, #33	@ 0x21
 80038a6:	d112      	bne.n	80038ce <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038cc:	e029      	b.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d124      	bne.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b21      	cmp	r3, #33	@ 0x21
 80038dc:	d121      	bne.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ec:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fe36 	bl	8003586 <HAL_I2C_MemTxCpltCallback>
}
 800391a:	e002      	b.n	8003922 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fbc5 	bl	80030ac <I2C_Flush_DR>
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b22      	cmp	r3, #34	@ 0x22
 800393c:	f040 80b9 	bne.w	8003ab2 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d921      	bls.n	8003998 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b03      	cmp	r3, #3
 8003982:	f040 8096 	bne.w	8003ab2 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003994:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003996:	e08c      	b.n	8003ab2 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	2b02      	cmp	r3, #2
 800399e:	d07f      	beq.n	8003aa0 <I2C_MasterReceive_RXNE+0x176>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d002      	beq.n	80039ac <I2C_MasterReceive_RXNE+0x82>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d179      	bne.n	8003aa0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f001 f83d 	bl	8004a2c <I2C_WaitOnSTOPRequestThroughIT>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d14c      	bne.n	8003a52 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b40      	cmp	r3, #64	@ 0x40
 8003a10:	d10a      	bne.n	8003a28 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fdba 	bl	800359a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a26:	e044      	b.n	8003ab2 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d002      	beq.n	8003a3c <I2C_MasterReceive_RXNE+0x112>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d103      	bne.n	8003a44 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a42:	e002      	b.n	8003a4a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2212      	movs	r2, #18
 8003a48:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fd65 	bl	800351a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a50:	e02f      	b.n	8003ab2 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a60:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd88 	bl	80035ae <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a9e:	e008      	b.n	8003ab2 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aae:	605a      	str	r2, [r3, #4]
}
 8003ab0:	e7ff      	b.n	8003ab2 <I2C_MasterReceive_RXNE+0x188>
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d11b      	bne.n	8003b0a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b08:	e0c4      	b.n	8003c94 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d129      	bne.n	8003b68 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b22:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d00a      	beq.n	8003b40 <I2C_MasterReceive_BTF+0x86>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d007      	beq.n	8003b40 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b66:	e095      	b.n	8003c94 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d17d      	bne.n	8003c6e <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d002      	beq.n	8003b7e <I2C_MasterReceive_BTF+0xc4>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d108      	bne.n	8003b90 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e016      	b.n	8003bbe <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d002      	beq.n	8003b9c <I2C_MasterReceive_BTF+0xe2>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d108      	bne.n	8003bae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e007      	b.n	8003bbe <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bbc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c18:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b40      	cmp	r3, #64	@ 0x40
 8003c2c:	d10a      	bne.n	8003c44 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fcac 	bl	800359a <HAL_I2C_MemRxCpltCallback>
}
 8003c42:	e027      	b.n	8003c94 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d002      	beq.n	8003c58 <I2C_MasterReceive_BTF+0x19e>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d103      	bne.n	8003c60 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c5e:	e002      	b.n	8003c66 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2212      	movs	r2, #18
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fc57 	bl	800351a <HAL_I2C_MasterRxCpltCallback>
}
 8003c6c:	e012      	b.n	8003c94 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b40      	cmp	r3, #64	@ 0x40
 8003cae:	d117      	bne.n	8003ce0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cc8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003cca:	e067      	b.n	8003d9c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]
}
 8003cde:	e05d      	b.n	8003d9c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ce8:	d133      	bne.n	8003d52 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b21      	cmp	r3, #33	@ 0x21
 8003cf4:	d109      	bne.n	8003d0a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d06:	611a      	str	r2, [r3, #16]
 8003d08:	e008      	b.n	8003d1c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <I2C_Master_SB+0x92>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d032      	beq.n	8003d9c <I2C_Master_SB+0x100>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d02d      	beq.n	8003d9c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4e:	605a      	str	r2, [r3, #4]
}
 8003d50:	e024      	b.n	8003d9c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10e      	bne.n	8003d78 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	11db      	asrs	r3, r3, #7
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 0306 	and.w	r3, r3, #6
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f063 030f 	orn	r3, r3, #15
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]
}
 8003d76:	e011      	b.n	8003d9c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10d      	bne.n	8003d9c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	11db      	asrs	r3, r3, #7
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 0306 	and.w	r3, r3, #6
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f063 030e 	orn	r3, r3, #14
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	611a      	str	r2, [r3, #16]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <I2C_Master_ADD10+0x26>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00c      	beq.n	8003df0 <I2C_Master_ADD10+0x48>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dee:	605a      	str	r2, [r3, #4]
  }
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b091      	sub	sp, #68	@ 0x44
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e0a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e18:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b22      	cmp	r3, #34	@ 0x22
 8003e24:	f040 8169 	bne.w	80040fa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10f      	bne.n	8003e50 <I2C_Master_ADDR+0x54>
 8003e30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003e34:	2b40      	cmp	r3, #64	@ 0x40
 8003e36:	d10b      	bne.n	8003e50 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4e:	e160      	b.n	8004112 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11d      	bne.n	8003e94 <I2C_Master_ADDR+0x98>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e60:	d118      	bne.n	8003e94 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e86:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e92:	e13e      	b.n	8004112 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d113      	bne.n	8003ec6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e115      	b.n	80040f2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	f040 808a 	bne.w	8003fe6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ed8:	d137      	bne.n	8003f4a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef8:	d113      	bne.n	8003f22 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f08:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	e0e7      	b.n	80040f2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f22:	2300      	movs	r3, #0
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	623b      	str	r3, [r7, #32]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e0d3      	b.n	80040f2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d02e      	beq.n	8003fae <I2C_Master_ADDR+0x1b2>
 8003f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d02b      	beq.n	8003fae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f58:	2b12      	cmp	r3, #18
 8003f5a:	d102      	bne.n	8003f62 <I2C_Master_ADDR+0x166>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d125      	bne.n	8003fae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d00e      	beq.n	8003f86 <I2C_Master_ADDR+0x18a>
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d00b      	beq.n	8003f86 <I2C_Master_ADDR+0x18a>
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d008      	beq.n	8003f86 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	e007      	b.n	8003f96 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f94:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	e0a1      	b.n	80040f2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e085      	b.n	80040f2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d14d      	bne.n	800408c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d016      	beq.n	8004024 <I2C_Master_ADDR+0x228>
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d013      	beq.n	8004024 <I2C_Master_ADDR+0x228>
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d010      	beq.n	8004024 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004010:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e007      	b.n	8004034 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004032:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004042:	d117      	bne.n	8004074 <I2C_Master_ADDR+0x278>
 8004044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004046:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800404a:	d00b      	beq.n	8004064 <I2C_Master_ADDR+0x268>
 800404c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404e:	2b01      	cmp	r3, #1
 8004050:	d008      	beq.n	8004064 <I2C_Master_ADDR+0x268>
 8004052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004054:	2b08      	cmp	r3, #8
 8004056:	d005      	beq.n	8004064 <I2C_Master_ADDR+0x268>
 8004058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405a:	2b10      	cmp	r3, #16
 800405c:	d002      	beq.n	8004064 <I2C_Master_ADDR+0x268>
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	2b20      	cmp	r3, #32
 8004062:	d107      	bne.n	8004074 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004072:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	e032      	b.n	80040f2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800409a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040aa:	d117      	bne.n	80040dc <I2C_Master_ADDR+0x2e0>
 80040ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040b2:	d00b      	beq.n	80040cc <I2C_Master_ADDR+0x2d0>
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d008      	beq.n	80040cc <I2C_Master_ADDR+0x2d0>
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d005      	beq.n	80040cc <I2C_Master_ADDR+0x2d0>
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d002      	beq.n	80040cc <I2C_Master_ADDR+0x2d0>
 80040c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d107      	bne.n	80040dc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80040f8:	e00b      	b.n	8004112 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	e7ff      	b.n	8004112 <I2C_Master_ADDR+0x316>
 8004112:	bf00      	nop
 8004114:	3744      	adds	r7, #68	@ 0x44
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02b      	beq.n	8004190 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d114      	bne.n	8004190 <I2C_SlaveTransmit_TXE+0x72>
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b29      	cmp	r3, #41	@ 0x29
 800416a:	d111      	bne.n	8004190 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2221      	movs	r2, #33	@ 0x21
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2228      	movs	r2, #40	@ 0x28
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff f9cf 	bl	800352e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d011      	beq.n	80041ce <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	781a      	ldrb	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02c      	beq.n	800424e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d114      	bne.n	800424e <I2C_SlaveReceive_RXNE+0x74>
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b2a      	cmp	r3, #42	@ 0x2a
 8004228:	d111      	bne.n	800424e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004238:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2222      	movs	r2, #34	@ 0x22
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2228      	movs	r2, #40	@ 0x28
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff f97a 	bl	8003542 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042b4:	2b28      	cmp	r3, #40	@ 0x28
 80042b6:	d127      	bne.n	8004308 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	09db      	lsrs	r3, r3, #7
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	81bb      	strh	r3, [r7, #12]
 80042ea:	e002      	b.n	80042f2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042fa:	89ba      	ldrh	r2, [r7, #12]
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	4619      	mov	r1, r3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff f928 	bl	8003556 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004306:	e00e      	b.n	8004326 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800434e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438c:	d172      	bne.n	8004474 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b22      	cmp	r3, #34	@ 0x22
 8004392:	d002      	beq.n	800439a <I2C_Slave_STOPF+0x6a>
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b2a      	cmp	r3, #42	@ 0x2a
 8004398:	d135      	bne.n	8004406 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	f043 0204 	orr.w	r2, r3, #4
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe fb56 	bl	8002a84 <HAL_DMA_GetState>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d049      	beq.n	8004472 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e2:	4a69      	ldr	r2, [pc, #420]	@ (8004588 <I2C_Slave_STOPF+0x258>)
 80043e4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fb28 	bl	8002a40 <HAL_DMA_Abort_IT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d03d      	beq.n	8004472 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004400:	4610      	mov	r0, r2
 8004402:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004404:	e035      	b.n	8004472 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004438:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe fb20 	bl	8002a84 <HAL_DMA_GetState>
 8004444:	4603      	mov	r3, r0
 8004446:	2b01      	cmp	r3, #1
 8004448:	d014      	beq.n	8004474 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444e:	4a4e      	ldr	r2, [pc, #312]	@ (8004588 <I2C_Slave_STOPF+0x258>)
 8004450:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe faf2 	bl	8002a40 <HAL_DMA_Abort_IT>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800446c:	4610      	mov	r0, r2
 800446e:	4798      	blx	r3
 8004470:	e000      	b.n	8004474 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004472:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03e      	beq.n	80044fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d112      	bne.n	80044b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d112      	bne.n	80044e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	f043 0204 	orr.w	r2, r3, #4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8b7 	bl	8004678 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800450a:	e039      	b.n	8004580 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004510:	d109      	bne.n	8004526 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2228      	movs	r2, #40	@ 0x28
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff f80e 	bl	8003542 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b28      	cmp	r3, #40	@ 0x28
 8004530:	d111      	bne.n	8004556 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a15      	ldr	r2, [pc, #84]	@ (800458c <I2C_Slave_STOPF+0x25c>)
 8004536:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff f80f 	bl	8003572 <HAL_I2C_ListenCpltCallback>
}
 8004554:	e014      	b.n	8004580 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	2b22      	cmp	r3, #34	@ 0x22
 800455c:	d002      	beq.n	8004564 <I2C_Slave_STOPF+0x234>
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b22      	cmp	r3, #34	@ 0x22
 8004562:	d10d      	bne.n	8004580 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fe ffe1 	bl	8003542 <HAL_I2C_SlaveRxCpltCallback>
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	080048dd 	.word	0x080048dd
 800458c:	ffff0000 	.word	0xffff0000

08004590 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800459e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d002      	beq.n	80045b2 <I2C_Slave_AF+0x22>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d129      	bne.n	8004606 <I2C_Slave_AF+0x76>
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b28      	cmp	r3, #40	@ 0x28
 80045b6:	d126      	bne.n	8004606 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004674 <I2C_Slave_AF+0xe4>)
 80045bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fe ffb7 	bl	8003572 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004604:	e031      	b.n	800466a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b21      	cmp	r3, #33	@ 0x21
 800460a:	d129      	bne.n	8004660 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a19      	ldr	r2, [pc, #100]	@ (8004674 <I2C_Slave_AF+0xe4>)
 8004610:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2221      	movs	r2, #33	@ 0x21
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004636:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004640:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004650:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fe fd2a 	bl	80030ac <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7fe ff68 	bl	800352e <HAL_I2C_SlaveTxCpltCallback>
}
 800465e:	e004      	b.n	800466a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004668:	615a      	str	r2, [r3, #20]
}
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	ffff0000 	.word	0xffff0000

08004678 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004686:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800468e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004690:	7bbb      	ldrb	r3, [r7, #14]
 8004692:	2b10      	cmp	r3, #16
 8004694:	d002      	beq.n	800469c <I2C_ITError+0x24>
 8004696:	7bbb      	ldrb	r3, [r7, #14]
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d10a      	bne.n	80046b2 <I2C_ITError+0x3a>
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b22      	cmp	r3, #34	@ 0x22
 80046a0:	d107      	bne.n	80046b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046b8:	2b28      	cmp	r3, #40	@ 0x28
 80046ba:	d107      	bne.n	80046cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2228      	movs	r2, #40	@ 0x28
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046ca:	e015      	b.n	80046f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046da:	d00a      	beq.n	80046f2 <I2C_ITError+0x7a>
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b60      	cmp	r3, #96	@ 0x60
 80046e0:	d007      	beq.n	80046f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004706:	d162      	bne.n	80047ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004716:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d020      	beq.n	8004768 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800472a:	4a6a      	ldr	r2, [pc, #424]	@ (80048d4 <I2C_ITError+0x25c>)
 800472c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe f984 	bl	8002a40 <HAL_DMA_Abort_IT>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8089 	beq.w	8004852 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004762:	4610      	mov	r0, r2
 8004764:	4798      	blx	r3
 8004766:	e074      	b.n	8004852 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	4a59      	ldr	r2, [pc, #356]	@ (80048d4 <I2C_ITError+0x25c>)
 800476e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe f963 	bl	8002a40 <HAL_DMA_Abort_IT>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d068      	beq.n	8004852 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478a:	2b40      	cmp	r3, #64	@ 0x40
 800478c:	d10b      	bne.n	80047a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
 80047cc:	e041      	b.n	8004852 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b60      	cmp	r3, #96	@ 0x60
 80047d8:	d125      	bne.n	8004826 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f2:	2b40      	cmp	r3, #64	@ 0x40
 80047f4:	d10b      	bne.n	800480e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fe fecf 	bl	80035c2 <HAL_I2C_AbortCpltCallback>
 8004824:	e015      	b.n	8004852 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d10b      	bne.n	800484c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fe feae 	bl	80035ae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10e      	bne.n	8004880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004896:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d113      	bne.n	80048cc <I2C_ITError+0x254>
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b28      	cmp	r3, #40	@ 0x28
 80048a8:	d110      	bne.n	80048cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	@ (80048d8 <I2C_ITError+0x260>)
 80048ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fe fe53 	bl	8003572 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	080048dd 	.word	0x080048dd
 80048d8:	ffff0000 	.word	0xffff0000

080048dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004a24 <I2C_DMAAbort+0x148>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	08db      	lsrs	r3, r3, #3
 80048fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004a28 <I2C_DMAAbort+0x14c>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0a1a      	lsrs	r2, r3, #8
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004922:	e00a      	b.n	800493a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3b01      	subs	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004938:	d0ea      	beq.n	8004910 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004946:	2200      	movs	r2, #0
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004956:	2200      	movs	r2, #0
 8004958:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004968:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497c:	2200      	movs	r2, #0
 800497e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	2200      	movs	r2, #0
 800498e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b60      	cmp	r3, #96	@ 0x60
 80049aa:	d10e      	bne.n	80049ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049c2:	6978      	ldr	r0, [r7, #20]
 80049c4:	f7fe fdfd 	bl	80035c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049c8:	e027      	b.n	8004a1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049d0:	2b28      	cmp	r3, #40	@ 0x28
 80049d2:	d117      	bne.n	8004a04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2228      	movs	r2, #40	@ 0x28
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a02:	e007      	b.n	8004a14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a14:	6978      	ldr	r0, [r7, #20]
 8004a16:	f7fe fdca 	bl	80035ae <HAL_I2C_ErrorCallback>
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000000 	.word	0x20000000
 8004a28:	14f8b589 	.word	0x14f8b589

08004a2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a38:	4b13      	ldr	r3, [pc, #76]	@ (8004a88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	4a13      	ldr	r2, [pc, #76]	@ (8004a8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	0a1a      	lsrs	r2, r3, #8
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d107      	bne.n	8004a6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e008      	b.n	8004a7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a78:	d0e9      	beq.n	8004a4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	14f8b589 	.word	0x14f8b589

08004a90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004aa0:	d103      	bne.n	8004aaa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004aa8:	e007      	b.n	8004aba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004ab2:	d102      	bne.n	8004aba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e267      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d075      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ae6:	4b88      	ldr	r3, [pc, #544]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d00c      	beq.n	8004b0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4b85      	ldr	r3, [pc, #532]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d112      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afe:	4b82      	ldr	r3, [pc, #520]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b0a:	d10b      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05b      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x108>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d157      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e242      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2c:	d106      	bne.n	8004b3c <HAL_RCC_OscConfig+0x74>
 8004b2e:	4b76      	ldr	r3, [pc, #472]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a75      	ldr	r2, [pc, #468]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x98>
 8004b46:	4b70      	ldr	r3, [pc, #448]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6f      	ldr	r2, [pc, #444]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b6d      	ldr	r3, [pc, #436]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a6c      	ldr	r2, [pc, #432]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b60:	4b69      	ldr	r3, [pc, #420]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a68      	ldr	r2, [pc, #416]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b66      	ldr	r3, [pc, #408]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a65      	ldr	r2, [pc, #404]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fd fb8e 	bl	80022a0 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fd fb8a 	bl	80022a0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	@ 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e207      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xc0>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fb7a 	bl	80022a0 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fd fb76 	bl	80022a0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	@ 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1f3      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b51      	ldr	r3, [pc, #324]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0xe8>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d063      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bde:	4b4a      	ldr	r3, [pc, #296]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b47      	ldr	r3, [pc, #284]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf6:	4b44      	ldr	r3, [pc, #272]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b41      	ldr	r3, [pc, #260]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x152>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1c7      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4937      	ldr	r1, [pc, #220]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e03a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b34      	ldr	r3, [pc, #208]	@ (8004d0c <HAL_RCC_OscConfig+0x244>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fd fb2f 	bl	80022a0 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fd fb2b 	bl	80022a0 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e1a8      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	4b2b      	ldr	r3, [pc, #172]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b28      	ldr	r3, [pc, #160]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4925      	ldr	r1, [pc, #148]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	e015      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b24      	ldr	r3, [pc, #144]	@ (8004d0c <HAL_RCC_OscConfig+0x244>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fd fb0e 	bl	80022a0 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fd fb0a 	bl	80022a0 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e187      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d036      	beq.n	8004d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4b15      	ldr	r3, [pc, #84]	@ (8004d10 <HAL_RCC_OscConfig+0x248>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fd faee 	bl	80022a0 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc8:	f7fd faea 	bl	80022a0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e167      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	4b0b      	ldr	r3, [pc, #44]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x200>
 8004ce6:	e01b      	b.n	8004d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce8:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_RCC_OscConfig+0x248>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cee:	f7fd fad7 	bl	80022a0 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	e00e      	b.n	8004d14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7fd fad3 	bl	80022a0 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d907      	bls.n	8004d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e150      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	42470000 	.word	0x42470000
 8004d10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d14:	4b88      	ldr	r3, [pc, #544]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1ea      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8097 	beq.w	8004e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d32:	4b81      	ldr	r3, [pc, #516]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	4b7d      	ldr	r3, [pc, #500]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	4a7c      	ldr	r2, [pc, #496]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5e:	4b77      	ldr	r3, [pc, #476]	@ (8004f3c <HAL_RCC_OscConfig+0x474>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d118      	bne.n	8004d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6a:	4b74      	ldr	r3, [pc, #464]	@ (8004f3c <HAL_RCC_OscConfig+0x474>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a73      	ldr	r2, [pc, #460]	@ (8004f3c <HAL_RCC_OscConfig+0x474>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d76:	f7fd fa93 	bl	80022a0 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7e:	f7fd fa8f 	bl	80022a0 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e10c      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d90:	4b6a      	ldr	r3, [pc, #424]	@ (8004f3c <HAL_RCC_OscConfig+0x474>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x2ea>
 8004da4:	4b64      	ldr	r3, [pc, #400]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da8:	4a63      	ldr	r2, [pc, #396]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db0:	e01c      	b.n	8004dec <HAL_RCC_OscConfig+0x324>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x30c>
 8004dba:	4b5f      	ldr	r3, [pc, #380]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	4a5b      	ldr	r2, [pc, #364]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd2:	e00b      	b.n	8004dec <HAL_RCC_OscConfig+0x324>
 8004dd4:	4b58      	ldr	r3, [pc, #352]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd8:	4a57      	ldr	r2, [pc, #348]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de0:	4b55      	ldr	r3, [pc, #340]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	4a54      	ldr	r2, [pc, #336]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004de6:	f023 0304 	bic.w	r3, r3, #4
 8004dea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d015      	beq.n	8004e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fd fa54 	bl	80022a0 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fa50 	bl	80022a0 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0cb      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e12:	4b49      	ldr	r3, [pc, #292]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0ee      	beq.n	8004dfc <HAL_RCC_OscConfig+0x334>
 8004e1e:	e014      	b.n	8004e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e20:	f7fd fa3e 	bl	80022a0 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e28:	f7fd fa3a 	bl	80022a0 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0b5      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1ee      	bne.n	8004e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d105      	bne.n	8004e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e50:	4b39      	ldr	r3, [pc, #228]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	4a38      	ldr	r2, [pc, #224]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80a1 	beq.w	8004fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e66:	4b34      	ldr	r3, [pc, #208]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d05c      	beq.n	8004f2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d141      	bne.n	8004efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <HAL_RCC_OscConfig+0x478>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fd fa0e 	bl	80022a0 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fd fa0a 	bl	80022a0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e087      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	4b27      	ldr	r3, [pc, #156]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	019b      	lsls	r3, r3, #6
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	491b      	ldr	r1, [pc, #108]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <HAL_RCC_OscConfig+0x478>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7fd f9e3 	bl	80022a0 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ede:	f7fd f9df 	bl	80022a0 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e05c      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x416>
 8004efc:	e054      	b.n	8004fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efe:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <HAL_RCC_OscConfig+0x478>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fd f9cc 	bl	80022a0 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fd f9c8 	bl	80022a0 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e045      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x444>
 8004f2a:	e03d      	b.n	8004fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e038      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f44:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb4 <HAL_RCC_OscConfig+0x4ec>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d028      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d121      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d11a      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f74:	4013      	ands	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d111      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800

08004fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0cc      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b68      	ldr	r3, [pc, #416]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d90c      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b65      	ldr	r3, [pc, #404]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b63      	ldr	r3, [pc, #396]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0b8      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800500c:	4b59      	ldr	r3, [pc, #356]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a58      	ldr	r2, [pc, #352]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005024:	4b53      	ldr	r3, [pc, #332]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a52      	ldr	r2, [pc, #328]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800502e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005030:	4b50      	ldr	r3, [pc, #320]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	494d      	ldr	r1, [pc, #308]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d044      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	4b47      	ldr	r3, [pc, #284]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d119      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e07f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d003      	beq.n	8005076 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005072:	2b03      	cmp	r3, #3
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005076:	4b3f      	ldr	r3, [pc, #252]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005086:	4b3b      	ldr	r3, [pc, #236]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e067      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005096:	4b37      	ldr	r3, [pc, #220]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 0203 	bic.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4934      	ldr	r1, [pc, #208]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050a8:	f7fd f8fa 	bl	80022a0 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b0:	f7fd f8f6 	bl	80022a0 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e04f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 020c 	and.w	r2, r3, #12
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1eb      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d8:	4b25      	ldr	r3, [pc, #148]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d20c      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b22      	ldr	r3, [pc, #136]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b20      	ldr	r3, [pc, #128]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e032      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800510c:	4b19      	ldr	r3, [pc, #100]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4916      	ldr	r1, [pc, #88]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512a:	4b12      	ldr	r3, [pc, #72]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	490e      	ldr	r1, [pc, #56]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800513e:	f000 f821 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	490a      	ldr	r1, [pc, #40]	@ (8005178 <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	fa22 f303 	lsr.w	r3, r2, r3
 8005156:	4a09      	ldr	r2, [pc, #36]	@ (800517c <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800515a:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc fe90 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023c00 	.word	0x40023c00
 8005174:	40023800 	.word	0x40023800
 8005178:	0800bb78 	.word	0x0800bb78
 800517c:	20000000 	.word	0x20000000
 8005180:	20000004 	.word	0x20000004

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005188:	b090      	sub	sp, #64	@ 0x40
 800518a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800519c:	4b59      	ldr	r3, [pc, #356]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 030c 	and.w	r3, r3, #12
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d00d      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x40>
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	f200 80a1 	bhi.w	80052f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x34>
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d003      	beq.n	80051be <HAL_RCC_GetSysClockFreq+0x3a>
 80051b6:	e09b      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051b8:	4b53      	ldr	r3, [pc, #332]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x184>)
 80051ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051bc:	e09b      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051be:	4b53      	ldr	r3, [pc, #332]	@ (800530c <HAL_RCC_GetSysClockFreq+0x188>)
 80051c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051c2:	e098      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d028      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051da:	4b4a      	ldr	r3, [pc, #296]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	2200      	movs	r2, #0
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051ec:	2100      	movs	r1, #0
 80051ee:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_RCC_GetSysClockFreq+0x188>)
 80051f0:	fb03 f201 	mul.w	r2, r3, r1
 80051f4:	2300      	movs	r3, #0
 80051f6:	fb00 f303 	mul.w	r3, r0, r3
 80051fa:	4413      	add	r3, r2
 80051fc:	4a43      	ldr	r2, [pc, #268]	@ (800530c <HAL_RCC_GetSysClockFreq+0x188>)
 80051fe:	fba0 1202 	umull	r1, r2, r0, r2
 8005202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005204:	460a      	mov	r2, r1
 8005206:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800520a:	4413      	add	r3, r2
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005210:	2200      	movs	r2, #0
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	61fa      	str	r2, [r7, #28]
 8005216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800521a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800521e:	f7fb f82f 	bl	8000280 <__aeabi_uldivmod>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4613      	mov	r3, r2
 8005228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800522a:	e053      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522c:	4b35      	ldr	r3, [pc, #212]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	099b      	lsrs	r3, r3, #6
 8005232:	2200      	movs	r2, #0
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	617a      	str	r2, [r7, #20]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800523e:	f04f 0b00 	mov.w	fp, #0
 8005242:	4652      	mov	r2, sl
 8005244:	465b      	mov	r3, fp
 8005246:	f04f 0000 	mov.w	r0, #0
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	0159      	lsls	r1, r3, #5
 8005250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005254:	0150      	lsls	r0, r2, #5
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	ebb2 080a 	subs.w	r8, r2, sl
 800525e:	eb63 090b 	sbc.w	r9, r3, fp
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800526e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005272:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005276:	ebb2 0408 	subs.w	r4, r2, r8
 800527a:	eb63 0509 	sbc.w	r5, r3, r9
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	00eb      	lsls	r3, r5, #3
 8005288:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528c:	00e2      	lsls	r2, r4, #3
 800528e:	4614      	mov	r4, r2
 8005290:	461d      	mov	r5, r3
 8005292:	eb14 030a 	adds.w	r3, r4, sl
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	eb45 030b 	adc.w	r3, r5, fp
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052aa:	4629      	mov	r1, r5
 80052ac:	028b      	lsls	r3, r1, #10
 80052ae:	4621      	mov	r1, r4
 80052b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b4:	4621      	mov	r1, r4
 80052b6:	028a      	lsls	r2, r1, #10
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052be:	2200      	movs	r2, #0
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	60fa      	str	r2, [r7, #12]
 80052c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c8:	f7fa ffda 	bl	8000280 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4613      	mov	r3, r2
 80052d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	3301      	adds	r3, #1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80052e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x184>)
 80052f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3740      	adds	r7, #64	@ 0x40
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	00f42400 	.word	0x00f42400
 800530c:	017d7840 	.word	0x017d7840

08005310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005314:	4b03      	ldr	r3, [pc, #12]	@ (8005324 <HAL_RCC_GetHCLKFreq+0x14>)
 8005316:	681b      	ldr	r3, [r3, #0]
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000000 	.word	0x20000000

08005328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800532c:	f7ff fff0 	bl	8005310 <HAL_RCC_GetHCLKFreq>
 8005330:	4602      	mov	r2, r0
 8005332:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	0a9b      	lsrs	r3, r3, #10
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	4903      	ldr	r1, [pc, #12]	@ (800534c <HAL_RCC_GetPCLK1Freq+0x24>)
 800533e:	5ccb      	ldrb	r3, [r1, r3]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40023800 	.word	0x40023800
 800534c:	0800bb88 	.word	0x0800bb88

08005350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005354:	f7ff ffdc 	bl	8005310 <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0b5b      	lsrs	r3, r3, #13
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4903      	ldr	r1, [pc, #12]	@ (8005374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40023800 	.word	0x40023800
 8005374:	0800bb88 	.word	0x0800bb88

08005378 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	220f      	movs	r2, #15
 8005386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005388:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0203 	and.w	r2, r3, #3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005394:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053a0:	4b0c      	ldr	r3, [pc, #48]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053ac:	4b09      	ldr	r3, [pc, #36]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053ba:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <HAL_RCC_GetClockConfig+0x60>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0207 	and.w	r2, r3, #7
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40023c00 	.word	0x40023c00

080053dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005400:	2b00      	cmp	r3, #0
 8005402:	d038      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005404:	4b68      	ldr	r3, [pc, #416]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800540a:	f7fc ff49 	bl	80022a0 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005412:	f7fc ff45 	bl	80022a0 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0bd      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005424:	4b61      	ldr	r3, [pc, #388]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f0      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	071b      	lsls	r3, r3, #28
 8005442:	495a      	ldr	r1, [pc, #360]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800544a:	4b57      	ldr	r3, [pc, #348]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005450:	f7fc ff26 	bl	80022a0 <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005458:	f7fc ff22 	bl	80022a0 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e09a      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800546a:	4b50      	ldr	r3, [pc, #320]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8083 	beq.w	800558a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	4b48      	ldr	r3, [pc, #288]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	4a47      	ldr	r2, [pc, #284]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005492:	6413      	str	r3, [r2, #64]	@ 0x40
 8005494:	4b45      	ldr	r3, [pc, #276]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054a0:	4b43      	ldr	r3, [pc, #268]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a42      	ldr	r2, [pc, #264]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054aa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ac:	f7fc fef8 	bl	80022a0 <HAL_GetTick>
 80054b0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b4:	f7fc fef4 	bl	80022a0 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e06c      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80054c6:	4b3a      	ldr	r3, [pc, #232]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d2:	4b36      	ldr	r3, [pc, #216]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054da:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02f      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d028      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f0:	4b2e      	ldr	r3, [pc, #184]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fa:	4b2e      	ldr	r3, [pc, #184]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005500:	4b2c      	ldr	r3, [pc, #176]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005506:	4a29      	ldr	r2, [pc, #164]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800550c:	4b27      	ldr	r3, [pc, #156]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d114      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005518:	f7fc fec2 	bl	80022a0 <HAL_GetTick>
 800551c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fc febe 	bl	80022a0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e034      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	4b1d      	ldr	r3, [pc, #116]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ee      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800554e:	d10d      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005550:	4b16      	ldr	r3, [pc, #88]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005564:	4911      	ldr	r1, [pc, #68]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	4313      	orrs	r3, r2
 8005568:	608b      	str	r3, [r1, #8]
 800556a:	e005      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800556c:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a0e      	ldr	r2, [pc, #56]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005572:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005576:	6093      	str	r3, [r2, #8]
 8005578:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005584:	4909      	ldr	r1, [pc, #36]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005586:	4313      	orrs	r3, r2
 8005588:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7d1a      	ldrb	r2, [r3, #20]
 800559a:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800559c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	42470068 	.word	0x42470068
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40007000 	.word	0x40007000
 80055b4:	42470e40 	.word	0x42470e40
 80055b8:	424711e0 	.word	0x424711e0

080055bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e073      	b.n	80056b6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7f5b      	ldrb	r3, [r3, #29]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d105      	bne.n	80055e4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fc f9f2 	bl	80019c8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d055      	beq.n	80056a4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	22ca      	movs	r2, #202	@ 0xca
 80055fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2253      	movs	r2, #83	@ 0x53
 8005606:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f99d 	bl	8005948 <RTC_EnterInitMode>
 800560e:	4603      	mov	r3, r0
 8005610:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d12c      	bne.n	8005672 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800562a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6899      	ldr	r1, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68d2      	ldr	r2, [r2, #12]
 8005652:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6919      	ldr	r1, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	041a      	lsls	r2, r3, #16
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f9a4 	bl	80059b6 <RTC_ExitInitMode>
 800566e:	4603      	mov	r3, r0
 8005670:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d110      	bne.n	800569a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005686:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	22ff      	movs	r2, #255	@ 0xff
 80056a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80056a2:	e001      	b.n	80056a8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056be:	b590      	push	{r4, r7, lr}
 80056c0:	b087      	sub	sp, #28
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	7f1b      	ldrb	r3, [r3, #28]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_RTC_SetTime+0x1c>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e087      	b.n	80057ea <HAL_RTC_SetTime+0x12c>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2202      	movs	r2, #2
 80056e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d126      	bne.n	800573a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f97b 	bl	8005a00 <RTC_ByteToBcd2>
 800570a:	4603      	mov	r3, r0
 800570c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f974 	bl	8005a00 <RTC_ByteToBcd2>
 8005718:	4603      	mov	r3, r0
 800571a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800571c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	789b      	ldrb	r3, [r3, #2]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f96c 	bl	8005a00 <RTC_ByteToBcd2>
 8005728:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800572a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	78db      	ldrb	r3, [r3, #3]
 8005732:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e018      	b.n	800576c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800575a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005760:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	78db      	ldrb	r3, [r3, #3]
 8005766:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	22ca      	movs	r2, #202	@ 0xca
 8005772:	625a      	str	r2, [r3, #36]	@ 0x24
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2253      	movs	r2, #83	@ 0x53
 800577a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f8e3 	bl	8005948 <RTC_EnterInitMode>
 8005782:	4603      	mov	r3, r0
 8005784:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005786:	7cfb      	ldrb	r3, [r7, #19]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d120      	bne.n	80057ce <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005796:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800579a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6899      	ldr	r1, [r3, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f8f6 	bl	80059b6 <RTC_ExitInitMode>
 80057ca:	4603      	mov	r3, r0
 80057cc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057ce:	7cfb      	ldrb	r3, [r7, #19]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	22ff      	movs	r2, #255	@ 0xff
 80057e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]

  return status;
 80057e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}

080057f2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057f2:	b590      	push	{r4, r7, lr}
 80057f4:	b087      	sub	sp, #28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	7f1b      	ldrb	r3, [r3, #28]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_RTC_SetDate+0x1c>
 800580a:	2302      	movs	r3, #2
 800580c:	e071      	b.n	80058f2 <HAL_RTC_SetDate+0x100>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2202      	movs	r2, #2
 8005818:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10e      	bne.n	800583e <HAL_RTC_SetDate+0x4c>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	f003 0310 	and.w	r3, r3, #16
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	f023 0310 	bic.w	r3, r3, #16
 8005834:	b2db      	uxtb	r3, r3
 8005836:	330a      	adds	r3, #10
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d11c      	bne.n	800587e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f8d9 	bl	8005a00 <RTC_ByteToBcd2>
 800584e:	4603      	mov	r3, r0
 8005850:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f8d2 	bl	8005a00 <RTC_ByteToBcd2>
 800585c:	4603      	mov	r3, r0
 800585e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005860:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	789b      	ldrb	r3, [r3, #2]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f8ca 	bl	8005a00 <RTC_ByteToBcd2>
 800586c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800586e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e00e      	b.n	800589c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	78db      	ldrb	r3, [r3, #3]
 8005882:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	785b      	ldrb	r3, [r3, #1]
 8005888:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800588a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005890:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	22ca      	movs	r2, #202	@ 0xca
 80058a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2253      	movs	r2, #83	@ 0x53
 80058aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f84b 	bl	8005948 <RTC_EnterInitMode>
 80058b2:	4603      	mov	r3, r0
 80058b4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80058b6:	7cfb      	ldrb	r3, [r7, #19]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10c      	bne.n	80058d6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80058c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80058ca:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f872 	bl	80059b6 <RTC_ExitInitMode>
 80058d2:	4603      	mov	r3, r0
 80058d4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80058d6:	7cfb      	ldrb	r3, [r7, #19]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	22ff      	movs	r2, #255	@ 0xff
 80058e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]

  return status;
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd90      	pop	{r4, r7, pc}
	...

080058fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a0d      	ldr	r2, [pc, #52]	@ (8005944 <HAL_RTC_WaitForSynchro+0x48>)
 800590e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005910:	f7fc fcc6 	bl	80022a0 <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005916:	e009      	b.n	800592c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005918:	f7fc fcc2 	bl	80022a0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005926:	d901      	bls.n	800592c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e007      	b.n	800593c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0ee      	beq.n	8005918 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	00013f5f 	.word	0x00013f5f

08005948 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d122      	bne.n	80059ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005974:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005976:	f7fc fc93 	bl	80022a0 <HAL_GetTick>
 800597a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800597c:	e00c      	b.n	8005998 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800597e:	f7fc fc8f 	bl	80022a0 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800598c:	d904      	bls.n	8005998 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2204      	movs	r2, #4
 8005992:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <RTC_EnterInitMode+0x64>
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d1e8      	bne.n	800597e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff ff8b 	bl	80058fc <HAL_RTC_WaitForSynchro>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d004      	beq.n	80059f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2204      	movs	r2, #4
 80059f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005a0e:	e005      	b.n	8005a1c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	3b0a      	subs	r3, #10
 8005a1a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	2b09      	cmp	r3, #9
 8005a20:	d8f6      	bhi.n	8005a10 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	b2db      	uxtb	r3, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e07b      	b.n	8005b46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d108      	bne.n	8005a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a5e:	d009      	beq.n	8005a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	61da      	str	r2, [r3, #28]
 8005a66:	e005      	b.n	8005a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fb ffc6 	bl	8001a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af8:	ea42 0103 	orr.w	r1, r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	f003 0104 	and.w	r1, r3, #4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	f003 0210 	and.w	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	099b      	lsrs	r3, r3, #6
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10f      	bne.n	8005b94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	099b      	lsrs	r3, r3, #6
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
    return;
 8005b92:	e0d7      	b.n	8005d44 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_SPI_IRQHandler+0x66>
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	09db      	lsrs	r3, r3, #7
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
    return;
 8005bb4:	e0c6      	b.n	8005d44 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10c      	bne.n	8005bdc <HAL_SPI_IRQHandler+0x8c>
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80b4 	beq.w	8005d44 <HAL_SPI_IRQHandler+0x1f4>
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80ad 	beq.w	8005d44 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	099b      	lsrs	r3, r3, #6
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d023      	beq.n	8005c3e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d011      	beq.n	8005c26 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	f043 0204 	orr.w	r2, r3, #4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	e00b      	b.n	8005c3e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	693b      	ldr	r3, [r7, #16]
        return;
 8005c3c:	e082      	b.n	8005d44 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d014      	beq.n	8005c74 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4e:	f043 0201 	orr.w	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00c      	beq.n	8005c9a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c84:	f043 0208 	orr.w	r2, r3, #8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]
 8005c98:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d04f      	beq.n	8005d42 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <HAL_SPI_IRQHandler+0x17e>
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d034      	beq.n	8005d38 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0203 	bic.w	r2, r2, #3
 8005cdc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d011      	beq.n	8005d0a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cea:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <HAL_SPI_IRQHandler+0x1fc>)
 8005cec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fc fea4 	bl	8002a40 <HAL_DMA_Abort_IT>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d16:	4a0d      	ldr	r2, [pc, #52]	@ (8005d4c <HAL_SPI_IRQHandler+0x1fc>)
 8005d18:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fc fe8e 	bl	8002a40 <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005d36:	e003      	b.n	8005d40 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f809 	bl	8005d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d3e:	e000      	b.n	8005d42 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005d40:	bf00      	nop
    return;
 8005d42:	bf00      	nop
  }
}
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08005d65 	.word	0x08005d65

08005d50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff ffe6 	bl	8005d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e041      	b.n	8005e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fb fea4 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f000 fc32 	bl	8006634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e044      	b.n	8005ece <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1e      	ldr	r2, [pc, #120]	@ (8005edc <HAL_TIM_Base_Start_IT+0xb0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e6e:	d013      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a19      	ldr	r2, [pc, #100]	@ (8005ee4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a17      	ldr	r2, [pc, #92]	@ (8005ee8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a16      	ldr	r2, [pc, #88]	@ (8005eec <HAL_TIM_Base_Start_IT+0xc0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d111      	bne.n	8005ebc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d010      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	e007      	b.n	8005ecc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40014000 	.word	0x40014000

08005ef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e041      	b.n	8005f86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f839 	bl	8005f8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f000 fb80 	bl	8006634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e097      	b.n	80060e6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fb fdc0 	bl	8001b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f000 fb1c 	bl	8006634 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006024:	f023 0303 	bic.w	r3, r3, #3
 8006028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	4313      	orrs	r3, r2
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006042:	f023 030c 	bic.w	r3, r3, #12
 8006046:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800604e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	4313      	orrs	r3, r2
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	011a      	lsls	r2, r3, #4
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	031b      	lsls	r3, r3, #12
 8006072:	4313      	orrs	r3, r2
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006080:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006088:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	4313      	orrs	r3, r2
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01b      	beq.n	8006152 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f06f 0202 	mvn.w	r2, #2
 8006122:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa5c 	bl	80065f6 <HAL_TIM_IC_CaptureCallback>
 800613e:	e005      	b.n	800614c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fa4e 	bl	80065e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa5f 	bl	800660a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d020      	beq.n	800619e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01b      	beq.n	800619e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f06f 0204 	mvn.w	r2, #4
 800616e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa36 	bl	80065f6 <HAL_TIM_IC_CaptureCallback>
 800618a:	e005      	b.n	8006198 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fa28 	bl	80065e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa39 	bl	800660a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d020      	beq.n	80061ea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01b      	beq.n	80061ea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f06f 0208 	mvn.w	r2, #8
 80061ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2204      	movs	r2, #4
 80061c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fa10 	bl	80065f6 <HAL_TIM_IC_CaptureCallback>
 80061d6:	e005      	b.n	80061e4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fa02 	bl	80065e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa13 	bl	800660a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d020      	beq.n	8006236 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01b      	beq.n	8006236 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f06f 0210 	mvn.w	r2, #16
 8006206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2208      	movs	r2, #8
 800620c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f9ea 	bl	80065f6 <HAL_TIM_IC_CaptureCallback>
 8006222:	e005      	b.n	8006230 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f9dc 	bl	80065e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f9ed 	bl	800660a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00c      	beq.n	800625a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f06f 0201 	mvn.w	r2, #1
 8006252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7fa fe1f 	bl	8000e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00c      	beq.n	800627e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fd51 	bl	8006d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00c      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800629a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f9be 	bl	800661e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00c      	beq.n	80062c6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f06f 0220 	mvn.w	r2, #32
 80062be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fd23 	bl	8006d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e0ae      	b.n	800644c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b0c      	cmp	r3, #12
 80062fa:	f200 809f 	bhi.w	800643c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006339 	.word	0x08006339
 8006308:	0800643d 	.word	0x0800643d
 800630c:	0800643d 	.word	0x0800643d
 8006310:	0800643d 	.word	0x0800643d
 8006314:	08006379 	.word	0x08006379
 8006318:	0800643d 	.word	0x0800643d
 800631c:	0800643d 	.word	0x0800643d
 8006320:	0800643d 	.word	0x0800643d
 8006324:	080063bb 	.word	0x080063bb
 8006328:	0800643d 	.word	0x0800643d
 800632c:	0800643d 	.word	0x0800643d
 8006330:	0800643d 	.word	0x0800643d
 8006334:	080063fb 	.word	0x080063fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f9fe 	bl	8006740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0208 	orr.w	r2, r2, #8
 8006352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0204 	bic.w	r2, r2, #4
 8006362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6999      	ldr	r1, [r3, #24]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	619a      	str	r2, [r3, #24]
      break;
 8006376:	e064      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fa44 	bl	800680c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6999      	ldr	r1, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	619a      	str	r2, [r3, #24]
      break;
 80063b8:	e043      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fa8f 	bl	80068e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f042 0208 	orr.w	r2, r2, #8
 80063d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0204 	bic.w	r2, r2, #4
 80063e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69d9      	ldr	r1, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	61da      	str	r2, [r3, #28]
      break;
 80063f8:	e023      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fad9 	bl	80069b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	021a      	lsls	r2, r3, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	61da      	str	r2, [r3, #28]
      break;
 800643a:	e002      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
      break;
 8006440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIM_ConfigClockSource+0x1c>
 800646c:	2302      	movs	r3, #2
 800646e:	e0b4      	b.n	80065da <HAL_TIM_ConfigClockSource+0x186>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800648e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a8:	d03e      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0xd4>
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ae:	f200 8087 	bhi.w	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b6:	f000 8086 	beq.w	80065c6 <HAL_TIM_ConfigClockSource+0x172>
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064be:	d87f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064c0:	2b70      	cmp	r3, #112	@ 0x70
 80064c2:	d01a      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0xa6>
 80064c4:	2b70      	cmp	r3, #112	@ 0x70
 80064c6:	d87b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064c8:	2b60      	cmp	r3, #96	@ 0x60
 80064ca:	d050      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x11a>
 80064cc:	2b60      	cmp	r3, #96	@ 0x60
 80064ce:	d877      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d0:	2b50      	cmp	r3, #80	@ 0x50
 80064d2:	d03c      	beq.n	800654e <HAL_TIM_ConfigClockSource+0xfa>
 80064d4:	2b50      	cmp	r3, #80	@ 0x50
 80064d6:	d873      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064d8:	2b40      	cmp	r3, #64	@ 0x40
 80064da:	d058      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x13a>
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d86f      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e0:	2b30      	cmp	r3, #48	@ 0x30
 80064e2:	d064      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d86b      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d060      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d867      	bhi.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d05a      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	e062      	b.n	80065c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800650a:	f000 fb1f 	bl	8006b4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800651c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	609a      	str	r2, [r3, #8]
      break;
 8006526:	e04f      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006538:	f000 fb08 	bl	8006b4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800654a:	609a      	str	r2, [r3, #8]
      break;
 800654c:	e03c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800655a:	461a      	mov	r2, r3
 800655c:	f000 fa7c 	bl	8006a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2150      	movs	r1, #80	@ 0x50
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fad5 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 800656c:	e02c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800657a:	461a      	mov	r2, r3
 800657c:	f000 fa9b 	bl	8006ab6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2160      	movs	r1, #96	@ 0x60
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fac5 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 800658c:	e01c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	461a      	mov	r2, r3
 800659c:	f000 fa5c 	bl	8006a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2140      	movs	r1, #64	@ 0x40
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fab5 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e00c      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 faac 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80065be:	e003      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
      break;
 80065c4:	e000      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
	...

08006634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a37      	ldr	r2, [pc, #220]	@ (8006724 <TIM_Base_SetConfig+0xf0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00f      	beq.n	800666c <TIM_Base_SetConfig+0x38>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006652:	d00b      	beq.n	800666c <TIM_Base_SetConfig+0x38>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a34      	ldr	r2, [pc, #208]	@ (8006728 <TIM_Base_SetConfig+0xf4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_Base_SetConfig+0x38>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a33      	ldr	r2, [pc, #204]	@ (800672c <TIM_Base_SetConfig+0xf8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_Base_SetConfig+0x38>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a32      	ldr	r2, [pc, #200]	@ (8006730 <TIM_Base_SetConfig+0xfc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d108      	bne.n	800667e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a28      	ldr	r2, [pc, #160]	@ (8006724 <TIM_Base_SetConfig+0xf0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d01b      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668c:	d017      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a25      	ldr	r2, [pc, #148]	@ (8006728 <TIM_Base_SetConfig+0xf4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a24      	ldr	r2, [pc, #144]	@ (800672c <TIM_Base_SetConfig+0xf8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a23      	ldr	r2, [pc, #140]	@ (8006730 <TIM_Base_SetConfig+0xfc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a22      	ldr	r2, [pc, #136]	@ (8006734 <TIM_Base_SetConfig+0x100>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a21      	ldr	r2, [pc, #132]	@ (8006738 <TIM_Base_SetConfig+0x104>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_Base_SetConfig+0x8a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a20      	ldr	r2, [pc, #128]	@ (800673c <TIM_Base_SetConfig+0x108>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d108      	bne.n	80066d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006724 <TIM_Base_SetConfig+0xf0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d103      	bne.n	80066fe <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f043 0204 	orr.w	r2, r3, #4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	601a      	str	r2, [r3, #0]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40014000 	.word	0x40014000
 8006738:	40014400 	.word	0x40014400
 800673c:	40014800 	.word	0x40014800

08006740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f023 0201 	bic.w	r2, r3, #1
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f023 0302 	bic.w	r3, r3, #2
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a1c      	ldr	r2, [pc, #112]	@ (8006808 <TIM_OC1_SetConfig+0xc8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d10c      	bne.n	80067b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0308 	bic.w	r3, r3, #8
 80067a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f023 0304 	bic.w	r3, r3, #4
 80067b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a13      	ldr	r2, [pc, #76]	@ (8006808 <TIM_OC1_SetConfig+0xc8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d111      	bne.n	80067e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40010000 	.word	0x40010000

0800680c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	f023 0210 	bic.w	r2, r3, #16
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800683a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0320 	bic.w	r3, r3, #32
 8006856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a1e      	ldr	r2, [pc, #120]	@ (80068e0 <TIM_OC2_SetConfig+0xd4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d10d      	bne.n	8006888 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a15      	ldr	r2, [pc, #84]	@ (80068e0 <TIM_OC2_SetConfig+0xd4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d113      	bne.n	80068b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800689e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000

080068e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0303 	bic.w	r3, r3, #3
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800692c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a1d      	ldr	r2, [pc, #116]	@ (80069b4 <TIM_OC3_SetConfig+0xd0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d10d      	bne.n	800695e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800695c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a14      	ldr	r2, [pc, #80]	@ (80069b4 <TIM_OC3_SetConfig+0xd0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d113      	bne.n	800698e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800696c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40010000 	.word	0x40010000

080069b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	031b      	lsls	r3, r3, #12
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a10      	ldr	r2, [pc, #64]	@ (8006a54 <TIM_OC4_SetConfig+0x9c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d109      	bne.n	8006a2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	019b      	lsls	r3, r3, #6
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40010000 	.word	0x40010000

08006a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f023 0201 	bic.w	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f023 030a 	bic.w	r3, r3, #10
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b087      	sub	sp, #28
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f023 0210 	bic.w	r2, r3, #16
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006af2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f043 0307 	orr.w	r3, r3, #7
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	609a      	str	r2, [r3, #8]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e050      	b.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d018      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf0:	d013      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a18      	ldr	r2, [pc, #96]	@ (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a16      	ldr	r2, [pc, #88]	@ (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a15      	ldr	r2, [pc, #84]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a13      	ldr	r2, [pc, #76]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10c      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40000400 	.word	0x40000400
 8006c5c:	40000800 	.word	0x40000800
 8006c60:	40000c00 	.word	0x40000c00
 8006c64:	40014000 	.word	0x40014000

08006c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e03d      	b.n	8006d00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e042      	b.n	8006dcc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fb f806 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2224      	movs	r2, #36	@ 0x24
 8006d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fdd3 	bl	8007924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695a      	ldr	r2, [r3, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	@ 0x28
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d175      	bne.n	8006ee0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_UART_Transmit+0x2c>
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e06e      	b.n	8006ee2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2221      	movs	r2, #33	@ 0x21
 8006e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e12:	f7fb fa45 	bl	80022a0 <HAL_GetTick>
 8006e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2c:	d108      	bne.n	8006e40 <HAL_UART_Transmit+0x6c>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	e003      	b.n	8006e48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e48:	e02e      	b.n	8006ea8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2200      	movs	r2, #0
 8006e52:	2180      	movs	r1, #128	@ 0x80
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fb37 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e03a      	b.n	8006ee2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10b      	bne.n	8006e8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	3302      	adds	r3, #2
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	e007      	b.n	8006e9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	781a      	ldrb	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	3301      	adds	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1cb      	bne.n	8006e4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2140      	movs	r1, #64	@ 0x40
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fb03 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e006      	b.n	8006ee2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	e000      	b.n	8006ee2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ee0:	2302      	movs	r3, #2
  }
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b084      	sub	sp, #16
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d112      	bne.n	8006f2a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Receive_IT+0x26>
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e00b      	b.n	8006f2c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fb2a 	bl	800757a <UART_Start_Receive_IT>
 8006f26:	4603      	mov	r3, r0
 8006f28:	e000      	b.n	8006f2c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f2a:	2302      	movs	r3, #2
  }
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b0ba      	sub	sp, #232	@ 0xe8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10f      	bne.n	8006f9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <HAL_UART_IRQHandler+0x66>
 8006f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fc07 	bl	80077a6 <UART_Receive_IT>
      return;
 8006f98:	e273      	b.n	8007482 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 80de 	beq.w	8007160 <HAL_UART_IRQHandler+0x22c>
 8006fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 80d1 	beq.w	8007160 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <HAL_UART_IRQHandler+0xae>
 8006fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fda:	f043 0201 	orr.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <HAL_UART_IRQHandler+0xd2>
 8006fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ffe:	f043 0202 	orr.w	r2, r3, #2
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <HAL_UART_IRQHandler+0xf6>
 8007012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d005      	beq.n	800702a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007022:	f043 0204 	orr.w	r2, r3, #4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d011      	beq.n	800705a <HAL_UART_IRQHandler+0x126>
 8007036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007052:	f043 0208 	orr.w	r2, r3, #8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 820a 	beq.w	8007478 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <HAL_UART_IRQHandler+0x14e>
 8007070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fb92 	bl	80077a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708c:	2b40      	cmp	r3, #64	@ 0x40
 800708e:	bf0c      	ite	eq
 8007090:	2301      	moveq	r3, #1
 8007092:	2300      	movne	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <HAL_UART_IRQHandler+0x17a>
 80070a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d04f      	beq.n	800714e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa9d 	bl	80075ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070be:	2b40      	cmp	r3, #64	@ 0x40
 80070c0:	d141      	bne.n	8007146 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3314      	adds	r3, #20
 80070c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3314      	adds	r3, #20
 80070ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070fe:	e841 2300 	strex	r3, r2, [r1]
 8007102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1d9      	bne.n	80070c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d013      	beq.n	800713e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711a:	4a8a      	ldr	r2, [pc, #552]	@ (8007344 <HAL_UART_IRQHandler+0x410>)
 800711c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	4618      	mov	r0, r3
 8007124:	f7fb fc8c 	bl	8002a40 <HAL_DMA_Abort_IT>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d016      	beq.n	800715c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007138:	4610      	mov	r0, r2
 800713a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713c:	e00e      	b.n	800715c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f9ac 	bl	800749c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007144:	e00a      	b.n	800715c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f9a8 	bl	800749c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714c:	e006      	b.n	800715c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9a4 	bl	800749c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800715a:	e18d      	b.n	8007478 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715c:	bf00      	nop
    return;
 800715e:	e18b      	b.n	8007478 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007164:	2b01      	cmp	r3, #1
 8007166:	f040 8167 	bne.w	8007438 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800716e:	f003 0310 	and.w	r3, r3, #16
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8160 	beq.w	8007438 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800717c:	f003 0310 	and.w	r3, r3, #16
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 8159 	beq.w	8007438 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007186:	2300      	movs	r3, #0
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60bb      	str	r3, [r7, #8]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	60bb      	str	r3, [r7, #8]
 800719a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a6:	2b40      	cmp	r3, #64	@ 0x40
 80071a8:	f040 80ce 	bne.w	8007348 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80a9 	beq.w	8007314 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071ca:	429a      	cmp	r2, r3
 80071cc:	f080 80a2 	bcs.w	8007314 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e2:	f000 8088 	beq.w	80072f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007212:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800721e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800722a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1d9      	bne.n	80071e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3314      	adds	r3, #20
 8007238:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007242:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3314      	adds	r3, #20
 8007252:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007256:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800725a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800725e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e1      	bne.n	8007232 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3314      	adds	r3, #20
 8007274:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800727e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3314      	adds	r3, #20
 800728e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007292:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007294:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007298:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e3      	bne.n	800726e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c6:	f023 0310 	bic.w	r3, r3, #16
 80072ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e3      	bne.n	80072b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fb fb35 	bl	8002960 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2202      	movs	r2, #2
 80072fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007304:	b29b      	uxth	r3, r3
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	b29b      	uxth	r3, r3
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f8cf 	bl	80074b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007312:	e0b3      	b.n	800747c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800731c:	429a      	cmp	r2, r3
 800731e:	f040 80ad 	bne.w	800747c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800732c:	f040 80a6 	bne.w	800747c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f8b7 	bl	80074b0 <HAL_UARTEx_RxEventCallback>
      return;
 8007342:	e09b      	b.n	800747c <HAL_UART_IRQHandler+0x548>
 8007344:	080076b5 	.word	0x080076b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007350:	b29b      	uxth	r3, r3
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 808e 	beq.w	8007480 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8089 	beq.w	8007480 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800737e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007392:	647a      	str	r2, [r7, #68]	@ 0x44
 8007394:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e3      	bne.n	800736e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3314      	adds	r3, #20
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	623b      	str	r3, [r7, #32]
   return(result);
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	f023 0301 	bic.w	r3, r3, #1
 80073bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3314      	adds	r3, #20
 80073c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80073cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e3      	bne.n	80073a6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007410:	61fa      	str	r2, [r7, #28]
 8007412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	69b9      	ldr	r1, [r7, #24]
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	617b      	str	r3, [r7, #20]
   return(result);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e3      	bne.n	80073ec <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800742a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f83d 	bl	80074b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007436:	e023      	b.n	8007480 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800743c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007440:	2b00      	cmp	r3, #0
 8007442:	d009      	beq.n	8007458 <HAL_UART_IRQHandler+0x524>
 8007444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f940 	bl	80076d6 <UART_Transmit_IT>
    return;
 8007456:	e014      	b.n	8007482 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <HAL_UART_IRQHandler+0x54e>
 8007464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f980 	bl	8007776 <UART_EndTransmit_IT>
    return;
 8007476:	e004      	b.n	8007482 <HAL_UART_IRQHandler+0x54e>
    return;
 8007478:	bf00      	nop
 800747a:	e002      	b.n	8007482 <HAL_UART_IRQHandler+0x54e>
      return;
 800747c:	bf00      	nop
 800747e:	e000      	b.n	8007482 <HAL_UART_IRQHandler+0x54e>
      return;
 8007480:	bf00      	nop
  }
}
 8007482:	37e8      	adds	r7, #232	@ 0xe8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d8:	e03b      	b.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d037      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e2:	f7fa fedd 	bl	80022a0 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	6a3a      	ldr	r2, [r7, #32]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e03a      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d023      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b80      	cmp	r3, #128	@ 0x80
 800750e:	d020      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b40      	cmp	r3, #64	@ 0x40
 8007514:	d01d      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b08      	cmp	r3, #8
 8007522:	d116      	bne.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f857 	bl	80075ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2208      	movs	r2, #8
 8007544:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e00f      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	bf0c      	ite	eq
 8007562:	2301      	moveq	r3, #1
 8007564:	2300      	movne	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	429a      	cmp	r2, r3
 800756e:	d0b4      	beq.n	80074da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800757a:	b480      	push	{r7}
 800757c:	b085      	sub	sp, #20
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	4613      	mov	r3, r2
 8007586:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2222      	movs	r2, #34	@ 0x22
 80075a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0220 	orr.w	r2, r2, #32
 80075de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b095      	sub	sp, #84	@ 0x54
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800760c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007616:	643a      	str	r2, [r7, #64]	@ 0x40
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800761c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3314      	adds	r3, #20
 8007630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	61fb      	str	r3, [r7, #28]
   return(result);
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3314      	adds	r3, #20
 8007648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800764a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800764c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e5      	bne.n	800762a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007662:	2b01      	cmp	r3, #1
 8007664:	d119      	bne.n	800769a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	330c      	adds	r3, #12
 800766c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	60bb      	str	r3, [r7, #8]
   return(result);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f023 0310 	bic.w	r3, r3, #16
 800767c:	647b      	str	r3, [r7, #68]	@ 0x44
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007686:	61ba      	str	r2, [r7, #24]
 8007688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6979      	ldr	r1, [r7, #20]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	613b      	str	r3, [r7, #16]
   return(result);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80076a8:	bf00      	nop
 80076aa:	3754      	adds	r7, #84	@ 0x54
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff fee7 	bl	800749c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b085      	sub	sp, #20
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b21      	cmp	r3, #33	@ 0x21
 80076e8:	d13e      	bne.n	8007768 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f2:	d114      	bne.n	800771e <UART_Transmit_IT+0x48>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d110      	bne.n	800771e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007710:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	1c9a      	adds	r2, r3, #2
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	621a      	str	r2, [r3, #32]
 800771c:	e008      	b.n	8007730 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	1c59      	adds	r1, r3, #1
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6211      	str	r1, [r2, #32]
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b01      	subs	r3, #1
 8007738:	b29b      	uxth	r3, r3
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	4619      	mov	r1, r3
 800773e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10f      	bne.n	8007764 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007752:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007762:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	e000      	b.n	800776a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007768:	2302      	movs	r3, #2
  }
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800778c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff fe76 	bl	8007488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b08c      	sub	sp, #48	@ 0x30
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b22      	cmp	r3, #34	@ 0x22
 80077c0:	f040 80aa 	bne.w	8007918 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077cc:	d115      	bne.n	80077fa <UART_Receive_IT+0x54>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d111      	bne.n	80077fa <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f2:	1c9a      	adds	r2, r3, #2
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80077f8:	e024      	b.n	8007844 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007808:	d007      	beq.n	800781a <UART_Receive_IT+0x74>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <UART_Receive_IT+0x82>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	b2da      	uxtb	r2, r3
 8007822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	e008      	b.n	800783a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007834:	b2da      	uxtb	r2, r3
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007848:	b29b      	uxth	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	b29b      	uxth	r3, r3
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	4619      	mov	r1, r3
 8007852:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007854:	2b00      	cmp	r3, #0
 8007856:	d15d      	bne.n	8007914 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0220 	bic.w	r2, r2, #32
 8007866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695a      	ldr	r2, [r3, #20]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0201 	bic.w	r2, r2, #1
 8007886:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789a:	2b01      	cmp	r3, #1
 800789c:	d135      	bne.n	800790a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	613b      	str	r3, [r7, #16]
   return(result);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f023 0310 	bic.w	r3, r3, #16
 80078ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	330c      	adds	r3, #12
 80078c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c4:	623a      	str	r2, [r7, #32]
 80078c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	69f9      	ldr	r1, [r7, #28]
 80078ca:	6a3a      	ldr	r2, [r7, #32]
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e5      	bne.n	80078a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0310 	and.w	r3, r3, #16
 80078e2:	2b10      	cmp	r3, #16
 80078e4:	d10a      	bne.n	80078fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fdd4 	bl	80074b0 <HAL_UARTEx_RxEventCallback>
 8007908:	e002      	b.n	8007910 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7f9 fe58 	bl	80015c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	e002      	b.n	800791a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	e000      	b.n	800791a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007918:	2302      	movs	r3, #2
  }
}
 800791a:	4618      	mov	r0, r3
 800791c:	3730      	adds	r7, #48	@ 0x30
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007928:	b0c0      	sub	sp, #256	@ 0x100
 800792a:	af00      	add	r7, sp, #0
 800792c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800793c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007940:	68d9      	ldr	r1, [r3, #12]
 8007942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	ea40 0301 	orr.w	r3, r0, r1
 800794c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800794e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	431a      	orrs	r2, r3
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	431a      	orrs	r2, r3
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	4313      	orrs	r3, r2
 800796c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800797c:	f021 010c 	bic.w	r1, r1, #12
 8007980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800798a:	430b      	orrs	r3, r1
 800798c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800799a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799e:	6999      	ldr	r1, [r3, #24]
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	ea40 0301 	orr.w	r3, r0, r1
 80079aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4b8f      	ldr	r3, [pc, #572]	@ (8007bf0 <UART_SetConfig+0x2cc>)
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d005      	beq.n	80079c4 <UART_SetConfig+0xa0>
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b8d      	ldr	r3, [pc, #564]	@ (8007bf4 <UART_SetConfig+0x2d0>)
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d104      	bne.n	80079ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079c4:	f7fd fcc4 	bl	8005350 <HAL_RCC_GetPCLK2Freq>
 80079c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80079cc:	e003      	b.n	80079d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ce:	f7fd fcab 	bl	8005328 <HAL_RCC_GetPCLK1Freq>
 80079d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e0:	f040 810c 	bne.w	8007bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079f6:	4622      	mov	r2, r4
 80079f8:	462b      	mov	r3, r5
 80079fa:	1891      	adds	r1, r2, r2
 80079fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079fe:	415b      	adcs	r3, r3
 8007a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a06:	4621      	mov	r1, r4
 8007a08:	eb12 0801 	adds.w	r8, r2, r1
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	eb43 0901 	adc.w	r9, r3, r1
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a26:	4690      	mov	r8, r2
 8007a28:	4699      	mov	r9, r3
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	eb18 0303 	adds.w	r3, r8, r3
 8007a30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a34:	462b      	mov	r3, r5
 8007a36:	eb49 0303 	adc.w	r3, r9, r3
 8007a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a52:	460b      	mov	r3, r1
 8007a54:	18db      	adds	r3, r3, r3
 8007a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a58:	4613      	mov	r3, r2
 8007a5a:	eb42 0303 	adc.w	r3, r2, r3
 8007a5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a68:	f7f8 fc0a 	bl	8000280 <__aeabi_uldivmod>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4b61      	ldr	r3, [pc, #388]	@ (8007bf8 <UART_SetConfig+0x2d4>)
 8007a72:	fba3 2302 	umull	r2, r3, r3, r2
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	011c      	lsls	r4, r3, #4
 8007a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a8c:	4642      	mov	r2, r8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	1891      	adds	r1, r2, r2
 8007a92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a94:	415b      	adcs	r3, r3
 8007a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007abc:	4692      	mov	sl, r2
 8007abe:	469b      	mov	fp, r3
 8007ac0:	4643      	mov	r3, r8
 8007ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007aca:	464b      	mov	r3, r9
 8007acc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	18db      	adds	r3, r3, r3
 8007aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aee:	4613      	mov	r3, r2
 8007af0:	eb42 0303 	adc.w	r3, r2, r3
 8007af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007afe:	f7f8 fbbf 	bl	8000280 <__aeabi_uldivmod>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	4b3b      	ldr	r3, [pc, #236]	@ (8007bf8 <UART_SetConfig+0x2d4>)
 8007b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	2264      	movs	r2, #100	@ 0x64
 8007b12:	fb02 f303 	mul.w	r3, r2, r3
 8007b16:	1acb      	subs	r3, r1, r3
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b1e:	4b36      	ldr	r3, [pc, #216]	@ (8007bf8 <UART_SetConfig+0x2d4>)
 8007b20:	fba3 2302 	umull	r2, r3, r3, r2
 8007b24:	095b      	lsrs	r3, r3, #5
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b2c:	441c      	add	r4, r3
 8007b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b40:	4642      	mov	r2, r8
 8007b42:	464b      	mov	r3, r9
 8007b44:	1891      	adds	r1, r2, r2
 8007b46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b48:	415b      	adcs	r3, r3
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b50:	4641      	mov	r1, r8
 8007b52:	1851      	adds	r1, r2, r1
 8007b54:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b56:	4649      	mov	r1, r9
 8007b58:	414b      	adcs	r3, r1
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5c:	f04f 0200 	mov.w	r2, #0
 8007b60:	f04f 0300 	mov.w	r3, #0
 8007b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b68:	4659      	mov	r1, fp
 8007b6a:	00cb      	lsls	r3, r1, #3
 8007b6c:	4651      	mov	r1, sl
 8007b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b72:	4651      	mov	r1, sl
 8007b74:	00ca      	lsls	r2, r1, #3
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	189b      	adds	r3, r3, r2
 8007b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b84:	464b      	mov	r3, r9
 8007b86:	460a      	mov	r2, r1
 8007b88:	eb42 0303 	adc.w	r3, r2, r3
 8007b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	18db      	adds	r3, r3, r3
 8007ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007baa:	4613      	mov	r3, r2
 8007bac:	eb42 0303 	adc.w	r3, r2, r3
 8007bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007bba:	f7f8 fb61 	bl	8000280 <__aeabi_uldivmod>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf8 <UART_SetConfig+0x2d4>)
 8007bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc8:	095b      	lsrs	r3, r3, #5
 8007bca:	2164      	movs	r1, #100	@ 0x64
 8007bcc:	fb01 f303 	mul.w	r3, r1, r3
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	3332      	adds	r3, #50	@ 0x32
 8007bd6:	4a08      	ldr	r2, [pc, #32]	@ (8007bf8 <UART_SetConfig+0x2d4>)
 8007bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	f003 0207 	and.w	r2, r3, #7
 8007be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4422      	add	r2, r4
 8007bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bec:	e106      	b.n	8007dfc <UART_SetConfig+0x4d8>
 8007bee:	bf00      	nop
 8007bf0:	40011000 	.word	0x40011000
 8007bf4:	40011400 	.word	0x40011400
 8007bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c0e:	4642      	mov	r2, r8
 8007c10:	464b      	mov	r3, r9
 8007c12:	1891      	adds	r1, r2, r2
 8007c14:	6239      	str	r1, [r7, #32]
 8007c16:	415b      	adcs	r3, r3
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c1e:	4641      	mov	r1, r8
 8007c20:	1854      	adds	r4, r2, r1
 8007c22:	4649      	mov	r1, r9
 8007c24:	eb43 0501 	adc.w	r5, r3, r1
 8007c28:	f04f 0200 	mov.w	r2, #0
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	00eb      	lsls	r3, r5, #3
 8007c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c36:	00e2      	lsls	r2, r4, #3
 8007c38:	4614      	mov	r4, r2
 8007c3a:	461d      	mov	r5, r3
 8007c3c:	4643      	mov	r3, r8
 8007c3e:	18e3      	adds	r3, r4, r3
 8007c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c44:	464b      	mov	r3, r9
 8007c46:	eb45 0303 	adc.w	r3, r5, r3
 8007c4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	008b      	lsls	r3, r1, #2
 8007c6e:	4621      	mov	r1, r4
 8007c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c74:	4621      	mov	r1, r4
 8007c76:	008a      	lsls	r2, r1, #2
 8007c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c7c:	f7f8 fb00 	bl	8000280 <__aeabi_uldivmod>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4b60      	ldr	r3, [pc, #384]	@ (8007e08 <UART_SetConfig+0x4e4>)
 8007c86:	fba3 2302 	umull	r2, r3, r3, r2
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	011c      	lsls	r4, r3, #4
 8007c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	1891      	adds	r1, r2, r2
 8007ca6:	61b9      	str	r1, [r7, #24]
 8007ca8:	415b      	adcs	r3, r3
 8007caa:	61fb      	str	r3, [r7, #28]
 8007cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cb0:	4641      	mov	r1, r8
 8007cb2:	1851      	adds	r1, r2, r1
 8007cb4:	6139      	str	r1, [r7, #16]
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	414b      	adcs	r3, r1
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cc8:	4659      	mov	r1, fp
 8007cca:	00cb      	lsls	r3, r1, #3
 8007ccc:	4651      	mov	r1, sl
 8007cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cd2:	4651      	mov	r1, sl
 8007cd4:	00ca      	lsls	r2, r1, #3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4642      	mov	r2, r8
 8007cde:	189b      	adds	r3, r3, r2
 8007ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	460a      	mov	r2, r1
 8007ce8:	eb42 0303 	adc.w	r3, r2, r3
 8007cec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d08:	4649      	mov	r1, r9
 8007d0a:	008b      	lsls	r3, r1, #2
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d12:	4641      	mov	r1, r8
 8007d14:	008a      	lsls	r2, r1, #2
 8007d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d1a:	f7f8 fab1 	bl	8000280 <__aeabi_uldivmod>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	4b38      	ldr	r3, [pc, #224]	@ (8007e08 <UART_SetConfig+0x4e4>)
 8007d26:	fba3 2301 	umull	r2, r3, r3, r1
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	2264      	movs	r2, #100	@ 0x64
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	1acb      	subs	r3, r1, r3
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	3332      	adds	r3, #50	@ 0x32
 8007d38:	4a33      	ldr	r2, [pc, #204]	@ (8007e08 <UART_SetConfig+0x4e4>)
 8007d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d44:	441c      	add	r4, r3
 8007d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d54:	4642      	mov	r2, r8
 8007d56:	464b      	mov	r3, r9
 8007d58:	1891      	adds	r1, r2, r2
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	415b      	adcs	r3, r3
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d64:	4641      	mov	r1, r8
 8007d66:	1851      	adds	r1, r2, r1
 8007d68:	6039      	str	r1, [r7, #0]
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	414b      	adcs	r3, r1
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d7c:	4659      	mov	r1, fp
 8007d7e:	00cb      	lsls	r3, r1, #3
 8007d80:	4651      	mov	r1, sl
 8007d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d86:	4651      	mov	r1, sl
 8007d88:	00ca      	lsls	r2, r1, #3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4642      	mov	r2, r8
 8007d92:	189b      	adds	r3, r3, r2
 8007d94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d96:	464b      	mov	r3, r9
 8007d98:	460a      	mov	r2, r1
 8007d9a:	eb42 0303 	adc.w	r3, r2, r3
 8007d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007daa:	667a      	str	r2, [r7, #100]	@ 0x64
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007db8:	4649      	mov	r1, r9
 8007dba:	008b      	lsls	r3, r1, #2
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dc2:	4641      	mov	r1, r8
 8007dc4:	008a      	lsls	r2, r1, #2
 8007dc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007dca:	f7f8 fa59 	bl	8000280 <__aeabi_uldivmod>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <UART_SetConfig+0x4e4>)
 8007dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd8:	095b      	lsrs	r3, r3, #5
 8007dda:	2164      	movs	r1, #100	@ 0x64
 8007ddc:	fb01 f303 	mul.w	r3, r1, r3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	3332      	adds	r3, #50	@ 0x32
 8007de6:	4a08      	ldr	r2, [pc, #32]	@ (8007e08 <UART_SetConfig+0x4e4>)
 8007de8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dec:	095b      	lsrs	r3, r3, #5
 8007dee:	f003 020f 	and.w	r2, r3, #15
 8007df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4422      	add	r2, r4
 8007dfa:	609a      	str	r2, [r3, #8]
}
 8007dfc:	bf00      	nop
 8007dfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e02:	46bd      	mov	sp, r7
 8007e04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e08:	51eb851f 	.word	0x51eb851f

08007e0c <__NVIC_SetPriority>:
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	db0a      	blt.n	8007e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	490c      	ldr	r1, [pc, #48]	@ (8007e58 <__NVIC_SetPriority+0x4c>)
 8007e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2a:	0112      	lsls	r2, r2, #4
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	440b      	add	r3, r1
 8007e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007e34:	e00a      	b.n	8007e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	4908      	ldr	r1, [pc, #32]	@ (8007e5c <__NVIC_SetPriority+0x50>)
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	3b04      	subs	r3, #4
 8007e44:	0112      	lsls	r2, r2, #4
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	440b      	add	r3, r1
 8007e4a:	761a      	strb	r2, [r3, #24]
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	e000e100 	.word	0xe000e100
 8007e5c:	e000ed00 	.word	0xe000ed00

08007e60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e64:	4b05      	ldr	r3, [pc, #20]	@ (8007e7c <SysTick_Handler+0x1c>)
 8007e66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e68:	f001 fdd4 	bl	8009a14 <xTaskGetSchedulerState>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d001      	beq.n	8007e76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e72:	f002 fbc9 	bl	800a608 <xPortSysTickHandler>
  }
}
 8007e76:	bf00      	nop
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	e000e010 	.word	0xe000e010

08007e80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e84:	2100      	movs	r1, #0
 8007e86:	f06f 0004 	mvn.w	r0, #4
 8007e8a:	f7ff ffbf 	bl	8007e0c <__NVIC_SetPriority>
#endif
}
 8007e8e:	bf00      	nop
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e9a:	f3ef 8305 	mrs	r3, IPSR
 8007e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8007ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ea6:	f06f 0305 	mvn.w	r3, #5
 8007eaa:	607b      	str	r3, [r7, #4]
 8007eac:	e00c      	b.n	8007ec8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007eae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <osKernelInitialize+0x44>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007eb6:	4b08      	ldr	r3, [pc, #32]	@ (8007ed8 <osKernelInitialize+0x44>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	e002      	b.n	8007ec8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ec8:	687b      	ldr	r3, [r7, #4]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	200003bc 	.word	0x200003bc

08007edc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ee2:	f3ef 8305 	mrs	r3, IPSR
 8007ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007eee:	f06f 0305 	mvn.w	r3, #5
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	e010      	b.n	8007f18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f24 <osKernelStart+0x48>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d109      	bne.n	8007f12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007efe:	f7ff ffbf 	bl	8007e80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f02:	4b08      	ldr	r3, [pc, #32]	@ (8007f24 <osKernelStart+0x48>)
 8007f04:	2202      	movs	r2, #2
 8007f06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f08:	f001 f936 	bl	8009178 <vTaskStartScheduler>
      stat = osOK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	607b      	str	r3, [r7, #4]
 8007f10:	e002      	b.n	8007f18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f12:	f04f 33ff 	mov.w	r3, #4294967295
 8007f16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f18:	687b      	ldr	r3, [r7, #4]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	200003bc 	.word	0x200003bc

08007f28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08e      	sub	sp, #56	@ 0x38
 8007f2c:	af04      	add	r7, sp, #16
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f38:	f3ef 8305 	mrs	r3, IPSR
 8007f3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007f3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d17e      	bne.n	8008042 <osThreadNew+0x11a>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d07b      	beq.n	8008042 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f4a:	2380      	movs	r3, #128	@ 0x80
 8007f4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f4e:	2318      	movs	r3, #24
 8007f50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d045      	beq.n	8007fee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <osThreadNew+0x48>
        name = attr->name;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d008      	beq.n	8007f96 <osThreadNew+0x6e>
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	2b38      	cmp	r3, #56	@ 0x38
 8007f88:	d805      	bhi.n	8007f96 <osThreadNew+0x6e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <osThreadNew+0x72>
        return (NULL);
 8007f96:	2300      	movs	r3, #0
 8007f98:	e054      	b.n	8008044 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00e      	beq.n	8007fd0 <osThreadNew+0xa8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b5b      	cmp	r3, #91	@ 0x5b
 8007fb8:	d90a      	bls.n	8007fd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d006      	beq.n	8007fd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <osThreadNew+0xa8>
        mem = 1;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	e010      	b.n	8007ff2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10c      	bne.n	8007ff2 <osThreadNew+0xca>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d108      	bne.n	8007ff2 <osThreadNew+0xca>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <osThreadNew+0xca>
          mem = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	e001      	b.n	8007ff2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d110      	bne.n	800801a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008000:	9202      	str	r2, [sp, #8]
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	6a3a      	ldr	r2, [r7, #32]
 800800c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fe56 	bl	8008cc0 <xTaskCreateStatic>
 8008014:	4603      	mov	r3, r0
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	e013      	b.n	8008042 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d110      	bne.n	8008042 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	b29a      	uxth	r2, r3
 8008024:	f107 0310 	add.w	r3, r7, #16
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fea4 	bl	8008d80 <xTaskCreate>
 8008038:	4603      	mov	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	d001      	beq.n	8008042 <osThreadNew+0x11a>
            hTask = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008042:	693b      	ldr	r3, [r7, #16]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3728      	adds	r7, #40	@ 0x28
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008054:	f3ef 8305 	mrs	r3, IPSR
 8008058:	60bb      	str	r3, [r7, #8]
  return(result);
 800805a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <osDelay+0x1c>
    stat = osErrorISR;
 8008060:	f06f 0305 	mvn.w	r3, #5
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	e007      	b.n	8008078 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d002      	beq.n	8008078 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 f84a 	bl	800910c <vTaskDelay>
    }
  }

  return (stat);
 8008078:	68fb      	ldr	r3, [r7, #12]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4a07      	ldr	r2, [pc, #28]	@ (80080b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008094:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	4a06      	ldr	r2, [pc, #24]	@ (80080b4 <vApplicationGetIdleTaskMemory+0x30>)
 800809a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2280      	movs	r2, #128	@ 0x80
 80080a0:	601a      	str	r2, [r3, #0]
}
 80080a2:	bf00      	nop
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	200003c0 	.word	0x200003c0
 80080b4:	2000041c 	.word	0x2000041c

080080b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a07      	ldr	r2, [pc, #28]	@ (80080e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80080c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	4a06      	ldr	r2, [pc, #24]	@ (80080e8 <vApplicationGetTimerTaskMemory+0x30>)
 80080ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080d6:	601a      	str	r2, [r3, #0]
}
 80080d8:	bf00      	nop
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	2000061c 	.word	0x2000061c
 80080e8:	20000678 	.word	0x20000678

080080ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f103 0208 	add.w	r2, r3, #8
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f04f 32ff 	mov.w	r2, #4294967295
 8008104:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f103 0208 	add.w	r2, r3, #8
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f103 0208 	add.w	r2, r3, #8
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	601a      	str	r2, [r3, #0]
}
 8008182:	bf00      	nop
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800818e:	b480      	push	{r7}
 8008190:	b085      	sub	sp, #20
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d103      	bne.n	80081ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	e00c      	b.n	80081c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3308      	adds	r3, #8
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	e002      	b.n	80081bc <vListInsert+0x2e>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d2f6      	bcs.n	80081b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	6892      	ldr	r2, [r2, #8]
 8008216:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6852      	ldr	r2, [r2, #4]
 8008220:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	429a      	cmp	r2, r3
 800822a:	d103      	bne.n	8008234 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	1e5a      	subs	r2, r3, #1
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10b      	bne.n	8008280 <xQueueGenericReset+0x2c>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	60bb      	str	r3, [r7, #8]
}
 800827a:	bf00      	nop
 800827c:	bf00      	nop
 800827e:	e7fd      	b.n	800827c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008280:	f002 f932 	bl	800a4e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800828c:	68f9      	ldr	r1, [r7, #12]
 800828e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	441a      	add	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b0:	3b01      	subs	r3, #1
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	441a      	add	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	22ff      	movs	r2, #255	@ 0xff
 80082c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	22ff      	movs	r2, #255	@ 0xff
 80082cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d114      	bne.n	8008300 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01a      	beq.n	8008314 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3310      	adds	r3, #16
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 f9d6 	bl	8009694 <xTaskRemoveFromEventList>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d012      	beq.n	8008314 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008324 <xQueueGenericReset+0xd0>)
 80082f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	e009      	b.n	8008314 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3310      	adds	r3, #16
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff fef1 	bl	80080ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3324      	adds	r3, #36	@ 0x24
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff feec 	bl	80080ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008314:	f002 f91a 	bl	800a54c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008318:	2301      	movs	r3, #1
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	e000ed04 	.word	0xe000ed04

08008328 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08e      	sub	sp, #56	@ 0x38
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	e7fd      	b.n	800836e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <xQueueGenericCreateStatic+0x56>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <xQueueGenericCreateStatic+0x5a>
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <xQueueGenericCreateStatic+0x5c>
 8008382:	2300      	movs	r3, #0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	623b      	str	r3, [r7, #32]
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d102      	bne.n	80083ac <xQueueGenericCreateStatic+0x84>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <xQueueGenericCreateStatic+0x88>
 80083ac:	2301      	movs	r3, #1
 80083ae:	e000      	b.n	80083b2 <xQueueGenericCreateStatic+0x8a>
 80083b0:	2300      	movs	r3, #0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	61fb      	str	r3, [r7, #28]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083ce:	2350      	movs	r3, #80	@ 0x50
 80083d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b50      	cmp	r3, #80	@ 0x50
 80083d6:	d00b      	beq.n	80083f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	61bb      	str	r3, [r7, #24]
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80083f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00d      	beq.n	8008418 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008404:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	4613      	mov	r3, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f840 	bl	8008498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800841a:	4618      	mov	r0, r3
 800841c:	3730      	adds	r7, #48	@ 0x30
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008422:	b580      	push	{r7, lr}
 8008424:	b08a      	sub	sp, #40	@ 0x28
 8008426:	af02      	add	r7, sp, #8
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	4613      	mov	r3, r2
 800842e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <xQueueGenericCreate+0x2c>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	613b      	str	r3, [r7, #16]
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	e7fd      	b.n	800844a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	fb02 f303 	mul.w	r3, r2, r3
 8008456:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	3350      	adds	r3, #80	@ 0x50
 800845c:	4618      	mov	r0, r3
 800845e:	f002 f965 	bl	800a72c <pvPortMalloc>
 8008462:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d011      	beq.n	800848e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	3350      	adds	r3, #80	@ 0x50
 8008472:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800847c:	79fa      	ldrb	r2, [r7, #7]
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	4613      	mov	r3, r2
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	68b9      	ldr	r1, [r7, #8]
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 f805 	bl	8008498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800848e:	69bb      	ldr	r3, [r7, #24]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d103      	bne.n	80084b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	e002      	b.n	80084ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084c6:	2101      	movs	r1, #1
 80084c8:	69b8      	ldr	r0, [r7, #24]
 80084ca:	f7ff fec3 	bl	8008254 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08e      	sub	sp, #56	@ 0x38
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084ee:	2300      	movs	r3, #0
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <xQueueGenericSend+0x34>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	e7fd      	b.n	8008510 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d103      	bne.n	8008522 <xQueueGenericSend+0x42>
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <xQueueGenericSend+0x46>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <xQueueGenericSend+0x48>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10b      	bne.n	8008544 <xQueueGenericSend+0x64>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800853e:	bf00      	nop
 8008540:	bf00      	nop
 8008542:	e7fd      	b.n	8008540 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d103      	bne.n	8008552 <xQueueGenericSend+0x72>
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854e:	2b01      	cmp	r3, #1
 8008550:	d101      	bne.n	8008556 <xQueueGenericSend+0x76>
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <xQueueGenericSend+0x78>
 8008556:	2300      	movs	r3, #0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10b      	bne.n	8008574 <xQueueGenericSend+0x94>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	623b      	str	r3, [r7, #32]
}
 800856e:	bf00      	nop
 8008570:	bf00      	nop
 8008572:	e7fd      	b.n	8008570 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008574:	f001 fa4e 	bl	8009a14 <xTaskGetSchedulerState>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <xQueueGenericSend+0xa4>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <xQueueGenericSend+0xa8>
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <xQueueGenericSend+0xaa>
 8008588:	2300      	movs	r3, #0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	61fb      	str	r3, [r7, #28]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085a6:	f001 ff9f 	bl	800a4e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d302      	bcc.n	80085bc <xQueueGenericSend+0xdc>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d129      	bne.n	8008610 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	68b9      	ldr	r1, [r7, #8]
 80085c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085c2:	f000 fa0f 	bl	80089e4 <prvCopyDataToQueue>
 80085c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d010      	beq.n	80085f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	3324      	adds	r3, #36	@ 0x24
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 f85d 	bl	8009694 <xTaskRemoveFromEventList>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d013      	beq.n	8008608 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085e0:	4b3f      	ldr	r3, [pc, #252]	@ (80086e0 <xQueueGenericSend+0x200>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	e00a      	b.n	8008608 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085f8:	4b39      	ldr	r3, [pc, #228]	@ (80086e0 <xQueueGenericSend+0x200>)
 80085fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008608:	f001 ffa0 	bl	800a54c <vPortExitCritical>
				return pdPASS;
 800860c:	2301      	movs	r3, #1
 800860e:	e063      	b.n	80086d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d103      	bne.n	800861e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008616:	f001 ff99 	bl	800a54c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800861a:	2300      	movs	r3, #0
 800861c:	e05c      	b.n	80086d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800861e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008620:	2b00      	cmp	r3, #0
 8008622:	d106      	bne.n	8008632 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	4618      	mov	r0, r3
 800862a:	f001 f897 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800862e:	2301      	movs	r3, #1
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008632:	f001 ff8b 	bl	800a54c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008636:	f000 fe07 	bl	8009248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800863a:	f001 ff55 	bl	800a4e8 <vPortEnterCritical>
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008644:	b25b      	sxtb	r3, r3
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	d103      	bne.n	8008654 <xQueueGenericSend+0x174>
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800865a:	b25b      	sxtb	r3, r3
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008660:	d103      	bne.n	800866a <xQueueGenericSend+0x18a>
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800866a:	f001 ff6f 	bl	800a54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800866e:	1d3a      	adds	r2, r7, #4
 8008670:	f107 0314 	add.w	r3, r7, #20
 8008674:	4611      	mov	r1, r2
 8008676:	4618      	mov	r0, r3
 8008678:	f001 f886 	bl	8009788 <xTaskCheckForTimeOut>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d124      	bne.n	80086cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008684:	f000 faa6 	bl	8008bd4 <prvIsQueueFull>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d018      	beq.n	80086c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	3310      	adds	r3, #16
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f000 ffaa 	bl	80095f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800869c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800869e:	f000 fa31 	bl	8008b04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086a2:	f000 fddf 	bl	8009264 <xTaskResumeAll>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f47f af7c 	bne.w	80085a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80086ae:	4b0c      	ldr	r3, [pc, #48]	@ (80086e0 <xQueueGenericSend+0x200>)
 80086b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	e772      	b.n	80085a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086c2:	f000 fa1f 	bl	8008b04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086c6:	f000 fdcd 	bl	8009264 <xTaskResumeAll>
 80086ca:	e76c      	b.n	80085a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ce:	f000 fa19 	bl	8008b04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086d2:	f000 fdc7 	bl	8009264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3738      	adds	r7, #56	@ 0x38
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b090      	sub	sp, #64	@ 0x40
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10b      	bne.n	8008714 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <xQueueGenericSendFromISR+0x3e>
 800871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <xQueueGenericSendFromISR+0x42>
 8008722:	2301      	movs	r3, #1
 8008724:	e000      	b.n	8008728 <xQueueGenericSendFromISR+0x44>
 8008726:	2300      	movs	r3, #0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10b      	bne.n	8008744 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800873e:	bf00      	nop
 8008740:	bf00      	nop
 8008742:	e7fd      	b.n	8008740 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d103      	bne.n	8008752 <xQueueGenericSendFromISR+0x6e>
 800874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800874e:	2b01      	cmp	r3, #1
 8008750:	d101      	bne.n	8008756 <xQueueGenericSendFromISR+0x72>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <xQueueGenericSendFromISR+0x74>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10b      	bne.n	8008774 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	623b      	str	r3, [r7, #32]
}
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	e7fd      	b.n	8008770 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008774:	f001 ff98 	bl	800a6a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008778:	f3ef 8211 	mrs	r2, BASEPRI
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	61fa      	str	r2, [r7, #28]
 800878e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008790:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800879c:	429a      	cmp	r2, r3
 800879e:	d302      	bcc.n	80087a6 <xQueueGenericSendFromISR+0xc2>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d12f      	bne.n	8008806 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087bc:	f000 f912 	bl	80089e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80087c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c8:	d112      	bne.n	80087f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d016      	beq.n	8008800 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d4:	3324      	adds	r3, #36	@ 0x24
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 ff5c 	bl	8009694 <xTaskRemoveFromEventList>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00e      	beq.n	8008800 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	e007      	b.n	8008800 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087f4:	3301      	adds	r3, #1
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	b25a      	sxtb	r2, r3
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008800:	2301      	movs	r3, #1
 8008802:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008804:	e001      	b.n	800880a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008806:	2300      	movs	r3, #0
 8008808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800880a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008814:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008818:	4618      	mov	r0, r3
 800881a:	3740      	adds	r7, #64	@ 0x40
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08c      	sub	sp, #48	@ 0x30
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800882c:	2300      	movs	r3, #0
 800882e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <xQueueReceive+0x32>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	623b      	str	r3, [r7, #32]
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	e7fd      	b.n	800884e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d103      	bne.n	8008860 <xQueueReceive+0x40>
 8008858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <xQueueReceive+0x44>
 8008860:	2301      	movs	r3, #1
 8008862:	e000      	b.n	8008866 <xQueueReceive+0x46>
 8008864:	2300      	movs	r3, #0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <xQueueReceive+0x62>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	61fb      	str	r3, [r7, #28]
}
 800887c:	bf00      	nop
 800887e:	bf00      	nop
 8008880:	e7fd      	b.n	800887e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008882:	f001 f8c7 	bl	8009a14 <xTaskGetSchedulerState>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <xQueueReceive+0x72>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <xQueueReceive+0x76>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <xQueueReceive+0x78>
 8008896:	2300      	movs	r3, #0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10b      	bne.n	80088b4 <xQueueReceive+0x94>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	61bb      	str	r3, [r7, #24]
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088b4:	f001 fe18 	bl	800a4e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d01f      	beq.n	8008904 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c8:	f000 f8f6 	bl	8008ab8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	1e5a      	subs	r2, r3, #1
 80088d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00f      	beq.n	80088fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088de:	3310      	adds	r3, #16
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fed7 	bl	8009694 <xTaskRemoveFromEventList>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d007      	beq.n	80088fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088ec:	4b3c      	ldr	r3, [pc, #240]	@ (80089e0 <xQueueReceive+0x1c0>)
 80088ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088fc:	f001 fe26 	bl	800a54c <vPortExitCritical>
				return pdPASS;
 8008900:	2301      	movs	r3, #1
 8008902:	e069      	b.n	80089d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d103      	bne.n	8008912 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800890a:	f001 fe1f 	bl	800a54c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800890e:	2300      	movs	r3, #0
 8008910:	e062      	b.n	80089d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008918:	f107 0310 	add.w	r3, r7, #16
 800891c:	4618      	mov	r0, r3
 800891e:	f000 ff1d 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008922:	2301      	movs	r3, #1
 8008924:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008926:	f001 fe11 	bl	800a54c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800892a:	f000 fc8d 	bl	8009248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800892e:	f001 fddb 	bl	800a4e8 <vPortEnterCritical>
 8008932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008934:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008938:	b25b      	sxtb	r3, r3
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d103      	bne.n	8008948 <xQueueReceive+0x128>
 8008940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800894e:	b25b      	sxtb	r3, r3
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d103      	bne.n	800895e <xQueueReceive+0x13e>
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800895e:	f001 fdf5 	bl	800a54c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008962:	1d3a      	adds	r2, r7, #4
 8008964:	f107 0310 	add.w	r3, r7, #16
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f000 ff0c 	bl	8009788 <xTaskCheckForTimeOut>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d123      	bne.n	80089be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008978:	f000 f916 	bl	8008ba8 <prvIsQueueEmpty>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d017      	beq.n	80089b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008984:	3324      	adds	r3, #36	@ 0x24
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fe30 	bl	80095f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008992:	f000 f8b7 	bl	8008b04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008996:	f000 fc65 	bl	8009264 <xTaskResumeAll>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d189      	bne.n	80088b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80089a0:	4b0f      	ldr	r3, [pc, #60]	@ (80089e0 <xQueueReceive+0x1c0>)
 80089a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	e780      	b.n	80088b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089b4:	f000 f8a6 	bl	8008b04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089b8:	f000 fc54 	bl	8009264 <xTaskResumeAll>
 80089bc:	e77a      	b.n	80088b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c0:	f000 f8a0 	bl	8008b04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089c4:	f000 fc4e 	bl	8009264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089ca:	f000 f8ed 	bl	8008ba8 <prvIsQueueEmpty>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f43f af6f 	beq.w	80088b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3730      	adds	r7, #48	@ 0x30
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	e000ed04 	.word	0xe000ed04

080089e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10d      	bne.n	8008a1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d14d      	bne.n	8008aa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 f81e 	bl	8009a50 <xTaskPriorityDisinherit>
 8008a14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	609a      	str	r2, [r3, #8]
 8008a1c:	e043      	b.n	8008aa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d119      	bne.n	8008a58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6858      	ldr	r0, [r3, #4]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	f002 fa29 	bl	800ae86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3c:	441a      	add	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d32b      	bcc.n	8008aa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	605a      	str	r2, [r3, #4]
 8008a56:	e026      	b.n	8008aa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68d8      	ldr	r0, [r3, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a60:	461a      	mov	r2, r3
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	f002 fa0f 	bl	800ae86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a70:	425b      	negs	r3, r3
 8008a72:	441a      	add	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d207      	bcs.n	8008a94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	441a      	add	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d105      	bne.n	8008aa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008aae:	697b      	ldr	r3, [r7, #20]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d018      	beq.n	8008afc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad2:	441a      	add	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d303      	bcc.n	8008aec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68d9      	ldr	r1, [r3, #12]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af4:	461a      	mov	r2, r3
 8008af6:	6838      	ldr	r0, [r7, #0]
 8008af8:	f002 f9c5 	bl	800ae86 <memcpy>
	}
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b0c:	f001 fcec 	bl	800a4e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b18:	e011      	b.n	8008b3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d012      	beq.n	8008b48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3324      	adds	r3, #36	@ 0x24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fdb4 	bl	8009694 <xTaskRemoveFromEventList>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b32:	f000 fe8d 	bl	8009850 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	dce9      	bgt.n	8008b1a <prvUnlockQueue+0x16>
 8008b46:	e000      	b.n	8008b4a <prvUnlockQueue+0x46>
					break;
 8008b48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	22ff      	movs	r2, #255	@ 0xff
 8008b4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008b52:	f001 fcfb 	bl	800a54c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b56:	f001 fcc7 	bl	800a4e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b62:	e011      	b.n	8008b88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d012      	beq.n	8008b92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3310      	adds	r3, #16
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fd8f 	bl	8009694 <xTaskRemoveFromEventList>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b7c:	f000 fe68 	bl	8009850 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dce9      	bgt.n	8008b64 <prvUnlockQueue+0x60>
 8008b90:	e000      	b.n	8008b94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	22ff      	movs	r2, #255	@ 0xff
 8008b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008b9c:	f001 fcd6 	bl	800a54c <vPortExitCritical>
}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bb0:	f001 fc9a 	bl	800a4e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e001      	b.n	8008bc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bc6:	f001 fcc1 	bl	800a54c <vPortExitCritical>

	return xReturn;
 8008bca:	68fb      	ldr	r3, [r7, #12]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bdc:	f001 fc84 	bl	800a4e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d102      	bne.n	8008bf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bec:	2301      	movs	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e001      	b.n	8008bf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bf6:	f001 fca9 	bl	800a54c <vPortExitCritical>

	return xReturn;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	e014      	b.n	8008c3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c14:	4a0f      	ldr	r2, [pc, #60]	@ (8008c54 <vQueueAddToRegistry+0x50>)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10b      	bne.n	8008c38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c20:	490c      	ldr	r1, [pc, #48]	@ (8008c54 <vQueueAddToRegistry+0x50>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008c54 <vQueueAddToRegistry+0x50>)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	4413      	add	r3, r2
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c36:	e006      	b.n	8008c46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b07      	cmp	r3, #7
 8008c42:	d9e7      	bls.n	8008c14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20000a78 	.word	0x20000a78

08008c58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c68:	f001 fc3e 	bl	800a4e8 <vPortEnterCritical>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c72:	b25b      	sxtb	r3, r3
 8008c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c78:	d103      	bne.n	8008c82 <vQueueWaitForMessageRestricted+0x2a>
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c88:	b25b      	sxtb	r3, r3
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8e:	d103      	bne.n	8008c98 <vQueueWaitForMessageRestricted+0x40>
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c98:	f001 fc58 	bl	800a54c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d106      	bne.n	8008cb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	3324      	adds	r3, #36	@ 0x24
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fcc5 	bl	800963c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008cb2:	6978      	ldr	r0, [r7, #20]
 8008cb4:	f7ff ff26 	bl	8008b04 <prvUnlockQueue>
	}
 8008cb8:	bf00      	nop
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08e      	sub	sp, #56	@ 0x38
 8008cc4:	af04      	add	r7, sp, #16
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10b      	bne.n	8008cec <xTaskCreateStatic+0x2c>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	623b      	str	r3, [r7, #32]
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	e7fd      	b.n	8008ce8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	61fb      	str	r3, [r7, #28]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d0a:	235c      	movs	r3, #92	@ 0x5c
 8008d0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d12:	d00b      	beq.n	8008d2c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	61bb      	str	r3, [r7, #24]
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d01e      	beq.n	8008d72 <xTaskCreateStatic+0xb2>
 8008d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d01b      	beq.n	8008d72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	9302      	str	r3, [sp, #8]
 8008d54:	f107 0314 	add.w	r3, r7, #20
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 f850 	bl	8008e0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d6c:	f000 f8de 	bl	8008f2c <prvAddNewTaskToReadyList>
 8008d70:	e001      	b.n	8008d76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d76:	697b      	ldr	r3, [r7, #20]
	}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3728      	adds	r7, #40	@ 0x28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08c      	sub	sp, #48	@ 0x30
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f001 fcc9 	bl	800a72c <pvPortMalloc>
 8008d9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00e      	beq.n	8008dc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008da2:	205c      	movs	r0, #92	@ 0x5c
 8008da4:	f001 fcc2 	bl	800a72c <pvPortMalloc>
 8008da8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008db6:	e005      	b.n	8008dc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008db8:	6978      	ldr	r0, [r7, #20]
 8008dba:	f001 fd85 	bl	800a8c8 <vPortFree>
 8008dbe:	e001      	b.n	8008dc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d017      	beq.n	8008dfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dd2:	88fa      	ldrh	r2, [r7, #6]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	9302      	str	r3, [sp, #8]
 8008ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f80e 	bl	8008e0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dee:	69f8      	ldr	r0, [r7, #28]
 8008df0:	f000 f89c 	bl	8008f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008df4:	2301      	movs	r3, #1
 8008df6:	61bb      	str	r3, [r7, #24]
 8008df8:	e002      	b.n	8008e00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e00:	69bb      	ldr	r3, [r7, #24]
	}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3720      	adds	r7, #32
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b088      	sub	sp, #32
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
 8008e16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	461a      	mov	r2, r3
 8008e22:	21a5      	movs	r1, #165	@ 0xa5
 8008e24:	f001 ffb3 	bl	800ad8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e32:	3b01      	subs	r3, #1
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	f023 0307 	bic.w	r3, r3, #7
 8008e40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	617b      	str	r3, [r7, #20]
}
 8008e5e:	bf00      	nop
 8008e60:	bf00      	nop
 8008e62:	e7fd      	b.n	8008e60 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01f      	beq.n	8008eaa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	e012      	b.n	8008e96 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	4413      	add	r3, r2
 8008e76:	7819      	ldrb	r1, [r3, #0]
 8008e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	3334      	adds	r3, #52	@ 0x34
 8008e80:	460a      	mov	r2, r1
 8008e82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	4413      	add	r3, r2
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d006      	beq.n	8008e9e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	3301      	adds	r3, #1
 8008e94:	61fb      	str	r3, [r7, #28]
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	2b0f      	cmp	r3, #15
 8008e9a:	d9e9      	bls.n	8008e70 <prvInitialiseNewTask+0x66>
 8008e9c:	e000      	b.n	8008ea0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008e9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ea8:	e003      	b.n	8008eb2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb4:	2b37      	cmp	r3, #55	@ 0x37
 8008eb6:	d901      	bls.n	8008ebc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008eb8:	2337      	movs	r3, #55	@ 0x37
 8008eba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ec6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eca:	2200      	movs	r2, #0
 8008ecc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff f92a 	bl	800812c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	3318      	adds	r3, #24
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff f925 	bl	800812c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ee6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ef6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efa:	2200      	movs	r2, #0
 8008efc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	68f9      	ldr	r1, [r7, #12]
 8008f0a:	69b8      	ldr	r0, [r7, #24]
 8008f0c:	f001 f9be 	bl	800a28c <pxPortInitialiseStack>
 8008f10:	4602      	mov	r2, r0
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f22:	bf00      	nop
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f34:	f001 fad8 	bl	800a4e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f38:	4b2d      	ldr	r3, [pc, #180]	@ (8008ff0 <prvAddNewTaskToReadyList+0xc4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ff0 <prvAddNewTaskToReadyList+0xc4>)
 8008f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f42:	4b2c      	ldr	r3, [pc, #176]	@ (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f50:	4b27      	ldr	r3, [pc, #156]	@ (8008ff0 <prvAddNewTaskToReadyList+0xc4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d110      	bne.n	8008f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f58:	f000 fc9e 	bl	8009898 <prvInitialiseTaskLists>
 8008f5c:	e00d      	b.n	8008f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f5e:	4b26      	ldr	r3, [pc, #152]	@ (8008ff8 <prvAddNewTaskToReadyList+0xcc>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d109      	bne.n	8008f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f66:	4b23      	ldr	r3, [pc, #140]	@ (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d802      	bhi.n	8008f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f74:	4a1f      	ldr	r2, [pc, #124]	@ (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f7a:	4b20      	ldr	r3, [pc, #128]	@ (8008ffc <prvAddNewTaskToReadyList+0xd0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	4a1e      	ldr	r2, [pc, #120]	@ (8008ffc <prvAddNewTaskToReadyList+0xd0>)
 8008f82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f84:	4b1d      	ldr	r3, [pc, #116]	@ (8008ffc <prvAddNewTaskToReadyList+0xd0>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f90:	4b1b      	ldr	r3, [pc, #108]	@ (8009000 <prvAddNewTaskToReadyList+0xd4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d903      	bls.n	8008fa0 <prvAddNewTaskToReadyList+0x74>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9c:	4a18      	ldr	r2, [pc, #96]	@ (8009000 <prvAddNewTaskToReadyList+0xd4>)
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4a15      	ldr	r2, [pc, #84]	@ (8009004 <prvAddNewTaskToReadyList+0xd8>)
 8008fae:	441a      	add	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7ff f8c5 	bl	8008146 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fbc:	f001 fac6 	bl	800a54c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff8 <prvAddNewTaskToReadyList+0xcc>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00e      	beq.n	8008fe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff4 <prvAddNewTaskToReadyList+0xc8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d207      	bcs.n	8008fe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8009008 <prvAddNewTaskToReadyList+0xdc>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000f8c 	.word	0x20000f8c
 8008ff4:	20000ab8 	.word	0x20000ab8
 8008ff8:	20000f98 	.word	0x20000f98
 8008ffc:	20000fa8 	.word	0x20000fa8
 8009000:	20000f94 	.word	0x20000f94
 8009004:	20000abc 	.word	0x20000abc
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08a      	sub	sp, #40	@ 0x28
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009016:	2300      	movs	r3, #0
 8009018:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10b      	bne.n	8009038 <vTaskDelayUntil+0x2c>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	617b      	str	r3, [r7, #20]
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	e7fd      	b.n	8009034 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10b      	bne.n	8009056 <vTaskDelayUntil+0x4a>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	613b      	str	r3, [r7, #16]
}
 8009050:	bf00      	nop
 8009052:	bf00      	nop
 8009054:	e7fd      	b.n	8009052 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8009056:	4b2a      	ldr	r3, [pc, #168]	@ (8009100 <vTaskDelayUntil+0xf4>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <vTaskDelayUntil+0x6a>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	60fb      	str	r3, [r7, #12]
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	e7fd      	b.n	8009072 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8009076:	f000 f8e7 	bl	8009248 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800907a:	4b22      	ldr	r3, [pc, #136]	@ (8009104 <vTaskDelayUntil+0xf8>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	4413      	add	r3, r2
 8009088:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6a3a      	ldr	r2, [r7, #32]
 8009090:	429a      	cmp	r2, r3
 8009092:	d20b      	bcs.n	80090ac <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69fa      	ldr	r2, [r7, #28]
 800909a:	429a      	cmp	r2, r3
 800909c:	d211      	bcs.n	80090c2 <vTaskDelayUntil+0xb6>
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d90d      	bls.n	80090c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090aa:	e00a      	b.n	80090c2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69fa      	ldr	r2, [r7, #28]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d303      	bcc.n	80090be <vTaskDelayUntil+0xb2>
 80090b6:	69fa      	ldr	r2, [r7, #28]
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d901      	bls.n	80090c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80090be:	2301      	movs	r3, #1
 80090c0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80090c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d006      	beq.n	80090dc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2100      	movs	r1, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fd2a 	bl	8009b30 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80090dc:	f000 f8c2 	bl	8009264 <xTaskResumeAll>
 80090e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d107      	bne.n	80090f8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80090e8:	4b07      	ldr	r3, [pc, #28]	@ (8009108 <vTaskDelayUntil+0xfc>)
 80090ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090f8:	bf00      	nop
 80090fa:	3728      	adds	r7, #40	@ 0x28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000fb4 	.word	0x20000fb4
 8009104:	20000f90 	.word	0x20000f90
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d018      	beq.n	8009150 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800911e:	4b14      	ldr	r3, [pc, #80]	@ (8009170 <vTaskDelay+0x64>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00b      	beq.n	800913e <vTaskDelay+0x32>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60bb      	str	r3, [r7, #8]
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	e7fd      	b.n	800913a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800913e:	f000 f883 	bl	8009248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009142:	2100      	movs	r1, #0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fcf3 	bl	8009b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800914a:	f000 f88b 	bl	8009264 <xTaskResumeAll>
 800914e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d107      	bne.n	8009166 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009156:	4b07      	ldr	r3, [pc, #28]	@ (8009174 <vTaskDelay+0x68>)
 8009158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000fb4 	.word	0x20000fb4
 8009174:	e000ed04 	.word	0xe000ed04

08009178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08a      	sub	sp, #40	@ 0x28
 800917c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009186:	463a      	mov	r2, r7
 8009188:	1d39      	adds	r1, r7, #4
 800918a:	f107 0308 	add.w	r3, r7, #8
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe ff78 	bl	8008084 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	9202      	str	r2, [sp, #8]
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	2300      	movs	r3, #0
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	460a      	mov	r2, r1
 80091a6:	4922      	ldr	r1, [pc, #136]	@ (8009230 <vTaskStartScheduler+0xb8>)
 80091a8:	4822      	ldr	r0, [pc, #136]	@ (8009234 <vTaskStartScheduler+0xbc>)
 80091aa:	f7ff fd89 	bl	8008cc0 <xTaskCreateStatic>
 80091ae:	4603      	mov	r3, r0
 80091b0:	4a21      	ldr	r2, [pc, #132]	@ (8009238 <vTaskStartScheduler+0xc0>)
 80091b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091b4:	4b20      	ldr	r3, [pc, #128]	@ (8009238 <vTaskStartScheduler+0xc0>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091bc:	2301      	movs	r3, #1
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	e001      	b.n	80091c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d102      	bne.n	80091d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091cc:	f000 fd04 	bl	8009bd8 <xTimerCreateTimerTask>
 80091d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d116      	bne.n	8009206 <vTaskStartScheduler+0x8e>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	613b      	str	r3, [r7, #16]
}
 80091ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091ec:	4b13      	ldr	r3, [pc, #76]	@ (800923c <vTaskStartScheduler+0xc4>)
 80091ee:	f04f 32ff 	mov.w	r2, #4294967295
 80091f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091f4:	4b12      	ldr	r3, [pc, #72]	@ (8009240 <vTaskStartScheduler+0xc8>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091fa:	4b12      	ldr	r3, [pc, #72]	@ (8009244 <vTaskStartScheduler+0xcc>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009200:	f001 f8ce 	bl	800a3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009204:	e00f      	b.n	8009226 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920c:	d10b      	bne.n	8009226 <vTaskStartScheduler+0xae>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	60fb      	str	r3, [r7, #12]
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	e7fd      	b.n	8009222 <vTaskStartScheduler+0xaa>
}
 8009226:	bf00      	nop
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	0800bb3c 	.word	0x0800bb3c
 8009234:	08009869 	.word	0x08009869
 8009238:	20000fb0 	.word	0x20000fb0
 800923c:	20000fac 	.word	0x20000fac
 8009240:	20000f98 	.word	0x20000f98
 8009244:	20000f90 	.word	0x20000f90

08009248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800924c:	4b04      	ldr	r3, [pc, #16]	@ (8009260 <vTaskSuspendAll+0x18>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3301      	adds	r3, #1
 8009252:	4a03      	ldr	r2, [pc, #12]	@ (8009260 <vTaskSuspendAll+0x18>)
 8009254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009256:	bf00      	nop
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000fb4 	.word	0x20000fb4

08009264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009272:	4b42      	ldr	r3, [pc, #264]	@ (800937c <xTaskResumeAll+0x118>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <xTaskResumeAll+0x2e>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	603b      	str	r3, [r7, #0]
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	e7fd      	b.n	800928e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009292:	f001 f929 	bl	800a4e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009296:	4b39      	ldr	r3, [pc, #228]	@ (800937c <xTaskResumeAll+0x118>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3b01      	subs	r3, #1
 800929c:	4a37      	ldr	r2, [pc, #220]	@ (800937c <xTaskResumeAll+0x118>)
 800929e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092a0:	4b36      	ldr	r3, [pc, #216]	@ (800937c <xTaskResumeAll+0x118>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d162      	bne.n	800936e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092a8:	4b35      	ldr	r3, [pc, #212]	@ (8009380 <xTaskResumeAll+0x11c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d05e      	beq.n	800936e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092b0:	e02f      	b.n	8009312 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b2:	4b34      	ldr	r3, [pc, #208]	@ (8009384 <xTaskResumeAll+0x120>)
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3318      	adds	r3, #24
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe ff9e 	bl	8008200 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3304      	adds	r3, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe ff99 	bl	8008200 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d2:	4b2d      	ldr	r3, [pc, #180]	@ (8009388 <xTaskResumeAll+0x124>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d903      	bls.n	80092e2 <xTaskResumeAll+0x7e>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092de:	4a2a      	ldr	r2, [pc, #168]	@ (8009388 <xTaskResumeAll+0x124>)
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4a27      	ldr	r2, [pc, #156]	@ (800938c <xTaskResumeAll+0x128>)
 80092f0:	441a      	add	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f7fe ff24 	bl	8008146 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009302:	4b23      	ldr	r3, [pc, #140]	@ (8009390 <xTaskResumeAll+0x12c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	429a      	cmp	r2, r3
 800930a:	d302      	bcc.n	8009312 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800930c:	4b21      	ldr	r3, [pc, #132]	@ (8009394 <xTaskResumeAll+0x130>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009312:	4b1c      	ldr	r3, [pc, #112]	@ (8009384 <xTaskResumeAll+0x120>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1cb      	bne.n	80092b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009320:	f000 fb58 	bl	80099d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009324:	4b1c      	ldr	r3, [pc, #112]	@ (8009398 <xTaskResumeAll+0x134>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d010      	beq.n	8009352 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009330:	f000 f846 	bl	80093c0 <xTaskIncrementTick>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800933a:	4b16      	ldr	r3, [pc, #88]	@ (8009394 <xTaskResumeAll+0x130>)
 800933c:	2201      	movs	r2, #1
 800933e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3b01      	subs	r3, #1
 8009344:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f1      	bne.n	8009330 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800934c:	4b12      	ldr	r3, [pc, #72]	@ (8009398 <xTaskResumeAll+0x134>)
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009352:	4b10      	ldr	r3, [pc, #64]	@ (8009394 <xTaskResumeAll+0x130>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800935a:	2301      	movs	r3, #1
 800935c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800935e:	4b0f      	ldr	r3, [pc, #60]	@ (800939c <xTaskResumeAll+0x138>)
 8009360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800936e:	f001 f8ed 	bl	800a54c <vPortExitCritical>

	return xAlreadyYielded;
 8009372:	68bb      	ldr	r3, [r7, #8]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000fb4 	.word	0x20000fb4
 8009380:	20000f8c 	.word	0x20000f8c
 8009384:	20000f4c 	.word	0x20000f4c
 8009388:	20000f94 	.word	0x20000f94
 800938c:	20000abc 	.word	0x20000abc
 8009390:	20000ab8 	.word	0x20000ab8
 8009394:	20000fa0 	.word	0x20000fa0
 8009398:	20000f9c 	.word	0x20000f9c
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093a6:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <xTaskGetTickCount+0x1c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093ac:	687b      	ldr	r3, [r7, #4]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000f90 	.word	0x20000f90

080093c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b086      	sub	sp, #24
 80093c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ca:	4b4f      	ldr	r3, [pc, #316]	@ (8009508 <xTaskIncrementTick+0x148>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f040 8090 	bne.w	80094f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093d4:	4b4d      	ldr	r3, [pc, #308]	@ (800950c <xTaskIncrementTick+0x14c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093dc:	4a4b      	ldr	r2, [pc, #300]	@ (800950c <xTaskIncrementTick+0x14c>)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d121      	bne.n	800942c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80093e8:	4b49      	ldr	r3, [pc, #292]	@ (8009510 <xTaskIncrementTick+0x150>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00b      	beq.n	800940a <xTaskIncrementTick+0x4a>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	603b      	str	r3, [r7, #0]
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	e7fd      	b.n	8009406 <xTaskIncrementTick+0x46>
 800940a:	4b41      	ldr	r3, [pc, #260]	@ (8009510 <xTaskIncrementTick+0x150>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	4b40      	ldr	r3, [pc, #256]	@ (8009514 <xTaskIncrementTick+0x154>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a3e      	ldr	r2, [pc, #248]	@ (8009510 <xTaskIncrementTick+0x150>)
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	4a3e      	ldr	r2, [pc, #248]	@ (8009514 <xTaskIncrementTick+0x154>)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	4b3e      	ldr	r3, [pc, #248]	@ (8009518 <xTaskIncrementTick+0x158>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	4a3c      	ldr	r2, [pc, #240]	@ (8009518 <xTaskIncrementTick+0x158>)
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	f000 fad4 	bl	80099d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800942c:	4b3b      	ldr	r3, [pc, #236]	@ (800951c <xTaskIncrementTick+0x15c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	429a      	cmp	r2, r3
 8009434:	d349      	bcc.n	80094ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009436:	4b36      	ldr	r3, [pc, #216]	@ (8009510 <xTaskIncrementTick+0x150>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009440:	4b36      	ldr	r3, [pc, #216]	@ (800951c <xTaskIncrementTick+0x15c>)
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	601a      	str	r2, [r3, #0]
					break;
 8009448:	e03f      	b.n	80094ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944a:	4b31      	ldr	r3, [pc, #196]	@ (8009510 <xTaskIncrementTick+0x150>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	429a      	cmp	r2, r3
 8009460:	d203      	bcs.n	800946a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009462:	4a2e      	ldr	r2, [pc, #184]	@ (800951c <xTaskIncrementTick+0x15c>)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009468:	e02f      	b.n	80094ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	3304      	adds	r3, #4
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fec6 	bl	8008200 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	3318      	adds	r3, #24
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe febd 	bl	8008200 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948a:	4b25      	ldr	r3, [pc, #148]	@ (8009520 <xTaskIncrementTick+0x160>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d903      	bls.n	800949a <xTaskIncrementTick+0xda>
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009496:	4a22      	ldr	r2, [pc, #136]	@ (8009520 <xTaskIncrementTick+0x160>)
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009524 <xTaskIncrementTick+0x164>)
 80094a8:	441a      	add	r2, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4619      	mov	r1, r3
 80094b0:	4610      	mov	r0, r2
 80094b2:	f7fe fe48 	bl	8008146 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009528 <xTaskIncrementTick+0x168>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d3b8      	bcc.n	8009436 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094c8:	e7b5      	b.n	8009436 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094ca:	4b17      	ldr	r3, [pc, #92]	@ (8009528 <xTaskIncrementTick+0x168>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d0:	4914      	ldr	r1, [pc, #80]	@ (8009524 <xTaskIncrementTick+0x164>)
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d901      	bls.n	80094e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80094e2:	2301      	movs	r3, #1
 80094e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094e6:	4b11      	ldr	r3, [pc, #68]	@ (800952c <xTaskIncrementTick+0x16c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d007      	beq.n	80094fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80094ee:	2301      	movs	r3, #1
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	e004      	b.n	80094fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009530 <xTaskIncrementTick+0x170>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3301      	adds	r3, #1
 80094fa:	4a0d      	ldr	r2, [pc, #52]	@ (8009530 <xTaskIncrementTick+0x170>)
 80094fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094fe:	697b      	ldr	r3, [r7, #20]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20000fb4 	.word	0x20000fb4
 800950c:	20000f90 	.word	0x20000f90
 8009510:	20000f44 	.word	0x20000f44
 8009514:	20000f48 	.word	0x20000f48
 8009518:	20000fa4 	.word	0x20000fa4
 800951c:	20000fac 	.word	0x20000fac
 8009520:	20000f94 	.word	0x20000f94
 8009524:	20000abc 	.word	0x20000abc
 8009528:	20000ab8 	.word	0x20000ab8
 800952c:	20000fa0 	.word	0x20000fa0
 8009530:	20000f9c 	.word	0x20000f9c

08009534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800953a:	4b28      	ldr	r3, [pc, #160]	@ (80095dc <vTaskSwitchContext+0xa8>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009542:	4b27      	ldr	r3, [pc, #156]	@ (80095e0 <vTaskSwitchContext+0xac>)
 8009544:	2201      	movs	r2, #1
 8009546:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009548:	e042      	b.n	80095d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800954a:	4b25      	ldr	r3, [pc, #148]	@ (80095e0 <vTaskSwitchContext+0xac>)
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009550:	4b24      	ldr	r3, [pc, #144]	@ (80095e4 <vTaskSwitchContext+0xb0>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	e011      	b.n	800957c <vTaskSwitchContext+0x48>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10b      	bne.n	8009576 <vTaskSwitchContext+0x42>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	607b      	str	r3, [r7, #4]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <vTaskSwitchContext+0x3e>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3b01      	subs	r3, #1
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	491a      	ldr	r1, [pc, #104]	@ (80095e8 <vTaskSwitchContext+0xb4>)
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	440b      	add	r3, r1
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0e3      	beq.n	8009558 <vTaskSwitchContext+0x24>
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4a13      	ldr	r2, [pc, #76]	@ (80095e8 <vTaskSwitchContext+0xb4>)
 800959c:	4413      	add	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	605a      	str	r2, [r3, #4]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	3308      	adds	r3, #8
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d104      	bne.n	80095c0 <vTaskSwitchContext+0x8c>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	605a      	str	r2, [r3, #4]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	4a09      	ldr	r2, [pc, #36]	@ (80095ec <vTaskSwitchContext+0xb8>)
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	4a06      	ldr	r2, [pc, #24]	@ (80095e4 <vTaskSwitchContext+0xb0>)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6013      	str	r3, [r2, #0]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	20000fb4 	.word	0x20000fb4
 80095e0:	20000fa0 	.word	0x20000fa0
 80095e4:	20000f94 	.word	0x20000f94
 80095e8:	20000abc 	.word	0x20000abc
 80095ec:	20000ab8 	.word	0x20000ab8

080095f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10b      	bne.n	8009618 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	60fb      	str	r3, [r7, #12]
}
 8009612:	bf00      	nop
 8009614:	bf00      	nop
 8009616:	e7fd      	b.n	8009614 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009618:	4b07      	ldr	r3, [pc, #28]	@ (8009638 <vTaskPlaceOnEventList+0x48>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3318      	adds	r3, #24
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7fe fdb4 	bl	800818e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009626:	2101      	movs	r1, #1
 8009628:	6838      	ldr	r0, [r7, #0]
 800962a:	f000 fa81 	bl	8009b30 <prvAddCurrentTaskToDelayedList>
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20000ab8 	.word	0x20000ab8

0800963c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10b      	bne.n	8009666 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	617b      	str	r3, [r7, #20]
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	e7fd      	b.n	8009662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009666:	4b0a      	ldr	r3, [pc, #40]	@ (8009690 <vTaskPlaceOnEventListRestricted+0x54>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3318      	adds	r3, #24
 800966c:	4619      	mov	r1, r3
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7fe fd69 	bl	8008146 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800967a:	f04f 33ff 	mov.w	r3, #4294967295
 800967e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	68b8      	ldr	r0, [r7, #8]
 8009684:	f000 fa54 	bl	8009b30 <prvAddCurrentTaskToDelayedList>
	}
 8009688:	bf00      	nop
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000ab8 	.word	0x20000ab8

08009694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10b      	bne.n	80096c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	60fb      	str	r3, [r7, #12]
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	e7fd      	b.n	80096be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3318      	adds	r3, #24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fd9a 	bl	8008200 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009744 <xTaskRemoveFromEventList+0xb0>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d11d      	bne.n	8009710 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe fd91 	bl	8008200 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e2:	4b19      	ldr	r3, [pc, #100]	@ (8009748 <xTaskRemoveFromEventList+0xb4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d903      	bls.n	80096f2 <xTaskRemoveFromEventList+0x5e>
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ee:	4a16      	ldr	r2, [pc, #88]	@ (8009748 <xTaskRemoveFromEventList+0xb4>)
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4a13      	ldr	r2, [pc, #76]	@ (800974c <xTaskRemoveFromEventList+0xb8>)
 8009700:	441a      	add	r2, r3
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	3304      	adds	r3, #4
 8009706:	4619      	mov	r1, r3
 8009708:	4610      	mov	r0, r2
 800970a:	f7fe fd1c 	bl	8008146 <vListInsertEnd>
 800970e:	e005      	b.n	800971c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	3318      	adds	r3, #24
 8009714:	4619      	mov	r1, r3
 8009716:	480e      	ldr	r0, [pc, #56]	@ (8009750 <xTaskRemoveFromEventList+0xbc>)
 8009718:	f7fe fd15 	bl	8008146 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009720:	4b0c      	ldr	r3, [pc, #48]	@ (8009754 <xTaskRemoveFromEventList+0xc0>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009726:	429a      	cmp	r2, r3
 8009728:	d905      	bls.n	8009736 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800972a:	2301      	movs	r3, #1
 800972c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800972e:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <xTaskRemoveFromEventList+0xc4>)
 8009730:	2201      	movs	r2, #1
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	e001      	b.n	800973a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800973a:	697b      	ldr	r3, [r7, #20]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000fb4 	.word	0x20000fb4
 8009748:	20000f94 	.word	0x20000f94
 800974c:	20000abc 	.word	0x20000abc
 8009750:	20000f4c 	.word	0x20000f4c
 8009754:	20000ab8 	.word	0x20000ab8
 8009758:	20000fa0 	.word	0x20000fa0

0800975c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009764:	4b06      	ldr	r3, [pc, #24]	@ (8009780 <vTaskInternalSetTimeOutState+0x24>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800976c:	4b05      	ldr	r3, [pc, #20]	@ (8009784 <vTaskInternalSetTimeOutState+0x28>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	605a      	str	r2, [r3, #4]
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	20000fa4 	.word	0x20000fa4
 8009784:	20000f90 	.word	0x20000f90

08009788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	613b      	str	r3, [r7, #16]
}
 80097aa:	bf00      	nop
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	60fb      	str	r3, [r7, #12]
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	e7fd      	b.n	80097ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80097ce:	f000 fe8b 	bl	800a4e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009848 <xTaskCheckForTimeOut+0xc0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d102      	bne.n	80097f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61fb      	str	r3, [r7, #28]
 80097f0:	e023      	b.n	800983a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	4b15      	ldr	r3, [pc, #84]	@ (800984c <xTaskCheckForTimeOut+0xc4>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d007      	beq.n	800980e <xTaskCheckForTimeOut+0x86>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	429a      	cmp	r2, r3
 8009806:	d302      	bcc.n	800980e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009808:	2301      	movs	r3, #1
 800980a:	61fb      	str	r3, [r7, #28]
 800980c:	e015      	b.n	800983a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	429a      	cmp	r2, r3
 8009816:	d20b      	bcs.n	8009830 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	1ad2      	subs	r2, r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ff99 	bl	800975c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800982a:	2300      	movs	r3, #0
 800982c:	61fb      	str	r3, [r7, #28]
 800982e:	e004      	b.n	800983a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009836:	2301      	movs	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800983a:	f000 fe87 	bl	800a54c <vPortExitCritical>

	return xReturn;
 800983e:	69fb      	ldr	r3, [r7, #28]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3720      	adds	r7, #32
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000f90 	.word	0x20000f90
 800984c:	20000fa4 	.word	0x20000fa4

08009850 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009854:	4b03      	ldr	r3, [pc, #12]	@ (8009864 <vTaskMissedYield+0x14>)
 8009856:	2201      	movs	r2, #1
 8009858:	601a      	str	r2, [r3, #0]
}
 800985a:	bf00      	nop
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	20000fa0 	.word	0x20000fa0

08009868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009870:	f000 f852 	bl	8009918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009874:	4b06      	ldr	r3, [pc, #24]	@ (8009890 <prvIdleTask+0x28>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d9f9      	bls.n	8009870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800987c:	4b05      	ldr	r3, [pc, #20]	@ (8009894 <prvIdleTask+0x2c>)
 800987e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800988c:	e7f0      	b.n	8009870 <prvIdleTask+0x8>
 800988e:	bf00      	nop
 8009890:	20000abc 	.word	0x20000abc
 8009894:	e000ed04 	.word	0xe000ed04

08009898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800989e:	2300      	movs	r3, #0
 80098a0:	607b      	str	r3, [r7, #4]
 80098a2:	e00c      	b.n	80098be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4a12      	ldr	r2, [pc, #72]	@ (80098f8 <prvInitialiseTaskLists+0x60>)
 80098b0:	4413      	add	r3, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fc1a 	bl	80080ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3301      	adds	r3, #1
 80098bc:	607b      	str	r3, [r7, #4]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b37      	cmp	r3, #55	@ 0x37
 80098c2:	d9ef      	bls.n	80098a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098c4:	480d      	ldr	r0, [pc, #52]	@ (80098fc <prvInitialiseTaskLists+0x64>)
 80098c6:	f7fe fc11 	bl	80080ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098ca:	480d      	ldr	r0, [pc, #52]	@ (8009900 <prvInitialiseTaskLists+0x68>)
 80098cc:	f7fe fc0e 	bl	80080ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098d0:	480c      	ldr	r0, [pc, #48]	@ (8009904 <prvInitialiseTaskLists+0x6c>)
 80098d2:	f7fe fc0b 	bl	80080ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098d6:	480c      	ldr	r0, [pc, #48]	@ (8009908 <prvInitialiseTaskLists+0x70>)
 80098d8:	f7fe fc08 	bl	80080ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098dc:	480b      	ldr	r0, [pc, #44]	@ (800990c <prvInitialiseTaskLists+0x74>)
 80098de:	f7fe fc05 	bl	80080ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009910 <prvInitialiseTaskLists+0x78>)
 80098e4:	4a05      	ldr	r2, [pc, #20]	@ (80098fc <prvInitialiseTaskLists+0x64>)
 80098e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009914 <prvInitialiseTaskLists+0x7c>)
 80098ea:	4a05      	ldr	r2, [pc, #20]	@ (8009900 <prvInitialiseTaskLists+0x68>)
 80098ec:	601a      	str	r2, [r3, #0]
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20000abc 	.word	0x20000abc
 80098fc:	20000f1c 	.word	0x20000f1c
 8009900:	20000f30 	.word	0x20000f30
 8009904:	20000f4c 	.word	0x20000f4c
 8009908:	20000f60 	.word	0x20000f60
 800990c:	20000f78 	.word	0x20000f78
 8009910:	20000f44 	.word	0x20000f44
 8009914:	20000f48 	.word	0x20000f48

08009918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800991e:	e019      	b.n	8009954 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009920:	f000 fde2 	bl	800a4e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009924:	4b10      	ldr	r3, [pc, #64]	@ (8009968 <prvCheckTasksWaitingTermination+0x50>)
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3304      	adds	r3, #4
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fc65 	bl	8008200 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009936:	4b0d      	ldr	r3, [pc, #52]	@ (800996c <prvCheckTasksWaitingTermination+0x54>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a0b      	ldr	r2, [pc, #44]	@ (800996c <prvCheckTasksWaitingTermination+0x54>)
 800993e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009940:	4b0b      	ldr	r3, [pc, #44]	@ (8009970 <prvCheckTasksWaitingTermination+0x58>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3b01      	subs	r3, #1
 8009946:	4a0a      	ldr	r2, [pc, #40]	@ (8009970 <prvCheckTasksWaitingTermination+0x58>)
 8009948:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800994a:	f000 fdff 	bl	800a54c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f810 	bl	8009974 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009954:	4b06      	ldr	r3, [pc, #24]	@ (8009970 <prvCheckTasksWaitingTermination+0x58>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e1      	bne.n	8009920 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800995c:	bf00      	nop
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000f60 	.word	0x20000f60
 800996c:	20000f8c 	.word	0x20000f8c
 8009970:	20000f74 	.word	0x20000f74

08009974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009982:	2b00      	cmp	r3, #0
 8009984:	d108      	bne.n	8009998 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998a:	4618      	mov	r0, r3
 800998c:	f000 ff9c 	bl	800a8c8 <vPortFree>
				vPortFree( pxTCB );
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 ff99 	bl	800a8c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009996:	e019      	b.n	80099cc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d103      	bne.n	80099aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 ff90 	bl	800a8c8 <vPortFree>
	}
 80099a8:	e010      	b.n	80099cc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d00b      	beq.n	80099cc <prvDeleteTCB+0x58>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60fb      	str	r3, [r7, #12]
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	e7fd      	b.n	80099c8 <prvDeleteTCB+0x54>
	}
 80099cc:	bf00      	nop
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099da:	4b0c      	ldr	r3, [pc, #48]	@ (8009a0c <prvResetNextTaskUnblockTime+0x38>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009a10 <prvResetNextTaskUnblockTime+0x3c>)
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80099ec:	e008      	b.n	8009a00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ee:	4b07      	ldr	r3, [pc, #28]	@ (8009a0c <prvResetNextTaskUnblockTime+0x38>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	4a04      	ldr	r2, [pc, #16]	@ (8009a10 <prvResetNextTaskUnblockTime+0x3c>)
 80099fe:	6013      	str	r3, [r2, #0]
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	20000f44 	.word	0x20000f44
 8009a10:	20000fac 	.word	0x20000fac

08009a14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <xTaskGetSchedulerState+0x34>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d102      	bne.n	8009a28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a22:	2301      	movs	r3, #1
 8009a24:	607b      	str	r3, [r7, #4]
 8009a26:	e008      	b.n	8009a3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a28:	4b08      	ldr	r3, [pc, #32]	@ (8009a4c <xTaskGetSchedulerState+0x38>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a30:	2302      	movs	r3, #2
 8009a32:	607b      	str	r3, [r7, #4]
 8009a34:	e001      	b.n	8009a3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a36:	2300      	movs	r3, #0
 8009a38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a3a:	687b      	ldr	r3, [r7, #4]
	}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	20000f98 	.word	0x20000f98
 8009a4c:	20000fb4 	.word	0x20000fb4

08009a50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d058      	beq.n	8009b18 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a66:	4b2f      	ldr	r3, [pc, #188]	@ (8009b24 <xTaskPriorityDisinherit+0xd4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d00b      	beq.n	8009a88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	60fb      	str	r3, [r7, #12]
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	e7fd      	b.n	8009a84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10b      	bne.n	8009aa8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	60bb      	str	r3, [r7, #8]
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	e7fd      	b.n	8009aa4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aac:	1e5a      	subs	r2, r3, #1
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d02c      	beq.n	8009b18 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d128      	bne.n	8009b18 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	3304      	adds	r3, #4
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fb98 	bl	8008200 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009adc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8009b28 <xTaskPriorityDisinherit+0xd8>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d903      	bls.n	8009af8 <xTaskPriorityDisinherit+0xa8>
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	4a0c      	ldr	r2, [pc, #48]	@ (8009b28 <xTaskPriorityDisinherit+0xd8>)
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009afc:	4613      	mov	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4a09      	ldr	r2, [pc, #36]	@ (8009b2c <xTaskPriorityDisinherit+0xdc>)
 8009b06:	441a      	add	r2, r3
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4610      	mov	r0, r2
 8009b10:	f7fe fb19 	bl	8008146 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b14:	2301      	movs	r3, #1
 8009b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b18:	697b      	ldr	r3, [r7, #20]
	}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20000ab8 	.word	0x20000ab8
 8009b28:	20000f94 	.word	0x20000f94
 8009b2c:	20000abc 	.word	0x20000abc

08009b30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b3a:	4b21      	ldr	r3, [pc, #132]	@ (8009bc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b40:	4b20      	ldr	r3, [pc, #128]	@ (8009bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3304      	adds	r3, #4
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe fb5a 	bl	8008200 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b52:	d10a      	bne.n	8009b6a <prvAddCurrentTaskToDelayedList+0x3a>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8009bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	4619      	mov	r1, r3
 8009b62:	4819      	ldr	r0, [pc, #100]	@ (8009bc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b64:	f7fe faef 	bl	8008146 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b68:	e026      	b.n	8009bb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4413      	add	r3, r2
 8009b70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b72:	4b14      	ldr	r3, [pc, #80]	@ (8009bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d209      	bcs.n	8009b96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b82:	4b12      	ldr	r3, [pc, #72]	@ (8009bcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fe fafd 	bl	800818e <vListInsert>
}
 8009b94:	e010      	b.n	8009bb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b96:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	f7fe faf3 	bl	800818e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d202      	bcs.n	8009bb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bb2:	4a08      	ldr	r2, [pc, #32]	@ (8009bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6013      	str	r3, [r2, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20000f90 	.word	0x20000f90
 8009bc4:	20000ab8 	.word	0x20000ab8
 8009bc8:	20000f78 	.word	0x20000f78
 8009bcc:	20000f48 	.word	0x20000f48
 8009bd0:	20000f44 	.word	0x20000f44
 8009bd4:	20000fac 	.word	0x20000fac

08009bd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08a      	sub	sp, #40	@ 0x28
 8009bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009be2:	f000 fb13 	bl	800a20c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009be6:	4b1d      	ldr	r3, [pc, #116]	@ (8009c5c <xTimerCreateTimerTask+0x84>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d021      	beq.n	8009c32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009bf6:	1d3a      	adds	r2, r7, #4
 8009bf8:	f107 0108 	add.w	r1, r7, #8
 8009bfc:	f107 030c 	add.w	r3, r7, #12
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fa59 	bl	80080b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	9202      	str	r2, [sp, #8]
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	2302      	movs	r3, #2
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	2300      	movs	r3, #0
 8009c16:	460a      	mov	r2, r1
 8009c18:	4911      	ldr	r1, [pc, #68]	@ (8009c60 <xTimerCreateTimerTask+0x88>)
 8009c1a:	4812      	ldr	r0, [pc, #72]	@ (8009c64 <xTimerCreateTimerTask+0x8c>)
 8009c1c:	f7ff f850 	bl	8008cc0 <xTaskCreateStatic>
 8009c20:	4603      	mov	r3, r0
 8009c22:	4a11      	ldr	r2, [pc, #68]	@ (8009c68 <xTimerCreateTimerTask+0x90>)
 8009c24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c26:	4b10      	ldr	r3, [pc, #64]	@ (8009c68 <xTimerCreateTimerTask+0x90>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10b      	bne.n	8009c50 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	613b      	str	r3, [r7, #16]
}
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
 8009c4e:	e7fd      	b.n	8009c4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c50:	697b      	ldr	r3, [r7, #20]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20000fe8 	.word	0x20000fe8
 8009c60:	0800bb44 	.word	0x0800bb44
 8009c64:	08009da5 	.word	0x08009da5
 8009c68:	20000fec 	.word	0x20000fec

08009c6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08a      	sub	sp, #40	@ 0x28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10b      	bne.n	8009c9c <xTimerGenericCommand+0x30>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	623b      	str	r3, [r7, #32]
}
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	e7fd      	b.n	8009c98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c9c:	4b19      	ldr	r3, [pc, #100]	@ (8009d04 <xTimerGenericCommand+0x98>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d02a      	beq.n	8009cfa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b05      	cmp	r3, #5
 8009cb4:	dc18      	bgt.n	8009ce8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cb6:	f7ff fead 	bl	8009a14 <xTaskGetSchedulerState>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d109      	bne.n	8009cd4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cc0:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <xTimerGenericCommand+0x98>)
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	f107 0110 	add.w	r1, r7, #16
 8009cc8:	2300      	movs	r3, #0
 8009cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ccc:	f7fe fc08 	bl	80084e0 <xQueueGenericSend>
 8009cd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009cd2:	e012      	b.n	8009cfa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8009d04 <xTimerGenericCommand+0x98>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
 8009cd8:	f107 0110 	add.w	r1, r7, #16
 8009cdc:	2300      	movs	r3, #0
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f7fe fbfe 	bl	80084e0 <xQueueGenericSend>
 8009ce4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ce6:	e008      	b.n	8009cfa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ce8:	4b06      	ldr	r3, [pc, #24]	@ (8009d04 <xTimerGenericCommand+0x98>)
 8009cea:	6818      	ldr	r0, [r3, #0]
 8009cec:	f107 0110 	add.w	r1, r7, #16
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	f7fe fcf6 	bl	80086e4 <xQueueGenericSendFromISR>
 8009cf8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3728      	adds	r7, #40	@ 0x28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20000fe8 	.word	0x20000fe8

08009d08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af02      	add	r7, sp, #8
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d12:	4b23      	ldr	r3, [pc, #140]	@ (8009da0 <prvProcessExpiredTimer+0x98>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7fe fa6d 	bl	8008200 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d2c:	f003 0304 	and.w	r3, r3, #4
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d023      	beq.n	8009d7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	699a      	ldr	r2, [r3, #24]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	18d1      	adds	r1, r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	6978      	ldr	r0, [r7, #20]
 8009d42:	f000 f8d5 	bl	8009ef0 <prvInsertTimerInActiveList>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d020      	beq.n	8009d8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	2300      	movs	r3, #0
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	2100      	movs	r1, #0
 8009d56:	6978      	ldr	r0, [r7, #20]
 8009d58:	f7ff ff88 	bl	8009c6c <xTimerGenericCommand>
 8009d5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d114      	bne.n	8009d8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	60fb      	str	r3, [r7, #12]
}
 8009d76:	bf00      	nop
 8009d78:	bf00      	nop
 8009d7a:	e7fd      	b.n	8009d78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d82:	f023 0301 	bic.w	r3, r3, #1
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	6978      	ldr	r0, [r7, #20]
 8009d94:	4798      	blx	r3
}
 8009d96:	bf00      	nop
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000fe0 	.word	0x20000fe0

08009da4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dac:	f107 0308 	add.w	r3, r7, #8
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 f859 	bl	8009e68 <prvGetNextExpireTime>
 8009db6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f000 f805 	bl	8009dcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009dc2:	f000 f8d7 	bl	8009f74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dc6:	bf00      	nop
 8009dc8:	e7f0      	b.n	8009dac <prvTimerTask+0x8>
	...

08009dcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009dd6:	f7ff fa37 	bl	8009248 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dda:	f107 0308 	add.w	r3, r7, #8
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 f866 	bl	8009eb0 <prvSampleTimeNow>
 8009de4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d130      	bne.n	8009e4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10a      	bne.n	8009e08 <prvProcessTimerOrBlockTask+0x3c>
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d806      	bhi.n	8009e08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dfa:	f7ff fa33 	bl	8009264 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009dfe:	68f9      	ldr	r1, [r7, #12]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff ff81 	bl	8009d08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e06:	e024      	b.n	8009e52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d008      	beq.n	8009e20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e0e:	4b13      	ldr	r3, [pc, #76]	@ (8009e5c <prvProcessTimerOrBlockTask+0x90>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <prvProcessTimerOrBlockTask+0x50>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e000      	b.n	8009e1e <prvProcessTimerOrBlockTask+0x52>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e20:	4b0f      	ldr	r3, [pc, #60]	@ (8009e60 <prvProcessTimerOrBlockTask+0x94>)
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f7fe ff13 	bl	8008c58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e32:	f7ff fa17 	bl	8009264 <xTaskResumeAll>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e3c:	4b09      	ldr	r3, [pc, #36]	@ (8009e64 <prvProcessTimerOrBlockTask+0x98>)
 8009e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	f3bf 8f6f 	isb	sy
}
 8009e4c:	e001      	b.n	8009e52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e4e:	f7ff fa09 	bl	8009264 <xTaskResumeAll>
}
 8009e52:	bf00      	nop
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20000fe4 	.word	0x20000fe4
 8009e60:	20000fe8 	.word	0x20000fe8
 8009e64:	e000ed04 	.word	0xe000ed04

08009e68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e70:	4b0e      	ldr	r3, [pc, #56]	@ (8009eac <prvGetNextExpireTime+0x44>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <prvGetNextExpireTime+0x16>
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	e000      	b.n	8009e80 <prvGetNextExpireTime+0x18>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d105      	bne.n	8009e98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e8c:	4b07      	ldr	r3, [pc, #28]	@ (8009eac <prvGetNextExpireTime+0x44>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	60fb      	str	r3, [r7, #12]
 8009e96:	e001      	b.n	8009e9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	20000fe0 	.word	0x20000fe0

08009eb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009eb8:	f7ff fa72 	bl	80093a0 <xTaskGetTickCount>
 8009ebc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <prvSampleTimeNow+0x3c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d205      	bcs.n	8009ed4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ec8:	f000 f93a 	bl	800a140 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	e002      	b.n	8009eda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009eda:	4a04      	ldr	r2, [pc, #16]	@ (8009eec <prvSampleTimeNow+0x3c>)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	20000ff0 	.word	0x20000ff0

08009ef0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009efe:	2300      	movs	r3, #0
 8009f00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d812      	bhi.n	8009f3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	1ad2      	subs	r2, r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d302      	bcc.n	8009f2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f24:	2301      	movs	r3, #1
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	e01b      	b.n	8009f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f2a:	4b10      	ldr	r3, [pc, #64]	@ (8009f6c <prvInsertTimerInActiveList+0x7c>)
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4619      	mov	r1, r3
 8009f34:	4610      	mov	r0, r2
 8009f36:	f7fe f92a 	bl	800818e <vListInsert>
 8009f3a:	e012      	b.n	8009f62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d206      	bcs.n	8009f52 <prvInsertTimerInActiveList+0x62>
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d302      	bcc.n	8009f52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	e007      	b.n	8009f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f52:	4b07      	ldr	r3, [pc, #28]	@ (8009f70 <prvInsertTimerInActiveList+0x80>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3304      	adds	r3, #4
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	f7fe f916 	bl	800818e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f62:	697b      	ldr	r3, [r7, #20]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20000fe4 	.word	0x20000fe4
 8009f70:	20000fe0 	.word	0x20000fe0

08009f74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08e      	sub	sp, #56	@ 0x38
 8009f78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f7a:	e0ce      	b.n	800a11a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da19      	bge.n	8009fb6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f82:	1d3b      	adds	r3, r7, #4
 8009f84:	3304      	adds	r3, #4
 8009f86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10b      	bne.n	8009fa6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	61fb      	str	r3, [r7, #28]
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fac:	6850      	ldr	r0, [r2, #4]
 8009fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fb0:	6892      	ldr	r2, [r2, #8]
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f2c0 80ae 	blt.w	800a11a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d004      	beq.n	8009fd4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fcc:	3304      	adds	r3, #4
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe f916 	bl	8008200 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fd4:	463b      	mov	r3, r7
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff ff6a 	bl	8009eb0 <prvSampleTimeNow>
 8009fdc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b09      	cmp	r3, #9
 8009fe2:	f200 8097 	bhi.w	800a114 <prvProcessReceivedCommands+0x1a0>
 8009fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8009fec <prvProcessReceivedCommands+0x78>)
 8009fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fec:	0800a015 	.word	0x0800a015
 8009ff0:	0800a015 	.word	0x0800a015
 8009ff4:	0800a015 	.word	0x0800a015
 8009ff8:	0800a08b 	.word	0x0800a08b
 8009ffc:	0800a09f 	.word	0x0800a09f
 800a000:	0800a0eb 	.word	0x0800a0eb
 800a004:	0800a015 	.word	0x0800a015
 800a008:	0800a015 	.word	0x0800a015
 800a00c:	0800a08b 	.word	0x0800a08b
 800a010:	0800a09f 	.word	0x0800a09f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	18d1      	adds	r1, r2, r3
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a034:	f7ff ff5c 	bl	8009ef0 <prvInsertTimerInActiveList>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d06c      	beq.n	800a118 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b00      	cmp	r3, #0
 800a052:	d061      	beq.n	800a118 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	441a      	add	r2, r3
 800a05c:	2300      	movs	r3, #0
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2300      	movs	r3, #0
 800a062:	2100      	movs	r1, #0
 800a064:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a066:	f7ff fe01 	bl	8009c6c <xTimerGenericCommand>
 800a06a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d152      	bne.n	800a118 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	61bb      	str	r3, [r7, #24]
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	e7fd      	b.n	800a086 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a090:	f023 0301 	bic.w	r3, r3, #1
 800a094:	b2da      	uxtb	r2, r3
 800a096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a098:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a09c:	e03d      	b.n	800a11a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10b      	bne.n	800a0d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	617b      	str	r3, [r7, #20]
}
 800a0d0:	bf00      	nop
 800a0d2:	bf00      	nop
 800a0d4:	e7fd      	b.n	800a0d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d8:	699a      	ldr	r2, [r3, #24]
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	18d1      	adds	r1, r2, r3
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0e4:	f7ff ff04 	bl	8009ef0 <prvInsertTimerInActiveList>
					break;
 800a0e8:	e017      	b.n	800a11a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d103      	bne.n	800a100 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a0f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0fa:	f000 fbe5 	bl	800a8c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0fe:	e00c      	b.n	800a11a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a102:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a106:	f023 0301 	bic.w	r3, r3, #1
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a112:	e002      	b.n	800a11a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a114:	bf00      	nop
 800a116:	e000      	b.n	800a11a <prvProcessReceivedCommands+0x1a6>
					break;
 800a118:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a11a:	4b08      	ldr	r3, [pc, #32]	@ (800a13c <prvProcessReceivedCommands+0x1c8>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	1d39      	adds	r1, r7, #4
 800a120:	2200      	movs	r2, #0
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fb7c 	bl	8008820 <xQueueReceive>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f47f af26 	bne.w	8009f7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	3730      	adds	r7, #48	@ 0x30
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000fe8 	.word	0x20000fe8

0800a140 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a146:	e049      	b.n	800a1dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a148:	4b2e      	ldr	r3, [pc, #184]	@ (800a204 <prvSwitchTimerLists+0xc4>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a152:	4b2c      	ldr	r3, [pc, #176]	@ (800a204 <prvSwitchTimerLists+0xc4>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3304      	adds	r3, #4
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe f84d 	bl	8008200 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a174:	f003 0304 	and.w	r3, r3, #4
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d02f      	beq.n	800a1dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4413      	add	r3, r2
 800a184:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d90e      	bls.n	800a1ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a19a:	4b1a      	ldr	r3, [pc, #104]	@ (800a204 <prvSwitchTimerLists+0xc4>)
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	f7fd fff2 	bl	800818e <vListInsert>
 800a1aa:	e017      	b.n	800a1dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7ff fd58 	bl	8009c6c <xTimerGenericCommand>
 800a1bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10b      	bne.n	800a1dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	603b      	str	r3, [r7, #0]
}
 800a1d6:	bf00      	nop
 800a1d8:	bf00      	nop
 800a1da:	e7fd      	b.n	800a1d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1dc:	4b09      	ldr	r3, [pc, #36]	@ (800a204 <prvSwitchTimerLists+0xc4>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1b0      	bne.n	800a148 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1e6:	4b07      	ldr	r3, [pc, #28]	@ (800a204 <prvSwitchTimerLists+0xc4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1ec:	4b06      	ldr	r3, [pc, #24]	@ (800a208 <prvSwitchTimerLists+0xc8>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a04      	ldr	r2, [pc, #16]	@ (800a204 <prvSwitchTimerLists+0xc4>)
 800a1f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1f4:	4a04      	ldr	r2, [pc, #16]	@ (800a208 <prvSwitchTimerLists+0xc8>)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	6013      	str	r3, [r2, #0]
}
 800a1fa:	bf00      	nop
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000fe0 	.word	0x20000fe0
 800a208:	20000fe4 	.word	0x20000fe4

0800a20c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a212:	f000 f969 	bl	800a4e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a216:	4b15      	ldr	r3, [pc, #84]	@ (800a26c <prvCheckForValidListAndQueue+0x60>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d120      	bne.n	800a260 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a21e:	4814      	ldr	r0, [pc, #80]	@ (800a270 <prvCheckForValidListAndQueue+0x64>)
 800a220:	f7fd ff64 	bl	80080ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a224:	4813      	ldr	r0, [pc, #76]	@ (800a274 <prvCheckForValidListAndQueue+0x68>)
 800a226:	f7fd ff61 	bl	80080ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a22a:	4b13      	ldr	r3, [pc, #76]	@ (800a278 <prvCheckForValidListAndQueue+0x6c>)
 800a22c:	4a10      	ldr	r2, [pc, #64]	@ (800a270 <prvCheckForValidListAndQueue+0x64>)
 800a22e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a230:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <prvCheckForValidListAndQueue+0x70>)
 800a232:	4a10      	ldr	r2, [pc, #64]	@ (800a274 <prvCheckForValidListAndQueue+0x68>)
 800a234:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a236:	2300      	movs	r3, #0
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4b11      	ldr	r3, [pc, #68]	@ (800a280 <prvCheckForValidListAndQueue+0x74>)
 800a23c:	4a11      	ldr	r2, [pc, #68]	@ (800a284 <prvCheckForValidListAndQueue+0x78>)
 800a23e:	2110      	movs	r1, #16
 800a240:	200a      	movs	r0, #10
 800a242:	f7fe f871 	bl	8008328 <xQueueGenericCreateStatic>
 800a246:	4603      	mov	r3, r0
 800a248:	4a08      	ldr	r2, [pc, #32]	@ (800a26c <prvCheckForValidListAndQueue+0x60>)
 800a24a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a24c:	4b07      	ldr	r3, [pc, #28]	@ (800a26c <prvCheckForValidListAndQueue+0x60>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d005      	beq.n	800a260 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a254:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <prvCheckForValidListAndQueue+0x60>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	490b      	ldr	r1, [pc, #44]	@ (800a288 <prvCheckForValidListAndQueue+0x7c>)
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fcd2 	bl	8008c04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a260:	f000 f974 	bl	800a54c <vPortExitCritical>
}
 800a264:	bf00      	nop
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000fe8 	.word	0x20000fe8
 800a270:	20000fb8 	.word	0x20000fb8
 800a274:	20000fcc 	.word	0x20000fcc
 800a278:	20000fe0 	.word	0x20000fe0
 800a27c:	20000fe4 	.word	0x20000fe4
 800a280:	20001094 	.word	0x20001094
 800a284:	20000ff4 	.word	0x20000ff4
 800a288:	0800bb4c 	.word	0x0800bb4c

0800a28c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3b04      	subs	r3, #4
 800a29c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3b04      	subs	r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f023 0201 	bic.w	r2, r3, #1
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2bc:	4a0c      	ldr	r2, [pc, #48]	@ (800a2f0 <pxPortInitialiseStack+0x64>)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3b14      	subs	r3, #20
 800a2c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3b04      	subs	r3, #4
 800a2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f06f 0202 	mvn.w	r2, #2
 800a2da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3b20      	subs	r3, #32
 800a2e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	0800a2f5 	.word	0x0800a2f5

0800a2f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2fe:	4b13      	ldr	r3, [pc, #76]	@ (800a34c <prvTaskExitError+0x58>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a306:	d00b      	beq.n	800a320 <prvTaskExitError+0x2c>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	60fb      	str	r3, [r7, #12]
}
 800a31a:	bf00      	nop
 800a31c:	bf00      	nop
 800a31e:	e7fd      	b.n	800a31c <prvTaskExitError+0x28>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	60bb      	str	r3, [r7, #8]
}
 800a332:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a334:	bf00      	nop
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d0fc      	beq.n	800a336 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	2000000c 	.word	0x2000000c

0800a350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a350:	4b07      	ldr	r3, [pc, #28]	@ (800a370 <pxCurrentTCBConst2>)
 800a352:	6819      	ldr	r1, [r3, #0]
 800a354:	6808      	ldr	r0, [r1, #0]
 800a356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35a:	f380 8809 	msr	PSP, r0
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8811 	msr	BASEPRI, r0
 800a36a:	4770      	bx	lr
 800a36c:	f3af 8000 	nop.w

0800a370 <pxCurrentTCBConst2>:
 800a370:	20000ab8 	.word	0x20000ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop

0800a378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a378:	4808      	ldr	r0, [pc, #32]	@ (800a39c <prvPortStartFirstTask+0x24>)
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	f380 8808 	msr	MSP, r0
 800a382:	f04f 0000 	mov.w	r0, #0
 800a386:	f380 8814 	msr	CONTROL, r0
 800a38a:	b662      	cpsie	i
 800a38c:	b661      	cpsie	f
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	df00      	svc	0
 800a398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a39a:	bf00      	nop
 800a39c:	e000ed08 	.word	0xe000ed08

0800a3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3a6:	4b47      	ldr	r3, [pc, #284]	@ (800a4c4 <xPortStartScheduler+0x124>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a47      	ldr	r2, [pc, #284]	@ (800a4c8 <xPortStartScheduler+0x128>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d10b      	bne.n	800a3c8 <xPortStartScheduler+0x28>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	60fb      	str	r3, [r7, #12]
}
 800a3c2:	bf00      	nop
 800a3c4:	bf00      	nop
 800a3c6:	e7fd      	b.n	800a3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3c8:	4b3e      	ldr	r3, [pc, #248]	@ (800a4c4 <xPortStartScheduler+0x124>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a3f      	ldr	r2, [pc, #252]	@ (800a4cc <xPortStartScheduler+0x12c>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d10b      	bne.n	800a3ea <xPortStartScheduler+0x4a>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	613b      	str	r3, [r7, #16]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3ea:	4b39      	ldr	r3, [pc, #228]	@ (800a4d0 <xPortStartScheduler+0x130>)
 800a3ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	22ff      	movs	r2, #255	@ 0xff
 800a3fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	b2db      	uxtb	r3, r3
 800a402:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	b2db      	uxtb	r3, r3
 800a408:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	4b31      	ldr	r3, [pc, #196]	@ (800a4d4 <xPortStartScheduler+0x134>)
 800a410:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a412:	4b31      	ldr	r3, [pc, #196]	@ (800a4d8 <xPortStartScheduler+0x138>)
 800a414:	2207      	movs	r2, #7
 800a416:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a418:	e009      	b.n	800a42e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a41a:	4b2f      	ldr	r3, [pc, #188]	@ (800a4d8 <xPortStartScheduler+0x138>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3b01      	subs	r3, #1
 800a420:	4a2d      	ldr	r2, [pc, #180]	@ (800a4d8 <xPortStartScheduler+0x138>)
 800a422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	005b      	lsls	r3, r3, #1
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	b2db      	uxtb	r3, r3
 800a432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a436:	2b80      	cmp	r3, #128	@ 0x80
 800a438:	d0ef      	beq.n	800a41a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a43a:	4b27      	ldr	r3, [pc, #156]	@ (800a4d8 <xPortStartScheduler+0x138>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f1c3 0307 	rsb	r3, r3, #7
 800a442:	2b04      	cmp	r3, #4
 800a444:	d00b      	beq.n	800a45e <xPortStartScheduler+0xbe>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60bb      	str	r3, [r7, #8]
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	e7fd      	b.n	800a45a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a45e:	4b1e      	ldr	r3, [pc, #120]	@ (800a4d8 <xPortStartScheduler+0x138>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	021b      	lsls	r3, r3, #8
 800a464:	4a1c      	ldr	r2, [pc, #112]	@ (800a4d8 <xPortStartScheduler+0x138>)
 800a466:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a468:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d8 <xPortStartScheduler+0x138>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a470:	4a19      	ldr	r2, [pc, #100]	@ (800a4d8 <xPortStartScheduler+0x138>)
 800a472:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	b2da      	uxtb	r2, r3
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a47c:	4b17      	ldr	r3, [pc, #92]	@ (800a4dc <xPortStartScheduler+0x13c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a16      	ldr	r2, [pc, #88]	@ (800a4dc <xPortStartScheduler+0x13c>)
 800a482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a486:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a488:	4b14      	ldr	r3, [pc, #80]	@ (800a4dc <xPortStartScheduler+0x13c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a13      	ldr	r2, [pc, #76]	@ (800a4dc <xPortStartScheduler+0x13c>)
 800a48e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a492:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a494:	f000 f8da 	bl	800a64c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a498:	4b11      	ldr	r3, [pc, #68]	@ (800a4e0 <xPortStartScheduler+0x140>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a49e:	f000 f8f9 	bl	800a694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4a2:	4b10      	ldr	r3, [pc, #64]	@ (800a4e4 <xPortStartScheduler+0x144>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a0f      	ldr	r2, [pc, #60]	@ (800a4e4 <xPortStartScheduler+0x144>)
 800a4a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a4ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4ae:	f7ff ff63 	bl	800a378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4b2:	f7ff f83f 	bl	8009534 <vTaskSwitchContext>
	prvTaskExitError();
 800a4b6:	f7ff ff1d 	bl	800a2f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	e000ed00 	.word	0xe000ed00
 800a4c8:	410fc271 	.word	0x410fc271
 800a4cc:	410fc270 	.word	0x410fc270
 800a4d0:	e000e400 	.word	0xe000e400
 800a4d4:	200010e4 	.word	0x200010e4
 800a4d8:	200010e8 	.word	0x200010e8
 800a4dc:	e000ed20 	.word	0xe000ed20
 800a4e0:	2000000c 	.word	0x2000000c
 800a4e4:	e000ef34 	.word	0xe000ef34

0800a4e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	607b      	str	r3, [r7, #4]
}
 800a500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a502:	4b10      	ldr	r3, [pc, #64]	@ (800a544 <vPortEnterCritical+0x5c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3301      	adds	r3, #1
 800a508:	4a0e      	ldr	r2, [pc, #56]	@ (800a544 <vPortEnterCritical+0x5c>)
 800a50a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a50c:	4b0d      	ldr	r3, [pc, #52]	@ (800a544 <vPortEnterCritical+0x5c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d110      	bne.n	800a536 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a514:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <vPortEnterCritical+0x60>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00b      	beq.n	800a536 <vPortEnterCritical+0x4e>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	603b      	str	r3, [r7, #0]
}
 800a530:	bf00      	nop
 800a532:	bf00      	nop
 800a534:	e7fd      	b.n	800a532 <vPortEnterCritical+0x4a>
	}
}
 800a536:	bf00      	nop
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	2000000c 	.word	0x2000000c
 800a548:	e000ed04 	.word	0xe000ed04

0800a54c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a552:	4b12      	ldr	r3, [pc, #72]	@ (800a59c <vPortExitCritical+0x50>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10b      	bne.n	800a572 <vPortExitCritical+0x26>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	607b      	str	r3, [r7, #4]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a572:	4b0a      	ldr	r3, [pc, #40]	@ (800a59c <vPortExitCritical+0x50>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3b01      	subs	r3, #1
 800a578:	4a08      	ldr	r2, [pc, #32]	@ (800a59c <vPortExitCritical+0x50>)
 800a57a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a57c:	4b07      	ldr	r3, [pc, #28]	@ (800a59c <vPortExitCritical+0x50>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <vPortExitCritical+0x44>
 800a584:	2300      	movs	r3, #0
 800a586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f383 8811 	msr	BASEPRI, r3
}
 800a58e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	2000000c 	.word	0x2000000c

0800a5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5a0:	f3ef 8009 	mrs	r0, PSP
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	4b15      	ldr	r3, [pc, #84]	@ (800a600 <pxCurrentTCBConst>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	f01e 0f10 	tst.w	lr, #16
 800a5b0:	bf08      	it	eq
 800a5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ba:	6010      	str	r0, [r2, #0]
 800a5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a5c4:	f380 8811 	msr	BASEPRI, r0
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f7fe ffb0 	bl	8009534 <vTaskSwitchContext>
 800a5d4:	f04f 0000 	mov.w	r0, #0
 800a5d8:	f380 8811 	msr	BASEPRI, r0
 800a5dc:	bc09      	pop	{r0, r3}
 800a5de:	6819      	ldr	r1, [r3, #0]
 800a5e0:	6808      	ldr	r0, [r1, #0]
 800a5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e6:	f01e 0f10 	tst.w	lr, #16
 800a5ea:	bf08      	it	eq
 800a5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5f0:	f380 8809 	msr	PSP, r0
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	f3af 8000 	nop.w

0800a600 <pxCurrentTCBConst>:
 800a600:	20000ab8 	.word	0x20000ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a604:	bf00      	nop
 800a606:	bf00      	nop

0800a608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	607b      	str	r3, [r7, #4]
}
 800a620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a622:	f7fe fecd 	bl	80093c0 <xTaskIncrementTick>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a62c:	4b06      	ldr	r3, [pc, #24]	@ (800a648 <xPortSysTickHandler+0x40>)
 800a62e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	2300      	movs	r3, #0
 800a636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	f383 8811 	msr	BASEPRI, r3
}
 800a63e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	e000ed04 	.word	0xe000ed04

0800a64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a64c:	b480      	push	{r7}
 800a64e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a650:	4b0b      	ldr	r3, [pc, #44]	@ (800a680 <vPortSetupTimerInterrupt+0x34>)
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a656:	4b0b      	ldr	r3, [pc, #44]	@ (800a684 <vPortSetupTimerInterrupt+0x38>)
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a65c:	4b0a      	ldr	r3, [pc, #40]	@ (800a688 <vPortSetupTimerInterrupt+0x3c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a0a      	ldr	r2, [pc, #40]	@ (800a68c <vPortSetupTimerInterrupt+0x40>)
 800a662:	fba2 2303 	umull	r2, r3, r2, r3
 800a666:	099b      	lsrs	r3, r3, #6
 800a668:	4a09      	ldr	r2, [pc, #36]	@ (800a690 <vPortSetupTimerInterrupt+0x44>)
 800a66a:	3b01      	subs	r3, #1
 800a66c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a66e:	4b04      	ldr	r3, [pc, #16]	@ (800a680 <vPortSetupTimerInterrupt+0x34>)
 800a670:	2207      	movs	r2, #7
 800a672:	601a      	str	r2, [r3, #0]
}
 800a674:	bf00      	nop
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	e000e010 	.word	0xe000e010
 800a684:	e000e018 	.word	0xe000e018
 800a688:	20000000 	.word	0x20000000
 800a68c:	10624dd3 	.word	0x10624dd3
 800a690:	e000e014 	.word	0xe000e014

0800a694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a6a4 <vPortEnableVFP+0x10>
 800a698:	6801      	ldr	r1, [r0, #0]
 800a69a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a69e:	6001      	str	r1, [r0, #0]
 800a6a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6a2:	bf00      	nop
 800a6a4:	e000ed88 	.word	0xe000ed88

0800a6a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6ae:	f3ef 8305 	mrs	r3, IPSR
 800a6b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b0f      	cmp	r3, #15
 800a6b8:	d915      	bls.n	800a6e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ba:	4a18      	ldr	r2, [pc, #96]	@ (800a71c <vPortValidateInterruptPriority+0x74>)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4413      	add	r3, r2
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6c4:	4b16      	ldr	r3, [pc, #88]	@ (800a720 <vPortValidateInterruptPriority+0x78>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	7afa      	ldrb	r2, [r7, #11]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d20b      	bcs.n	800a6e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
}
 800a6e0:	bf00      	nop
 800a6e2:	bf00      	nop
 800a6e4:	e7fd      	b.n	800a6e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a724 <vPortValidateInterruptPriority+0x7c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a728 <vPortValidateInterruptPriority+0x80>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d90b      	bls.n	800a70e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	603b      	str	r3, [r7, #0]
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	e7fd      	b.n	800a70a <vPortValidateInterruptPriority+0x62>
	}
 800a70e:	bf00      	nop
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	e000e3f0 	.word	0xe000e3f0
 800a720:	200010e4 	.word	0x200010e4
 800a724:	e000ed0c 	.word	0xe000ed0c
 800a728:	200010e8 	.word	0x200010e8

0800a72c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08a      	sub	sp, #40	@ 0x28
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a734:	2300      	movs	r3, #0
 800a736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a738:	f7fe fd86 	bl	8009248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a73c:	4b5c      	ldr	r3, [pc, #368]	@ (800a8b0 <pvPortMalloc+0x184>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a744:	f000 f924 	bl	800a990 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a748:	4b5a      	ldr	r3, [pc, #360]	@ (800a8b4 <pvPortMalloc+0x188>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4013      	ands	r3, r2
 800a750:	2b00      	cmp	r3, #0
 800a752:	f040 8095 	bne.w	800a880 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01e      	beq.n	800a79a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a75c:	2208      	movs	r2, #8
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4413      	add	r3, r2
 800a762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f003 0307 	and.w	r3, r3, #7
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d015      	beq.n	800a79a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f023 0307 	bic.w	r3, r3, #7
 800a774:	3308      	adds	r3, #8
 800a776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00b      	beq.n	800a79a <pvPortMalloc+0x6e>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	617b      	str	r3, [r7, #20]
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	e7fd      	b.n	800a796 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d06f      	beq.n	800a880 <pvPortMalloc+0x154>
 800a7a0:	4b45      	ldr	r3, [pc, #276]	@ (800a8b8 <pvPortMalloc+0x18c>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d86a      	bhi.n	800a880 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7aa:	4b44      	ldr	r3, [pc, #272]	@ (800a8bc <pvPortMalloc+0x190>)
 800a7ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7ae:	4b43      	ldr	r3, [pc, #268]	@ (800a8bc <pvPortMalloc+0x190>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7b4:	e004      	b.n	800a7c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d903      	bls.n	800a7d2 <pvPortMalloc+0xa6>
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f1      	bne.n	800a7b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7d2:	4b37      	ldr	r3, [pc, #220]	@ (800a8b0 <pvPortMalloc+0x184>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d051      	beq.n	800a880 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	4413      	add	r3, r2
 800a7e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f0:	685a      	ldr	r2, [r3, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	1ad2      	subs	r2, r2, r3
 800a7f6:	2308      	movs	r3, #8
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d920      	bls.n	800a840 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4413      	add	r3, r2
 800a804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	f003 0307 	and.w	r3, r3, #7
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00b      	beq.n	800a828 <pvPortMalloc+0xfc>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	613b      	str	r3, [r7, #16]
}
 800a822:	bf00      	nop
 800a824:	bf00      	nop
 800a826:	e7fd      	b.n	800a824 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	1ad2      	subs	r2, r2, r3
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a83a:	69b8      	ldr	r0, [r7, #24]
 800a83c:	f000 f90a 	bl	800aa54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a840:	4b1d      	ldr	r3, [pc, #116]	@ (800a8b8 <pvPortMalloc+0x18c>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	4a1b      	ldr	r2, [pc, #108]	@ (800a8b8 <pvPortMalloc+0x18c>)
 800a84c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a84e:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b8 <pvPortMalloc+0x18c>)
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c0 <pvPortMalloc+0x194>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d203      	bcs.n	800a862 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a85a:	4b17      	ldr	r3, [pc, #92]	@ (800a8b8 <pvPortMalloc+0x18c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a18      	ldr	r2, [pc, #96]	@ (800a8c0 <pvPortMalloc+0x194>)
 800a860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	4b13      	ldr	r3, [pc, #76]	@ (800a8b4 <pvPortMalloc+0x188>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	431a      	orrs	r2, r3
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a876:	4b13      	ldr	r3, [pc, #76]	@ (800a8c4 <pvPortMalloc+0x198>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3301      	adds	r3, #1
 800a87c:	4a11      	ldr	r2, [pc, #68]	@ (800a8c4 <pvPortMalloc+0x198>)
 800a87e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a880:	f7fe fcf0 	bl	8009264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00b      	beq.n	800a8a6 <pvPortMalloc+0x17a>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	60fb      	str	r3, [r7, #12]
}
 800a8a0:	bf00      	nop
 800a8a2:	bf00      	nop
 800a8a4:	e7fd      	b.n	800a8a2 <pvPortMalloc+0x176>
	return pvReturn;
 800a8a6:	69fb      	ldr	r3, [r7, #28]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3728      	adds	r7, #40	@ 0x28
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20004cf4 	.word	0x20004cf4
 800a8b4:	20004d08 	.word	0x20004d08
 800a8b8:	20004cf8 	.word	0x20004cf8
 800a8bc:	20004cec 	.word	0x20004cec
 800a8c0:	20004cfc 	.word	0x20004cfc
 800a8c4:	20004d00 	.word	0x20004d00

0800a8c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d04f      	beq.n	800a97a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8da:	2308      	movs	r3, #8
 800a8dc:	425b      	negs	r3, r3
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	4b25      	ldr	r3, [pc, #148]	@ (800a984 <vPortFree+0xbc>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10b      	bne.n	800a90e <vPortFree+0x46>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	60fb      	str	r3, [r7, #12]
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	e7fd      	b.n	800a90a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00b      	beq.n	800a92e <vPortFree+0x66>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	60bb      	str	r3, [r7, #8]
}
 800a928:	bf00      	nop
 800a92a:	bf00      	nop
 800a92c:	e7fd      	b.n	800a92a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	4b14      	ldr	r3, [pc, #80]	@ (800a984 <vPortFree+0xbc>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4013      	ands	r3, r2
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d01e      	beq.n	800a97a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d11a      	bne.n	800a97a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	4b0e      	ldr	r3, [pc, #56]	@ (800a984 <vPortFree+0xbc>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	43db      	mvns	r3, r3
 800a94e:	401a      	ands	r2, r3
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a954:	f7fe fc78 	bl	8009248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	4b0a      	ldr	r3, [pc, #40]	@ (800a988 <vPortFree+0xc0>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4413      	add	r3, r2
 800a962:	4a09      	ldr	r2, [pc, #36]	@ (800a988 <vPortFree+0xc0>)
 800a964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a966:	6938      	ldr	r0, [r7, #16]
 800a968:	f000 f874 	bl	800aa54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a96c:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <vPortFree+0xc4>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	4a06      	ldr	r2, [pc, #24]	@ (800a98c <vPortFree+0xc4>)
 800a974:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a976:	f7fe fc75 	bl	8009264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a97a:	bf00      	nop
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20004d08 	.word	0x20004d08
 800a988:	20004cf8 	.word	0x20004cf8
 800a98c:	20004d04 	.word	0x20004d04

0800a990 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a996:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a99a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a99c:	4b27      	ldr	r3, [pc, #156]	@ (800aa3c <prvHeapInit+0xac>)
 800a99e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f003 0307 	and.w	r3, r3, #7
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00c      	beq.n	800a9c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3307      	adds	r3, #7
 800a9ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	4a1f      	ldr	r2, [pc, #124]	@ (800aa3c <prvHeapInit+0xac>)
 800a9c0:	4413      	add	r3, r2
 800a9c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9c8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa40 <prvHeapInit+0xb0>)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9ce:	4b1c      	ldr	r3, [pc, #112]	@ (800aa40 <prvHeapInit+0xb0>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	4413      	add	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9dc:	2208      	movs	r2, #8
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	1a9b      	subs	r3, r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0307 	bic.w	r3, r3, #7
 800a9ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4a15      	ldr	r2, [pc, #84]	@ (800aa44 <prvHeapInit+0xb4>)
 800a9f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9f2:	4b14      	ldr	r3, [pc, #80]	@ (800aa44 <prvHeapInit+0xb4>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9fa:	4b12      	ldr	r3, [pc, #72]	@ (800aa44 <prvHeapInit+0xb4>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	1ad2      	subs	r2, r2, r3
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa10:	4b0c      	ldr	r3, [pc, #48]	@ (800aa44 <prvHeapInit+0xb4>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	4a0a      	ldr	r2, [pc, #40]	@ (800aa48 <prvHeapInit+0xb8>)
 800aa1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	4a09      	ldr	r2, [pc, #36]	@ (800aa4c <prvHeapInit+0xbc>)
 800aa26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa28:	4b09      	ldr	r3, [pc, #36]	@ (800aa50 <prvHeapInit+0xc0>)
 800aa2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa2e:	601a      	str	r2, [r3, #0]
}
 800aa30:	bf00      	nop
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	200010ec 	.word	0x200010ec
 800aa40:	20004cec 	.word	0x20004cec
 800aa44:	20004cf4 	.word	0x20004cf4
 800aa48:	20004cfc 	.word	0x20004cfc
 800aa4c:	20004cf8 	.word	0x20004cf8
 800aa50:	20004d08 	.word	0x20004d08

0800aa54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa5c:	4b28      	ldr	r3, [pc, #160]	@ (800ab00 <prvInsertBlockIntoFreeList+0xac>)
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e002      	b.n	800aa68 <prvInsertBlockIntoFreeList+0x14>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d8f7      	bhi.n	800aa62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d108      	bne.n	800aa96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	441a      	add	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	441a      	add	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d118      	bne.n	800aadc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	4b15      	ldr	r3, [pc, #84]	@ (800ab04 <prvInsertBlockIntoFreeList+0xb0>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d00d      	beq.n	800aad2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	441a      	add	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	e008      	b.n	800aae4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aad2:	4b0c      	ldr	r3, [pc, #48]	@ (800ab04 <prvInsertBlockIntoFreeList+0xb0>)
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e003      	b.n	800aae4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d002      	beq.n	800aaf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaf2:	bf00      	nop
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	20004cec 	.word	0x20004cec
 800ab04:	20004cf4 	.word	0x20004cf4

0800ab08 <rand>:
 800ab08:	4b16      	ldr	r3, [pc, #88]	@ (800ab64 <rand+0x5c>)
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	681c      	ldr	r4, [r3, #0]
 800ab0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab10:	b9b3      	cbnz	r3, 800ab40 <rand+0x38>
 800ab12:	2018      	movs	r0, #24
 800ab14:	f000 fa2e 	bl	800af74 <malloc>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	6320      	str	r0, [r4, #48]	@ 0x30
 800ab1c:	b920      	cbnz	r0, 800ab28 <rand+0x20>
 800ab1e:	4b12      	ldr	r3, [pc, #72]	@ (800ab68 <rand+0x60>)
 800ab20:	4812      	ldr	r0, [pc, #72]	@ (800ab6c <rand+0x64>)
 800ab22:	2152      	movs	r1, #82	@ 0x52
 800ab24:	f000 f9be 	bl	800aea4 <__assert_func>
 800ab28:	4911      	ldr	r1, [pc, #68]	@ (800ab70 <rand+0x68>)
 800ab2a:	4b12      	ldr	r3, [pc, #72]	@ (800ab74 <rand+0x6c>)
 800ab2c:	e9c0 1300 	strd	r1, r3, [r0]
 800ab30:	4b11      	ldr	r3, [pc, #68]	@ (800ab78 <rand+0x70>)
 800ab32:	6083      	str	r3, [r0, #8]
 800ab34:	230b      	movs	r3, #11
 800ab36:	8183      	strh	r3, [r0, #12]
 800ab38:	2100      	movs	r1, #0
 800ab3a:	2001      	movs	r0, #1
 800ab3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ab40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ab42:	480e      	ldr	r0, [pc, #56]	@ (800ab7c <rand+0x74>)
 800ab44:	690b      	ldr	r3, [r1, #16]
 800ab46:	694c      	ldr	r4, [r1, #20]
 800ab48:	4a0d      	ldr	r2, [pc, #52]	@ (800ab80 <rand+0x78>)
 800ab4a:	4358      	muls	r0, r3
 800ab4c:	fb02 0004 	mla	r0, r2, r4, r0
 800ab50:	fba3 3202 	umull	r3, r2, r3, r2
 800ab54:	3301      	adds	r3, #1
 800ab56:	eb40 0002 	adc.w	r0, r0, r2
 800ab5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ab5e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ab62:	bd10      	pop	{r4, pc}
 800ab64:	2000001c 	.word	0x2000001c
 800ab68:	0800bb90 	.word	0x0800bb90
 800ab6c:	0800bba7 	.word	0x0800bba7
 800ab70:	abcd330e 	.word	0xabcd330e
 800ab74:	e66d1234 	.word	0xe66d1234
 800ab78:	0005deec 	.word	0x0005deec
 800ab7c:	5851f42d 	.word	0x5851f42d
 800ab80:	4c957f2d 	.word	0x4c957f2d

0800ab84 <std>:
 800ab84:	2300      	movs	r3, #0
 800ab86:	b510      	push	{r4, lr}
 800ab88:	4604      	mov	r4, r0
 800ab8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab92:	6083      	str	r3, [r0, #8]
 800ab94:	8181      	strh	r1, [r0, #12]
 800ab96:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab98:	81c2      	strh	r2, [r0, #14]
 800ab9a:	6183      	str	r3, [r0, #24]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	2208      	movs	r2, #8
 800aba0:	305c      	adds	r0, #92	@ 0x5c
 800aba2:	f000 f8f4 	bl	800ad8e <memset>
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <std+0x58>)
 800aba8:	6263      	str	r3, [r4, #36]	@ 0x24
 800abaa:	4b0d      	ldr	r3, [pc, #52]	@ (800abe0 <std+0x5c>)
 800abac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abae:	4b0d      	ldr	r3, [pc, #52]	@ (800abe4 <std+0x60>)
 800abb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abb2:	4b0d      	ldr	r3, [pc, #52]	@ (800abe8 <std+0x64>)
 800abb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800abb6:	4b0d      	ldr	r3, [pc, #52]	@ (800abec <std+0x68>)
 800abb8:	6224      	str	r4, [r4, #32]
 800abba:	429c      	cmp	r4, r3
 800abbc:	d006      	beq.n	800abcc <std+0x48>
 800abbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abc2:	4294      	cmp	r4, r2
 800abc4:	d002      	beq.n	800abcc <std+0x48>
 800abc6:	33d0      	adds	r3, #208	@ 0xd0
 800abc8:	429c      	cmp	r4, r3
 800abca:	d105      	bne.n	800abd8 <std+0x54>
 800abcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abd4:	f000 b954 	b.w	800ae80 <__retarget_lock_init_recursive>
 800abd8:	bd10      	pop	{r4, pc}
 800abda:	bf00      	nop
 800abdc:	0800ad09 	.word	0x0800ad09
 800abe0:	0800ad2b 	.word	0x0800ad2b
 800abe4:	0800ad63 	.word	0x0800ad63
 800abe8:	0800ad87 	.word	0x0800ad87
 800abec:	20004d0c 	.word	0x20004d0c

0800abf0 <stdio_exit_handler>:
 800abf0:	4a02      	ldr	r2, [pc, #8]	@ (800abfc <stdio_exit_handler+0xc>)
 800abf2:	4903      	ldr	r1, [pc, #12]	@ (800ac00 <stdio_exit_handler+0x10>)
 800abf4:	4803      	ldr	r0, [pc, #12]	@ (800ac04 <stdio_exit_handler+0x14>)
 800abf6:	f000 b869 	b.w	800accc <_fwalk_sglue>
 800abfa:	bf00      	nop
 800abfc:	20000010 	.word	0x20000010
 800ac00:	0800b1e9 	.word	0x0800b1e9
 800ac04:	20000020 	.word	0x20000020

0800ac08 <cleanup_stdio>:
 800ac08:	6841      	ldr	r1, [r0, #4]
 800ac0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ac3c <cleanup_stdio+0x34>)
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	d001      	beq.n	800ac18 <cleanup_stdio+0x10>
 800ac14:	f000 fae8 	bl	800b1e8 <_fflush_r>
 800ac18:	68a1      	ldr	r1, [r4, #8]
 800ac1a:	4b09      	ldr	r3, [pc, #36]	@ (800ac40 <cleanup_stdio+0x38>)
 800ac1c:	4299      	cmp	r1, r3
 800ac1e:	d002      	beq.n	800ac26 <cleanup_stdio+0x1e>
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fae1 	bl	800b1e8 <_fflush_r>
 800ac26:	68e1      	ldr	r1, [r4, #12]
 800ac28:	4b06      	ldr	r3, [pc, #24]	@ (800ac44 <cleanup_stdio+0x3c>)
 800ac2a:	4299      	cmp	r1, r3
 800ac2c:	d004      	beq.n	800ac38 <cleanup_stdio+0x30>
 800ac2e:	4620      	mov	r0, r4
 800ac30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac34:	f000 bad8 	b.w	800b1e8 <_fflush_r>
 800ac38:	bd10      	pop	{r4, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20004d0c 	.word	0x20004d0c
 800ac40:	20004d74 	.word	0x20004d74
 800ac44:	20004ddc 	.word	0x20004ddc

0800ac48 <global_stdio_init.part.0>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac78 <global_stdio_init.part.0+0x30>)
 800ac4c:	4c0b      	ldr	r4, [pc, #44]	@ (800ac7c <global_stdio_init.part.0+0x34>)
 800ac4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ac80 <global_stdio_init.part.0+0x38>)
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	4620      	mov	r0, r4
 800ac54:	2200      	movs	r2, #0
 800ac56:	2104      	movs	r1, #4
 800ac58:	f7ff ff94 	bl	800ab84 <std>
 800ac5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac60:	2201      	movs	r2, #1
 800ac62:	2109      	movs	r1, #9
 800ac64:	f7ff ff8e 	bl	800ab84 <std>
 800ac68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac72:	2112      	movs	r1, #18
 800ac74:	f7ff bf86 	b.w	800ab84 <std>
 800ac78:	20004e44 	.word	0x20004e44
 800ac7c:	20004d0c 	.word	0x20004d0c
 800ac80:	0800abf1 	.word	0x0800abf1

0800ac84 <__sfp_lock_acquire>:
 800ac84:	4801      	ldr	r0, [pc, #4]	@ (800ac8c <__sfp_lock_acquire+0x8>)
 800ac86:	f000 b8fc 	b.w	800ae82 <__retarget_lock_acquire_recursive>
 800ac8a:	bf00      	nop
 800ac8c:	20004e4d 	.word	0x20004e4d

0800ac90 <__sfp_lock_release>:
 800ac90:	4801      	ldr	r0, [pc, #4]	@ (800ac98 <__sfp_lock_release+0x8>)
 800ac92:	f000 b8f7 	b.w	800ae84 <__retarget_lock_release_recursive>
 800ac96:	bf00      	nop
 800ac98:	20004e4d 	.word	0x20004e4d

0800ac9c <__sinit>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	f7ff fff0 	bl	800ac84 <__sfp_lock_acquire>
 800aca4:	6a23      	ldr	r3, [r4, #32]
 800aca6:	b11b      	cbz	r3, 800acb0 <__sinit+0x14>
 800aca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acac:	f7ff bff0 	b.w	800ac90 <__sfp_lock_release>
 800acb0:	4b04      	ldr	r3, [pc, #16]	@ (800acc4 <__sinit+0x28>)
 800acb2:	6223      	str	r3, [r4, #32]
 800acb4:	4b04      	ldr	r3, [pc, #16]	@ (800acc8 <__sinit+0x2c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f5      	bne.n	800aca8 <__sinit+0xc>
 800acbc:	f7ff ffc4 	bl	800ac48 <global_stdio_init.part.0>
 800acc0:	e7f2      	b.n	800aca8 <__sinit+0xc>
 800acc2:	bf00      	nop
 800acc4:	0800ac09 	.word	0x0800ac09
 800acc8:	20004e44 	.word	0x20004e44

0800accc <_fwalk_sglue>:
 800accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd0:	4607      	mov	r7, r0
 800acd2:	4688      	mov	r8, r1
 800acd4:	4614      	mov	r4, r2
 800acd6:	2600      	movs	r6, #0
 800acd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acdc:	f1b9 0901 	subs.w	r9, r9, #1
 800ace0:	d505      	bpl.n	800acee <_fwalk_sglue+0x22>
 800ace2:	6824      	ldr	r4, [r4, #0]
 800ace4:	2c00      	cmp	r4, #0
 800ace6:	d1f7      	bne.n	800acd8 <_fwalk_sglue+0xc>
 800ace8:	4630      	mov	r0, r6
 800acea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d907      	bls.n	800ad04 <_fwalk_sglue+0x38>
 800acf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acf8:	3301      	adds	r3, #1
 800acfa:	d003      	beq.n	800ad04 <_fwalk_sglue+0x38>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4638      	mov	r0, r7
 800ad00:	47c0      	blx	r8
 800ad02:	4306      	orrs	r6, r0
 800ad04:	3568      	adds	r5, #104	@ 0x68
 800ad06:	e7e9      	b.n	800acdc <_fwalk_sglue+0x10>

0800ad08 <__sread>:
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad10:	f000 f868 	bl	800ade4 <_read_r>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	bfab      	itete	ge
 800ad18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad1c:	181b      	addge	r3, r3, r0
 800ad1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad22:	bfac      	ite	ge
 800ad24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad26:	81a3      	strhlt	r3, [r4, #12]
 800ad28:	bd10      	pop	{r4, pc}

0800ad2a <__swrite>:
 800ad2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2e:	461f      	mov	r7, r3
 800ad30:	898b      	ldrh	r3, [r1, #12]
 800ad32:	05db      	lsls	r3, r3, #23
 800ad34:	4605      	mov	r5, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	4616      	mov	r6, r2
 800ad3a:	d505      	bpl.n	800ad48 <__swrite+0x1e>
 800ad3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad40:	2302      	movs	r3, #2
 800ad42:	2200      	movs	r2, #0
 800ad44:	f000 f83c 	bl	800adc0 <_lseek_r>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	4632      	mov	r2, r6
 800ad56:	463b      	mov	r3, r7
 800ad58:	4628      	mov	r0, r5
 800ad5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5e:	f000 b853 	b.w	800ae08 <_write_r>

0800ad62 <__sseek>:
 800ad62:	b510      	push	{r4, lr}
 800ad64:	460c      	mov	r4, r1
 800ad66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad6a:	f000 f829 	bl	800adc0 <_lseek_r>
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	bf15      	itete	ne
 800ad74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad7e:	81a3      	strheq	r3, [r4, #12]
 800ad80:	bf18      	it	ne
 800ad82:	81a3      	strhne	r3, [r4, #12]
 800ad84:	bd10      	pop	{r4, pc}

0800ad86 <__sclose>:
 800ad86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad8a:	f000 b809 	b.w	800ada0 <_close_r>

0800ad8e <memset>:
 800ad8e:	4402      	add	r2, r0
 800ad90:	4603      	mov	r3, r0
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d100      	bne.n	800ad98 <memset+0xa>
 800ad96:	4770      	bx	lr
 800ad98:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9c:	e7f9      	b.n	800ad92 <memset+0x4>
	...

0800ada0 <_close_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d06      	ldr	r5, [pc, #24]	@ (800adbc <_close_r+0x1c>)
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f7 f99c 	bl	80020e8 <_close>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_close_r+0x1a>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_close_r+0x1a>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20004e48 	.word	0x20004e48

0800adc0 <_lseek_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	@ (800ade0 <_lseek_r+0x20>)
 800adc4:	4604      	mov	r4, r0
 800adc6:	4608      	mov	r0, r1
 800adc8:	4611      	mov	r1, r2
 800adca:	2200      	movs	r2, #0
 800adcc:	602a      	str	r2, [r5, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	f7f7 f9b1 	bl	8002136 <_lseek>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d102      	bne.n	800adde <_lseek_r+0x1e>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	b103      	cbz	r3, 800adde <_lseek_r+0x1e>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	20004e48 	.word	0x20004e48

0800ade4 <_read_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d07      	ldr	r5, [pc, #28]	@ (800ae04 <_read_r+0x20>)
 800ade8:	4604      	mov	r4, r0
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	2200      	movs	r2, #0
 800adf0:	602a      	str	r2, [r5, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f7f7 f93f 	bl	8002076 <_read>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_read_r+0x1e>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_read_r+0x1e>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	20004e48 	.word	0x20004e48

0800ae08 <_write_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d07      	ldr	r5, [pc, #28]	@ (800ae28 <_write_r+0x20>)
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	4608      	mov	r0, r1
 800ae10:	4611      	mov	r1, r2
 800ae12:	2200      	movs	r2, #0
 800ae14:	602a      	str	r2, [r5, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	f7f7 f94a 	bl	80020b0 <_write>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_write_r+0x1e>
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_write_r+0x1e>
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	20004e48 	.word	0x20004e48

0800ae2c <__errno>:
 800ae2c:	4b01      	ldr	r3, [pc, #4]	@ (800ae34 <__errno+0x8>)
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	2000001c 	.word	0x2000001c

0800ae38 <__libc_init_array>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	4d0d      	ldr	r5, [pc, #52]	@ (800ae70 <__libc_init_array+0x38>)
 800ae3c:	4c0d      	ldr	r4, [pc, #52]	@ (800ae74 <__libc_init_array+0x3c>)
 800ae3e:	1b64      	subs	r4, r4, r5
 800ae40:	10a4      	asrs	r4, r4, #2
 800ae42:	2600      	movs	r6, #0
 800ae44:	42a6      	cmp	r6, r4
 800ae46:	d109      	bne.n	800ae5c <__libc_init_array+0x24>
 800ae48:	4d0b      	ldr	r5, [pc, #44]	@ (800ae78 <__libc_init_array+0x40>)
 800ae4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae7c <__libc_init_array+0x44>)
 800ae4c:	f000 fe46 	bl	800badc <_init>
 800ae50:	1b64      	subs	r4, r4, r5
 800ae52:	10a4      	asrs	r4, r4, #2
 800ae54:	2600      	movs	r6, #0
 800ae56:	42a6      	cmp	r6, r4
 800ae58:	d105      	bne.n	800ae66 <__libc_init_array+0x2e>
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
 800ae5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae60:	4798      	blx	r3
 800ae62:	3601      	adds	r6, #1
 800ae64:	e7ee      	b.n	800ae44 <__libc_init_array+0xc>
 800ae66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae6a:	4798      	blx	r3
 800ae6c:	3601      	adds	r6, #1
 800ae6e:	e7f2      	b.n	800ae56 <__libc_init_array+0x1e>
 800ae70:	0800bc78 	.word	0x0800bc78
 800ae74:	0800bc78 	.word	0x0800bc78
 800ae78:	0800bc78 	.word	0x0800bc78
 800ae7c:	0800bc7c 	.word	0x0800bc7c

0800ae80 <__retarget_lock_init_recursive>:
 800ae80:	4770      	bx	lr

0800ae82 <__retarget_lock_acquire_recursive>:
 800ae82:	4770      	bx	lr

0800ae84 <__retarget_lock_release_recursive>:
 800ae84:	4770      	bx	lr

0800ae86 <memcpy>:
 800ae86:	440a      	add	r2, r1
 800ae88:	4291      	cmp	r1, r2
 800ae8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae8e:	d100      	bne.n	800ae92 <memcpy+0xc>
 800ae90:	4770      	bx	lr
 800ae92:	b510      	push	{r4, lr}
 800ae94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae9c:	4291      	cmp	r1, r2
 800ae9e:	d1f9      	bne.n	800ae94 <memcpy+0xe>
 800aea0:	bd10      	pop	{r4, pc}
	...

0800aea4 <__assert_func>:
 800aea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aea6:	4614      	mov	r4, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4b09      	ldr	r3, [pc, #36]	@ (800aed0 <__assert_func+0x2c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4605      	mov	r5, r0
 800aeb0:	68d8      	ldr	r0, [r3, #12]
 800aeb2:	b14c      	cbz	r4, 800aec8 <__assert_func+0x24>
 800aeb4:	4b07      	ldr	r3, [pc, #28]	@ (800aed4 <__assert_func+0x30>)
 800aeb6:	9100      	str	r1, [sp, #0]
 800aeb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aebc:	4906      	ldr	r1, [pc, #24]	@ (800aed8 <__assert_func+0x34>)
 800aebe:	462b      	mov	r3, r5
 800aec0:	f000 f9ba 	bl	800b238 <fiprintf>
 800aec4:	f000 f9da 	bl	800b27c <abort>
 800aec8:	4b04      	ldr	r3, [pc, #16]	@ (800aedc <__assert_func+0x38>)
 800aeca:	461c      	mov	r4, r3
 800aecc:	e7f3      	b.n	800aeb6 <__assert_func+0x12>
 800aece:	bf00      	nop
 800aed0:	2000001c 	.word	0x2000001c
 800aed4:	0800bbff 	.word	0x0800bbff
 800aed8:	0800bc0c 	.word	0x0800bc0c
 800aedc:	0800bc3a 	.word	0x0800bc3a

0800aee0 <_free_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4605      	mov	r5, r0
 800aee4:	2900      	cmp	r1, #0
 800aee6:	d041      	beq.n	800af6c <_free_r+0x8c>
 800aee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeec:	1f0c      	subs	r4, r1, #4
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	bfb8      	it	lt
 800aef2:	18e4      	addlt	r4, r4, r3
 800aef4:	f000 f8e8 	bl	800b0c8 <__malloc_lock>
 800aef8:	4a1d      	ldr	r2, [pc, #116]	@ (800af70 <_free_r+0x90>)
 800aefa:	6813      	ldr	r3, [r2, #0]
 800aefc:	b933      	cbnz	r3, 800af0c <_free_r+0x2c>
 800aefe:	6063      	str	r3, [r4, #4]
 800af00:	6014      	str	r4, [r2, #0]
 800af02:	4628      	mov	r0, r5
 800af04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af08:	f000 b8e4 	b.w	800b0d4 <__malloc_unlock>
 800af0c:	42a3      	cmp	r3, r4
 800af0e:	d908      	bls.n	800af22 <_free_r+0x42>
 800af10:	6820      	ldr	r0, [r4, #0]
 800af12:	1821      	adds	r1, r4, r0
 800af14:	428b      	cmp	r3, r1
 800af16:	bf01      	itttt	eq
 800af18:	6819      	ldreq	r1, [r3, #0]
 800af1a:	685b      	ldreq	r3, [r3, #4]
 800af1c:	1809      	addeq	r1, r1, r0
 800af1e:	6021      	streq	r1, [r4, #0]
 800af20:	e7ed      	b.n	800aefe <_free_r+0x1e>
 800af22:	461a      	mov	r2, r3
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	b10b      	cbz	r3, 800af2c <_free_r+0x4c>
 800af28:	42a3      	cmp	r3, r4
 800af2a:	d9fa      	bls.n	800af22 <_free_r+0x42>
 800af2c:	6811      	ldr	r1, [r2, #0]
 800af2e:	1850      	adds	r0, r2, r1
 800af30:	42a0      	cmp	r0, r4
 800af32:	d10b      	bne.n	800af4c <_free_r+0x6c>
 800af34:	6820      	ldr	r0, [r4, #0]
 800af36:	4401      	add	r1, r0
 800af38:	1850      	adds	r0, r2, r1
 800af3a:	4283      	cmp	r3, r0
 800af3c:	6011      	str	r1, [r2, #0]
 800af3e:	d1e0      	bne.n	800af02 <_free_r+0x22>
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	6053      	str	r3, [r2, #4]
 800af46:	4408      	add	r0, r1
 800af48:	6010      	str	r0, [r2, #0]
 800af4a:	e7da      	b.n	800af02 <_free_r+0x22>
 800af4c:	d902      	bls.n	800af54 <_free_r+0x74>
 800af4e:	230c      	movs	r3, #12
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	e7d6      	b.n	800af02 <_free_r+0x22>
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	1821      	adds	r1, r4, r0
 800af58:	428b      	cmp	r3, r1
 800af5a:	bf04      	itt	eq
 800af5c:	6819      	ldreq	r1, [r3, #0]
 800af5e:	685b      	ldreq	r3, [r3, #4]
 800af60:	6063      	str	r3, [r4, #4]
 800af62:	bf04      	itt	eq
 800af64:	1809      	addeq	r1, r1, r0
 800af66:	6021      	streq	r1, [r4, #0]
 800af68:	6054      	str	r4, [r2, #4]
 800af6a:	e7ca      	b.n	800af02 <_free_r+0x22>
 800af6c:	bd38      	pop	{r3, r4, r5, pc}
 800af6e:	bf00      	nop
 800af70:	20004e54 	.word	0x20004e54

0800af74 <malloc>:
 800af74:	4b02      	ldr	r3, [pc, #8]	@ (800af80 <malloc+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f000 b825 	b.w	800afc8 <_malloc_r>
 800af7e:	bf00      	nop
 800af80:	2000001c 	.word	0x2000001c

0800af84 <sbrk_aligned>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	4e0f      	ldr	r6, [pc, #60]	@ (800afc4 <sbrk_aligned+0x40>)
 800af88:	460c      	mov	r4, r1
 800af8a:	6831      	ldr	r1, [r6, #0]
 800af8c:	4605      	mov	r5, r0
 800af8e:	b911      	cbnz	r1, 800af96 <sbrk_aligned+0x12>
 800af90:	f000 f964 	bl	800b25c <_sbrk_r>
 800af94:	6030      	str	r0, [r6, #0]
 800af96:	4621      	mov	r1, r4
 800af98:	4628      	mov	r0, r5
 800af9a:	f000 f95f 	bl	800b25c <_sbrk_r>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	d103      	bne.n	800afaa <sbrk_aligned+0x26>
 800afa2:	f04f 34ff 	mov.w	r4, #4294967295
 800afa6:	4620      	mov	r0, r4
 800afa8:	bd70      	pop	{r4, r5, r6, pc}
 800afaa:	1cc4      	adds	r4, r0, #3
 800afac:	f024 0403 	bic.w	r4, r4, #3
 800afb0:	42a0      	cmp	r0, r4
 800afb2:	d0f8      	beq.n	800afa6 <sbrk_aligned+0x22>
 800afb4:	1a21      	subs	r1, r4, r0
 800afb6:	4628      	mov	r0, r5
 800afb8:	f000 f950 	bl	800b25c <_sbrk_r>
 800afbc:	3001      	adds	r0, #1
 800afbe:	d1f2      	bne.n	800afa6 <sbrk_aligned+0x22>
 800afc0:	e7ef      	b.n	800afa2 <sbrk_aligned+0x1e>
 800afc2:	bf00      	nop
 800afc4:	20004e50 	.word	0x20004e50

0800afc8 <_malloc_r>:
 800afc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afcc:	1ccd      	adds	r5, r1, #3
 800afce:	f025 0503 	bic.w	r5, r5, #3
 800afd2:	3508      	adds	r5, #8
 800afd4:	2d0c      	cmp	r5, #12
 800afd6:	bf38      	it	cc
 800afd8:	250c      	movcc	r5, #12
 800afda:	2d00      	cmp	r5, #0
 800afdc:	4606      	mov	r6, r0
 800afde:	db01      	blt.n	800afe4 <_malloc_r+0x1c>
 800afe0:	42a9      	cmp	r1, r5
 800afe2:	d904      	bls.n	800afee <_malloc_r+0x26>
 800afe4:	230c      	movs	r3, #12
 800afe6:	6033      	str	r3, [r6, #0]
 800afe8:	2000      	movs	r0, #0
 800afea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0c4 <_malloc_r+0xfc>
 800aff2:	f000 f869 	bl	800b0c8 <__malloc_lock>
 800aff6:	f8d8 3000 	ldr.w	r3, [r8]
 800affa:	461c      	mov	r4, r3
 800affc:	bb44      	cbnz	r4, 800b050 <_malloc_r+0x88>
 800affe:	4629      	mov	r1, r5
 800b000:	4630      	mov	r0, r6
 800b002:	f7ff ffbf 	bl	800af84 <sbrk_aligned>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	4604      	mov	r4, r0
 800b00a:	d158      	bne.n	800b0be <_malloc_r+0xf6>
 800b00c:	f8d8 4000 	ldr.w	r4, [r8]
 800b010:	4627      	mov	r7, r4
 800b012:	2f00      	cmp	r7, #0
 800b014:	d143      	bne.n	800b09e <_malloc_r+0xd6>
 800b016:	2c00      	cmp	r4, #0
 800b018:	d04b      	beq.n	800b0b2 <_malloc_r+0xea>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	4639      	mov	r1, r7
 800b01e:	4630      	mov	r0, r6
 800b020:	eb04 0903 	add.w	r9, r4, r3
 800b024:	f000 f91a 	bl	800b25c <_sbrk_r>
 800b028:	4581      	cmp	r9, r0
 800b02a:	d142      	bne.n	800b0b2 <_malloc_r+0xea>
 800b02c:	6821      	ldr	r1, [r4, #0]
 800b02e:	1a6d      	subs	r5, r5, r1
 800b030:	4629      	mov	r1, r5
 800b032:	4630      	mov	r0, r6
 800b034:	f7ff ffa6 	bl	800af84 <sbrk_aligned>
 800b038:	3001      	adds	r0, #1
 800b03a:	d03a      	beq.n	800b0b2 <_malloc_r+0xea>
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	442b      	add	r3, r5
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	f8d8 3000 	ldr.w	r3, [r8]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	bb62      	cbnz	r2, 800b0a4 <_malloc_r+0xdc>
 800b04a:	f8c8 7000 	str.w	r7, [r8]
 800b04e:	e00f      	b.n	800b070 <_malloc_r+0xa8>
 800b050:	6822      	ldr	r2, [r4, #0]
 800b052:	1b52      	subs	r2, r2, r5
 800b054:	d420      	bmi.n	800b098 <_malloc_r+0xd0>
 800b056:	2a0b      	cmp	r2, #11
 800b058:	d917      	bls.n	800b08a <_malloc_r+0xc2>
 800b05a:	1961      	adds	r1, r4, r5
 800b05c:	42a3      	cmp	r3, r4
 800b05e:	6025      	str	r5, [r4, #0]
 800b060:	bf18      	it	ne
 800b062:	6059      	strne	r1, [r3, #4]
 800b064:	6863      	ldr	r3, [r4, #4]
 800b066:	bf08      	it	eq
 800b068:	f8c8 1000 	streq.w	r1, [r8]
 800b06c:	5162      	str	r2, [r4, r5]
 800b06e:	604b      	str	r3, [r1, #4]
 800b070:	4630      	mov	r0, r6
 800b072:	f000 f82f 	bl	800b0d4 <__malloc_unlock>
 800b076:	f104 000b 	add.w	r0, r4, #11
 800b07a:	1d23      	adds	r3, r4, #4
 800b07c:	f020 0007 	bic.w	r0, r0, #7
 800b080:	1ac2      	subs	r2, r0, r3
 800b082:	bf1c      	itt	ne
 800b084:	1a1b      	subne	r3, r3, r0
 800b086:	50a3      	strne	r3, [r4, r2]
 800b088:	e7af      	b.n	800afea <_malloc_r+0x22>
 800b08a:	6862      	ldr	r2, [r4, #4]
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	bf0c      	ite	eq
 800b090:	f8c8 2000 	streq.w	r2, [r8]
 800b094:	605a      	strne	r2, [r3, #4]
 800b096:	e7eb      	b.n	800b070 <_malloc_r+0xa8>
 800b098:	4623      	mov	r3, r4
 800b09a:	6864      	ldr	r4, [r4, #4]
 800b09c:	e7ae      	b.n	800affc <_malloc_r+0x34>
 800b09e:	463c      	mov	r4, r7
 800b0a0:	687f      	ldr	r7, [r7, #4]
 800b0a2:	e7b6      	b.n	800b012 <_malloc_r+0x4a>
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	42a3      	cmp	r3, r4
 800b0aa:	d1fb      	bne.n	800b0a4 <_malloc_r+0xdc>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	6053      	str	r3, [r2, #4]
 800b0b0:	e7de      	b.n	800b070 <_malloc_r+0xa8>
 800b0b2:	230c      	movs	r3, #12
 800b0b4:	6033      	str	r3, [r6, #0]
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f000 f80c 	bl	800b0d4 <__malloc_unlock>
 800b0bc:	e794      	b.n	800afe8 <_malloc_r+0x20>
 800b0be:	6005      	str	r5, [r0, #0]
 800b0c0:	e7d6      	b.n	800b070 <_malloc_r+0xa8>
 800b0c2:	bf00      	nop
 800b0c4:	20004e54 	.word	0x20004e54

0800b0c8 <__malloc_lock>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	@ (800b0d0 <__malloc_lock+0x8>)
 800b0ca:	f7ff beda 	b.w	800ae82 <__retarget_lock_acquire_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	20004e4c 	.word	0x20004e4c

0800b0d4 <__malloc_unlock>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	@ (800b0dc <__malloc_unlock+0x8>)
 800b0d6:	f7ff bed5 	b.w	800ae84 <__retarget_lock_release_recursive>
 800b0da:	bf00      	nop
 800b0dc:	20004e4c 	.word	0x20004e4c

0800b0e0 <__sflush_r>:
 800b0e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e8:	0716      	lsls	r6, r2, #28
 800b0ea:	4605      	mov	r5, r0
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	d454      	bmi.n	800b19a <__sflush_r+0xba>
 800b0f0:	684b      	ldr	r3, [r1, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dc02      	bgt.n	800b0fc <__sflush_r+0x1c>
 800b0f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	dd48      	ble.n	800b18e <__sflush_r+0xae>
 800b0fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0fe:	2e00      	cmp	r6, #0
 800b100:	d045      	beq.n	800b18e <__sflush_r+0xae>
 800b102:	2300      	movs	r3, #0
 800b104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b108:	682f      	ldr	r7, [r5, #0]
 800b10a:	6a21      	ldr	r1, [r4, #32]
 800b10c:	602b      	str	r3, [r5, #0]
 800b10e:	d030      	beq.n	800b172 <__sflush_r+0x92>
 800b110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	0759      	lsls	r1, r3, #29
 800b116:	d505      	bpl.n	800b124 <__sflush_r+0x44>
 800b118:	6863      	ldr	r3, [r4, #4]
 800b11a:	1ad2      	subs	r2, r2, r3
 800b11c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b11e:	b10b      	cbz	r3, 800b124 <__sflush_r+0x44>
 800b120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b122:	1ad2      	subs	r2, r2, r3
 800b124:	2300      	movs	r3, #0
 800b126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b128:	6a21      	ldr	r1, [r4, #32]
 800b12a:	4628      	mov	r0, r5
 800b12c:	47b0      	blx	r6
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	d106      	bne.n	800b142 <__sflush_r+0x62>
 800b134:	6829      	ldr	r1, [r5, #0]
 800b136:	291d      	cmp	r1, #29
 800b138:	d82b      	bhi.n	800b192 <__sflush_r+0xb2>
 800b13a:	4a2a      	ldr	r2, [pc, #168]	@ (800b1e4 <__sflush_r+0x104>)
 800b13c:	40ca      	lsrs	r2, r1
 800b13e:	07d6      	lsls	r6, r2, #31
 800b140:	d527      	bpl.n	800b192 <__sflush_r+0xb2>
 800b142:	2200      	movs	r2, #0
 800b144:	6062      	str	r2, [r4, #4]
 800b146:	04d9      	lsls	r1, r3, #19
 800b148:	6922      	ldr	r2, [r4, #16]
 800b14a:	6022      	str	r2, [r4, #0]
 800b14c:	d504      	bpl.n	800b158 <__sflush_r+0x78>
 800b14e:	1c42      	adds	r2, r0, #1
 800b150:	d101      	bne.n	800b156 <__sflush_r+0x76>
 800b152:	682b      	ldr	r3, [r5, #0]
 800b154:	b903      	cbnz	r3, 800b158 <__sflush_r+0x78>
 800b156:	6560      	str	r0, [r4, #84]	@ 0x54
 800b158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b15a:	602f      	str	r7, [r5, #0]
 800b15c:	b1b9      	cbz	r1, 800b18e <__sflush_r+0xae>
 800b15e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b162:	4299      	cmp	r1, r3
 800b164:	d002      	beq.n	800b16c <__sflush_r+0x8c>
 800b166:	4628      	mov	r0, r5
 800b168:	f7ff feba 	bl	800aee0 <_free_r>
 800b16c:	2300      	movs	r3, #0
 800b16e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b170:	e00d      	b.n	800b18e <__sflush_r+0xae>
 800b172:	2301      	movs	r3, #1
 800b174:	4628      	mov	r0, r5
 800b176:	47b0      	blx	r6
 800b178:	4602      	mov	r2, r0
 800b17a:	1c50      	adds	r0, r2, #1
 800b17c:	d1c9      	bne.n	800b112 <__sflush_r+0x32>
 800b17e:	682b      	ldr	r3, [r5, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d0c6      	beq.n	800b112 <__sflush_r+0x32>
 800b184:	2b1d      	cmp	r3, #29
 800b186:	d001      	beq.n	800b18c <__sflush_r+0xac>
 800b188:	2b16      	cmp	r3, #22
 800b18a:	d11e      	bne.n	800b1ca <__sflush_r+0xea>
 800b18c:	602f      	str	r7, [r5, #0]
 800b18e:	2000      	movs	r0, #0
 800b190:	e022      	b.n	800b1d8 <__sflush_r+0xf8>
 800b192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b196:	b21b      	sxth	r3, r3
 800b198:	e01b      	b.n	800b1d2 <__sflush_r+0xf2>
 800b19a:	690f      	ldr	r7, [r1, #16]
 800b19c:	2f00      	cmp	r7, #0
 800b19e:	d0f6      	beq.n	800b18e <__sflush_r+0xae>
 800b1a0:	0793      	lsls	r3, r2, #30
 800b1a2:	680e      	ldr	r6, [r1, #0]
 800b1a4:	bf08      	it	eq
 800b1a6:	694b      	ldreq	r3, [r1, #20]
 800b1a8:	600f      	str	r7, [r1, #0]
 800b1aa:	bf18      	it	ne
 800b1ac:	2300      	movne	r3, #0
 800b1ae:	eba6 0807 	sub.w	r8, r6, r7
 800b1b2:	608b      	str	r3, [r1, #8]
 800b1b4:	f1b8 0f00 	cmp.w	r8, #0
 800b1b8:	dde9      	ble.n	800b18e <__sflush_r+0xae>
 800b1ba:	6a21      	ldr	r1, [r4, #32]
 800b1bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1be:	4643      	mov	r3, r8
 800b1c0:	463a      	mov	r2, r7
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b0      	blx	r6
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	dc08      	bgt.n	800b1dc <__sflush_r+0xfc>
 800b1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1dc:	4407      	add	r7, r0
 800b1de:	eba8 0800 	sub.w	r8, r8, r0
 800b1e2:	e7e7      	b.n	800b1b4 <__sflush_r+0xd4>
 800b1e4:	20400001 	.word	0x20400001

0800b1e8 <_fflush_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	690b      	ldr	r3, [r1, #16]
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	b913      	cbnz	r3, 800b1f8 <_fflush_r+0x10>
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	b118      	cbz	r0, 800b202 <_fflush_r+0x1a>
 800b1fa:	6a03      	ldr	r3, [r0, #32]
 800b1fc:	b90b      	cbnz	r3, 800b202 <_fflush_r+0x1a>
 800b1fe:	f7ff fd4d 	bl	800ac9c <__sinit>
 800b202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d0f3      	beq.n	800b1f2 <_fflush_r+0xa>
 800b20a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b20c:	07d0      	lsls	r0, r2, #31
 800b20e:	d404      	bmi.n	800b21a <_fflush_r+0x32>
 800b210:	0599      	lsls	r1, r3, #22
 800b212:	d402      	bmi.n	800b21a <_fflush_r+0x32>
 800b214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b216:	f7ff fe34 	bl	800ae82 <__retarget_lock_acquire_recursive>
 800b21a:	4628      	mov	r0, r5
 800b21c:	4621      	mov	r1, r4
 800b21e:	f7ff ff5f 	bl	800b0e0 <__sflush_r>
 800b222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b224:	07da      	lsls	r2, r3, #31
 800b226:	4605      	mov	r5, r0
 800b228:	d4e4      	bmi.n	800b1f4 <_fflush_r+0xc>
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	059b      	lsls	r3, r3, #22
 800b22e:	d4e1      	bmi.n	800b1f4 <_fflush_r+0xc>
 800b230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b232:	f7ff fe27 	bl	800ae84 <__retarget_lock_release_recursive>
 800b236:	e7dd      	b.n	800b1f4 <_fflush_r+0xc>

0800b238 <fiprintf>:
 800b238:	b40e      	push	{r1, r2, r3}
 800b23a:	b503      	push	{r0, r1, lr}
 800b23c:	4601      	mov	r1, r0
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	4805      	ldr	r0, [pc, #20]	@ (800b258 <fiprintf+0x20>)
 800b242:	f853 2b04 	ldr.w	r2, [r3], #4
 800b246:	6800      	ldr	r0, [r0, #0]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	f000 f847 	bl	800b2dc <_vfiprintf_r>
 800b24e:	b002      	add	sp, #8
 800b250:	f85d eb04 	ldr.w	lr, [sp], #4
 800b254:	b003      	add	sp, #12
 800b256:	4770      	bx	lr
 800b258:	2000001c 	.word	0x2000001c

0800b25c <_sbrk_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4d06      	ldr	r5, [pc, #24]	@ (800b278 <_sbrk_r+0x1c>)
 800b260:	2300      	movs	r3, #0
 800b262:	4604      	mov	r4, r0
 800b264:	4608      	mov	r0, r1
 800b266:	602b      	str	r3, [r5, #0]
 800b268:	f7f6 ff72 	bl	8002150 <_sbrk>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_sbrk_r+0x1a>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_sbrk_r+0x1a>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	20004e48 	.word	0x20004e48

0800b27c <abort>:
 800b27c:	b508      	push	{r3, lr}
 800b27e:	2006      	movs	r0, #6
 800b280:	f000 fb8c 	bl	800b99c <raise>
 800b284:	2001      	movs	r0, #1
 800b286:	f7f6 feeb 	bl	8002060 <_exit>

0800b28a <__sfputc_r>:
 800b28a:	6893      	ldr	r3, [r2, #8]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	b410      	push	{r4}
 800b292:	6093      	str	r3, [r2, #8]
 800b294:	da08      	bge.n	800b2a8 <__sfputc_r+0x1e>
 800b296:	6994      	ldr	r4, [r2, #24]
 800b298:	42a3      	cmp	r3, r4
 800b29a:	db01      	blt.n	800b2a0 <__sfputc_r+0x16>
 800b29c:	290a      	cmp	r1, #10
 800b29e:	d103      	bne.n	800b2a8 <__sfputc_r+0x1e>
 800b2a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2a4:	f000 babe 	b.w	800b824 <__swbuf_r>
 800b2a8:	6813      	ldr	r3, [r2, #0]
 800b2aa:	1c58      	adds	r0, r3, #1
 800b2ac:	6010      	str	r0, [r2, #0]
 800b2ae:	7019      	strb	r1, [r3, #0]
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <__sfputs_r>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	460f      	mov	r7, r1
 800b2be:	4614      	mov	r4, r2
 800b2c0:	18d5      	adds	r5, r2, r3
 800b2c2:	42ac      	cmp	r4, r5
 800b2c4:	d101      	bne.n	800b2ca <__sfputs_r+0x12>
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	e007      	b.n	800b2da <__sfputs_r+0x22>
 800b2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ce:	463a      	mov	r2, r7
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7ff ffda 	bl	800b28a <__sfputc_r>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	d1f3      	bne.n	800b2c2 <__sfputs_r+0xa>
 800b2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2dc <_vfiprintf_r>:
 800b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	b09d      	sub	sp, #116	@ 0x74
 800b2e4:	4614      	mov	r4, r2
 800b2e6:	4698      	mov	r8, r3
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	b118      	cbz	r0, 800b2f4 <_vfiprintf_r+0x18>
 800b2ec:	6a03      	ldr	r3, [r0, #32]
 800b2ee:	b90b      	cbnz	r3, 800b2f4 <_vfiprintf_r+0x18>
 800b2f0:	f7ff fcd4 	bl	800ac9c <__sinit>
 800b2f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2f6:	07d9      	lsls	r1, r3, #31
 800b2f8:	d405      	bmi.n	800b306 <_vfiprintf_r+0x2a>
 800b2fa:	89ab      	ldrh	r3, [r5, #12]
 800b2fc:	059a      	lsls	r2, r3, #22
 800b2fe:	d402      	bmi.n	800b306 <_vfiprintf_r+0x2a>
 800b300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b302:	f7ff fdbe 	bl	800ae82 <__retarget_lock_acquire_recursive>
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	071b      	lsls	r3, r3, #28
 800b30a:	d501      	bpl.n	800b310 <_vfiprintf_r+0x34>
 800b30c:	692b      	ldr	r3, [r5, #16]
 800b30e:	b99b      	cbnz	r3, 800b338 <_vfiprintf_r+0x5c>
 800b310:	4629      	mov	r1, r5
 800b312:	4630      	mov	r0, r6
 800b314:	f000 fac4 	bl	800b8a0 <__swsetup_r>
 800b318:	b170      	cbz	r0, 800b338 <_vfiprintf_r+0x5c>
 800b31a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b31c:	07dc      	lsls	r4, r3, #31
 800b31e:	d504      	bpl.n	800b32a <_vfiprintf_r+0x4e>
 800b320:	f04f 30ff 	mov.w	r0, #4294967295
 800b324:	b01d      	add	sp, #116	@ 0x74
 800b326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32a:	89ab      	ldrh	r3, [r5, #12]
 800b32c:	0598      	lsls	r0, r3, #22
 800b32e:	d4f7      	bmi.n	800b320 <_vfiprintf_r+0x44>
 800b330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b332:	f7ff fda7 	bl	800ae84 <__retarget_lock_release_recursive>
 800b336:	e7f3      	b.n	800b320 <_vfiprintf_r+0x44>
 800b338:	2300      	movs	r3, #0
 800b33a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b33c:	2320      	movs	r3, #32
 800b33e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b342:	f8cd 800c 	str.w	r8, [sp, #12]
 800b346:	2330      	movs	r3, #48	@ 0x30
 800b348:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b4f8 <_vfiprintf_r+0x21c>
 800b34c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b350:	f04f 0901 	mov.w	r9, #1
 800b354:	4623      	mov	r3, r4
 800b356:	469a      	mov	sl, r3
 800b358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b35c:	b10a      	cbz	r2, 800b362 <_vfiprintf_r+0x86>
 800b35e:	2a25      	cmp	r2, #37	@ 0x25
 800b360:	d1f9      	bne.n	800b356 <_vfiprintf_r+0x7a>
 800b362:	ebba 0b04 	subs.w	fp, sl, r4
 800b366:	d00b      	beq.n	800b380 <_vfiprintf_r+0xa4>
 800b368:	465b      	mov	r3, fp
 800b36a:	4622      	mov	r2, r4
 800b36c:	4629      	mov	r1, r5
 800b36e:	4630      	mov	r0, r6
 800b370:	f7ff ffa2 	bl	800b2b8 <__sfputs_r>
 800b374:	3001      	adds	r0, #1
 800b376:	f000 80a7 	beq.w	800b4c8 <_vfiprintf_r+0x1ec>
 800b37a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b37c:	445a      	add	r2, fp
 800b37e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b380:	f89a 3000 	ldrb.w	r3, [sl]
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 809f 	beq.w	800b4c8 <_vfiprintf_r+0x1ec>
 800b38a:	2300      	movs	r3, #0
 800b38c:	f04f 32ff 	mov.w	r2, #4294967295
 800b390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b394:	f10a 0a01 	add.w	sl, sl, #1
 800b398:	9304      	str	r3, [sp, #16]
 800b39a:	9307      	str	r3, [sp, #28]
 800b39c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3a2:	4654      	mov	r4, sl
 800b3a4:	2205      	movs	r2, #5
 800b3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3aa:	4853      	ldr	r0, [pc, #332]	@ (800b4f8 <_vfiprintf_r+0x21c>)
 800b3ac:	f7f4 ff18 	bl	80001e0 <memchr>
 800b3b0:	9a04      	ldr	r2, [sp, #16]
 800b3b2:	b9d8      	cbnz	r0, 800b3ec <_vfiprintf_r+0x110>
 800b3b4:	06d1      	lsls	r1, r2, #27
 800b3b6:	bf44      	itt	mi
 800b3b8:	2320      	movmi	r3, #32
 800b3ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3be:	0713      	lsls	r3, r2, #28
 800b3c0:	bf44      	itt	mi
 800b3c2:	232b      	movmi	r3, #43	@ 0x2b
 800b3c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ce:	d015      	beq.n	800b3fc <_vfiprintf_r+0x120>
 800b3d0:	9a07      	ldr	r2, [sp, #28]
 800b3d2:	4654      	mov	r4, sl
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	f04f 0c0a 	mov.w	ip, #10
 800b3da:	4621      	mov	r1, r4
 800b3dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3e0:	3b30      	subs	r3, #48	@ 0x30
 800b3e2:	2b09      	cmp	r3, #9
 800b3e4:	d94b      	bls.n	800b47e <_vfiprintf_r+0x1a2>
 800b3e6:	b1b0      	cbz	r0, 800b416 <_vfiprintf_r+0x13a>
 800b3e8:	9207      	str	r2, [sp, #28]
 800b3ea:	e014      	b.n	800b416 <_vfiprintf_r+0x13a>
 800b3ec:	eba0 0308 	sub.w	r3, r0, r8
 800b3f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	9304      	str	r3, [sp, #16]
 800b3f8:	46a2      	mov	sl, r4
 800b3fa:	e7d2      	b.n	800b3a2 <_vfiprintf_r+0xc6>
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	1d19      	adds	r1, r3, #4
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	9103      	str	r1, [sp, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	bfbb      	ittet	lt
 800b408:	425b      	neglt	r3, r3
 800b40a:	f042 0202 	orrlt.w	r2, r2, #2
 800b40e:	9307      	strge	r3, [sp, #28]
 800b410:	9307      	strlt	r3, [sp, #28]
 800b412:	bfb8      	it	lt
 800b414:	9204      	strlt	r2, [sp, #16]
 800b416:	7823      	ldrb	r3, [r4, #0]
 800b418:	2b2e      	cmp	r3, #46	@ 0x2e
 800b41a:	d10a      	bne.n	800b432 <_vfiprintf_r+0x156>
 800b41c:	7863      	ldrb	r3, [r4, #1]
 800b41e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b420:	d132      	bne.n	800b488 <_vfiprintf_r+0x1ac>
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	1d1a      	adds	r2, r3, #4
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	9203      	str	r2, [sp, #12]
 800b42a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b42e:	3402      	adds	r4, #2
 800b430:	9305      	str	r3, [sp, #20]
 800b432:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b508 <_vfiprintf_r+0x22c>
 800b436:	7821      	ldrb	r1, [r4, #0]
 800b438:	2203      	movs	r2, #3
 800b43a:	4650      	mov	r0, sl
 800b43c:	f7f4 fed0 	bl	80001e0 <memchr>
 800b440:	b138      	cbz	r0, 800b452 <_vfiprintf_r+0x176>
 800b442:	9b04      	ldr	r3, [sp, #16]
 800b444:	eba0 000a 	sub.w	r0, r0, sl
 800b448:	2240      	movs	r2, #64	@ 0x40
 800b44a:	4082      	lsls	r2, r0
 800b44c:	4313      	orrs	r3, r2
 800b44e:	3401      	adds	r4, #1
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b456:	4829      	ldr	r0, [pc, #164]	@ (800b4fc <_vfiprintf_r+0x220>)
 800b458:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b45c:	2206      	movs	r2, #6
 800b45e:	f7f4 febf 	bl	80001e0 <memchr>
 800b462:	2800      	cmp	r0, #0
 800b464:	d03f      	beq.n	800b4e6 <_vfiprintf_r+0x20a>
 800b466:	4b26      	ldr	r3, [pc, #152]	@ (800b500 <_vfiprintf_r+0x224>)
 800b468:	bb1b      	cbnz	r3, 800b4b2 <_vfiprintf_r+0x1d6>
 800b46a:	9b03      	ldr	r3, [sp, #12]
 800b46c:	3307      	adds	r3, #7
 800b46e:	f023 0307 	bic.w	r3, r3, #7
 800b472:	3308      	adds	r3, #8
 800b474:	9303      	str	r3, [sp, #12]
 800b476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b478:	443b      	add	r3, r7
 800b47a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b47c:	e76a      	b.n	800b354 <_vfiprintf_r+0x78>
 800b47e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b482:	460c      	mov	r4, r1
 800b484:	2001      	movs	r0, #1
 800b486:	e7a8      	b.n	800b3da <_vfiprintf_r+0xfe>
 800b488:	2300      	movs	r3, #0
 800b48a:	3401      	adds	r4, #1
 800b48c:	9305      	str	r3, [sp, #20]
 800b48e:	4619      	mov	r1, r3
 800b490:	f04f 0c0a 	mov.w	ip, #10
 800b494:	4620      	mov	r0, r4
 800b496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b49a:	3a30      	subs	r2, #48	@ 0x30
 800b49c:	2a09      	cmp	r2, #9
 800b49e:	d903      	bls.n	800b4a8 <_vfiprintf_r+0x1cc>
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d0c6      	beq.n	800b432 <_vfiprintf_r+0x156>
 800b4a4:	9105      	str	r1, [sp, #20]
 800b4a6:	e7c4      	b.n	800b432 <_vfiprintf_r+0x156>
 800b4a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e7f0      	b.n	800b494 <_vfiprintf_r+0x1b8>
 800b4b2:	ab03      	add	r3, sp, #12
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	462a      	mov	r2, r5
 800b4b8:	4b12      	ldr	r3, [pc, #72]	@ (800b504 <_vfiprintf_r+0x228>)
 800b4ba:	a904      	add	r1, sp, #16
 800b4bc:	4630      	mov	r0, r6
 800b4be:	f3af 8000 	nop.w
 800b4c2:	4607      	mov	r7, r0
 800b4c4:	1c78      	adds	r0, r7, #1
 800b4c6:	d1d6      	bne.n	800b476 <_vfiprintf_r+0x19a>
 800b4c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4ca:	07d9      	lsls	r1, r3, #31
 800b4cc:	d405      	bmi.n	800b4da <_vfiprintf_r+0x1fe>
 800b4ce:	89ab      	ldrh	r3, [r5, #12]
 800b4d0:	059a      	lsls	r2, r3, #22
 800b4d2:	d402      	bmi.n	800b4da <_vfiprintf_r+0x1fe>
 800b4d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4d6:	f7ff fcd5 	bl	800ae84 <__retarget_lock_release_recursive>
 800b4da:	89ab      	ldrh	r3, [r5, #12]
 800b4dc:	065b      	lsls	r3, r3, #25
 800b4de:	f53f af1f 	bmi.w	800b320 <_vfiprintf_r+0x44>
 800b4e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4e4:	e71e      	b.n	800b324 <_vfiprintf_r+0x48>
 800b4e6:	ab03      	add	r3, sp, #12
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4b05      	ldr	r3, [pc, #20]	@ (800b504 <_vfiprintf_r+0x228>)
 800b4ee:	a904      	add	r1, sp, #16
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f000 f879 	bl	800b5e8 <_printf_i>
 800b4f6:	e7e4      	b.n	800b4c2 <_vfiprintf_r+0x1e6>
 800b4f8:	0800bc3b 	.word	0x0800bc3b
 800b4fc:	0800bc45 	.word	0x0800bc45
 800b500:	00000000 	.word	0x00000000
 800b504:	0800b2b9 	.word	0x0800b2b9
 800b508:	0800bc41 	.word	0x0800bc41

0800b50c <_printf_common>:
 800b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b510:	4616      	mov	r6, r2
 800b512:	4698      	mov	r8, r3
 800b514:	688a      	ldr	r2, [r1, #8]
 800b516:	690b      	ldr	r3, [r1, #16]
 800b518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b51c:	4293      	cmp	r3, r2
 800b51e:	bfb8      	it	lt
 800b520:	4613      	movlt	r3, r2
 800b522:	6033      	str	r3, [r6, #0]
 800b524:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b528:	4607      	mov	r7, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	b10a      	cbz	r2, 800b532 <_printf_common+0x26>
 800b52e:	3301      	adds	r3, #1
 800b530:	6033      	str	r3, [r6, #0]
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	0699      	lsls	r1, r3, #26
 800b536:	bf42      	ittt	mi
 800b538:	6833      	ldrmi	r3, [r6, #0]
 800b53a:	3302      	addmi	r3, #2
 800b53c:	6033      	strmi	r3, [r6, #0]
 800b53e:	6825      	ldr	r5, [r4, #0]
 800b540:	f015 0506 	ands.w	r5, r5, #6
 800b544:	d106      	bne.n	800b554 <_printf_common+0x48>
 800b546:	f104 0a19 	add.w	sl, r4, #25
 800b54a:	68e3      	ldr	r3, [r4, #12]
 800b54c:	6832      	ldr	r2, [r6, #0]
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	42ab      	cmp	r3, r5
 800b552:	dc26      	bgt.n	800b5a2 <_printf_common+0x96>
 800b554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b558:	6822      	ldr	r2, [r4, #0]
 800b55a:	3b00      	subs	r3, #0
 800b55c:	bf18      	it	ne
 800b55e:	2301      	movne	r3, #1
 800b560:	0692      	lsls	r2, r2, #26
 800b562:	d42b      	bmi.n	800b5bc <_printf_common+0xb0>
 800b564:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b568:	4641      	mov	r1, r8
 800b56a:	4638      	mov	r0, r7
 800b56c:	47c8      	blx	r9
 800b56e:	3001      	adds	r0, #1
 800b570:	d01e      	beq.n	800b5b0 <_printf_common+0xa4>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	6922      	ldr	r2, [r4, #16]
 800b576:	f003 0306 	and.w	r3, r3, #6
 800b57a:	2b04      	cmp	r3, #4
 800b57c:	bf02      	ittt	eq
 800b57e:	68e5      	ldreq	r5, [r4, #12]
 800b580:	6833      	ldreq	r3, [r6, #0]
 800b582:	1aed      	subeq	r5, r5, r3
 800b584:	68a3      	ldr	r3, [r4, #8]
 800b586:	bf0c      	ite	eq
 800b588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b58c:	2500      	movne	r5, #0
 800b58e:	4293      	cmp	r3, r2
 800b590:	bfc4      	itt	gt
 800b592:	1a9b      	subgt	r3, r3, r2
 800b594:	18ed      	addgt	r5, r5, r3
 800b596:	2600      	movs	r6, #0
 800b598:	341a      	adds	r4, #26
 800b59a:	42b5      	cmp	r5, r6
 800b59c:	d11a      	bne.n	800b5d4 <_printf_common+0xc8>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	e008      	b.n	800b5b4 <_printf_common+0xa8>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	4641      	mov	r1, r8
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	47c8      	blx	r9
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d103      	bne.n	800b5b8 <_printf_common+0xac>
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	e7c6      	b.n	800b54a <_printf_common+0x3e>
 800b5bc:	18e1      	adds	r1, r4, r3
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	2030      	movs	r0, #48	@ 0x30
 800b5c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5c6:	4422      	add	r2, r4
 800b5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5d0:	3302      	adds	r3, #2
 800b5d2:	e7c7      	b.n	800b564 <_printf_common+0x58>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	4641      	mov	r1, r8
 800b5da:	4638      	mov	r0, r7
 800b5dc:	47c8      	blx	r9
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d0e6      	beq.n	800b5b0 <_printf_common+0xa4>
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	e7d9      	b.n	800b59a <_printf_common+0x8e>
	...

0800b5e8 <_printf_i>:
 800b5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ec:	7e0f      	ldrb	r7, [r1, #24]
 800b5ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5f0:	2f78      	cmp	r7, #120	@ 0x78
 800b5f2:	4691      	mov	r9, r2
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	469a      	mov	sl, r3
 800b5fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5fe:	d807      	bhi.n	800b610 <_printf_i+0x28>
 800b600:	2f62      	cmp	r7, #98	@ 0x62
 800b602:	d80a      	bhi.n	800b61a <_printf_i+0x32>
 800b604:	2f00      	cmp	r7, #0
 800b606:	f000 80d1 	beq.w	800b7ac <_printf_i+0x1c4>
 800b60a:	2f58      	cmp	r7, #88	@ 0x58
 800b60c:	f000 80b8 	beq.w	800b780 <_printf_i+0x198>
 800b610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b618:	e03a      	b.n	800b690 <_printf_i+0xa8>
 800b61a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b61e:	2b15      	cmp	r3, #21
 800b620:	d8f6      	bhi.n	800b610 <_printf_i+0x28>
 800b622:	a101      	add	r1, pc, #4	@ (adr r1, 800b628 <_printf_i+0x40>)
 800b624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b628:	0800b681 	.word	0x0800b681
 800b62c:	0800b695 	.word	0x0800b695
 800b630:	0800b611 	.word	0x0800b611
 800b634:	0800b611 	.word	0x0800b611
 800b638:	0800b611 	.word	0x0800b611
 800b63c:	0800b611 	.word	0x0800b611
 800b640:	0800b695 	.word	0x0800b695
 800b644:	0800b611 	.word	0x0800b611
 800b648:	0800b611 	.word	0x0800b611
 800b64c:	0800b611 	.word	0x0800b611
 800b650:	0800b611 	.word	0x0800b611
 800b654:	0800b793 	.word	0x0800b793
 800b658:	0800b6bf 	.word	0x0800b6bf
 800b65c:	0800b74d 	.word	0x0800b74d
 800b660:	0800b611 	.word	0x0800b611
 800b664:	0800b611 	.word	0x0800b611
 800b668:	0800b7b5 	.word	0x0800b7b5
 800b66c:	0800b611 	.word	0x0800b611
 800b670:	0800b6bf 	.word	0x0800b6bf
 800b674:	0800b611 	.word	0x0800b611
 800b678:	0800b611 	.word	0x0800b611
 800b67c:	0800b755 	.word	0x0800b755
 800b680:	6833      	ldr	r3, [r6, #0]
 800b682:	1d1a      	adds	r2, r3, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6032      	str	r2, [r6, #0]
 800b688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b68c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b690:	2301      	movs	r3, #1
 800b692:	e09c      	b.n	800b7ce <_printf_i+0x1e6>
 800b694:	6833      	ldr	r3, [r6, #0]
 800b696:	6820      	ldr	r0, [r4, #0]
 800b698:	1d19      	adds	r1, r3, #4
 800b69a:	6031      	str	r1, [r6, #0]
 800b69c:	0606      	lsls	r6, r0, #24
 800b69e:	d501      	bpl.n	800b6a4 <_printf_i+0xbc>
 800b6a0:	681d      	ldr	r5, [r3, #0]
 800b6a2:	e003      	b.n	800b6ac <_printf_i+0xc4>
 800b6a4:	0645      	lsls	r5, r0, #25
 800b6a6:	d5fb      	bpl.n	800b6a0 <_printf_i+0xb8>
 800b6a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	da03      	bge.n	800b6b8 <_printf_i+0xd0>
 800b6b0:	232d      	movs	r3, #45	@ 0x2d
 800b6b2:	426d      	negs	r5, r5
 800b6b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6b8:	4858      	ldr	r0, [pc, #352]	@ (800b81c <_printf_i+0x234>)
 800b6ba:	230a      	movs	r3, #10
 800b6bc:	e011      	b.n	800b6e2 <_printf_i+0xfa>
 800b6be:	6821      	ldr	r1, [r4, #0]
 800b6c0:	6833      	ldr	r3, [r6, #0]
 800b6c2:	0608      	lsls	r0, r1, #24
 800b6c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6c8:	d402      	bmi.n	800b6d0 <_printf_i+0xe8>
 800b6ca:	0649      	lsls	r1, r1, #25
 800b6cc:	bf48      	it	mi
 800b6ce:	b2ad      	uxthmi	r5, r5
 800b6d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6d2:	4852      	ldr	r0, [pc, #328]	@ (800b81c <_printf_i+0x234>)
 800b6d4:	6033      	str	r3, [r6, #0]
 800b6d6:	bf14      	ite	ne
 800b6d8:	230a      	movne	r3, #10
 800b6da:	2308      	moveq	r3, #8
 800b6dc:	2100      	movs	r1, #0
 800b6de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6e2:	6866      	ldr	r6, [r4, #4]
 800b6e4:	60a6      	str	r6, [r4, #8]
 800b6e6:	2e00      	cmp	r6, #0
 800b6e8:	db05      	blt.n	800b6f6 <_printf_i+0x10e>
 800b6ea:	6821      	ldr	r1, [r4, #0]
 800b6ec:	432e      	orrs	r6, r5
 800b6ee:	f021 0104 	bic.w	r1, r1, #4
 800b6f2:	6021      	str	r1, [r4, #0]
 800b6f4:	d04b      	beq.n	800b78e <_printf_i+0x1a6>
 800b6f6:	4616      	mov	r6, r2
 800b6f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6fc:	fb03 5711 	mls	r7, r3, r1, r5
 800b700:	5dc7      	ldrb	r7, [r0, r7]
 800b702:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b706:	462f      	mov	r7, r5
 800b708:	42bb      	cmp	r3, r7
 800b70a:	460d      	mov	r5, r1
 800b70c:	d9f4      	bls.n	800b6f8 <_printf_i+0x110>
 800b70e:	2b08      	cmp	r3, #8
 800b710:	d10b      	bne.n	800b72a <_printf_i+0x142>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	07df      	lsls	r7, r3, #31
 800b716:	d508      	bpl.n	800b72a <_printf_i+0x142>
 800b718:	6923      	ldr	r3, [r4, #16]
 800b71a:	6861      	ldr	r1, [r4, #4]
 800b71c:	4299      	cmp	r1, r3
 800b71e:	bfde      	ittt	le
 800b720:	2330      	movle	r3, #48	@ 0x30
 800b722:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b726:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b72a:	1b92      	subs	r2, r2, r6
 800b72c:	6122      	str	r2, [r4, #16]
 800b72e:	f8cd a000 	str.w	sl, [sp]
 800b732:	464b      	mov	r3, r9
 800b734:	aa03      	add	r2, sp, #12
 800b736:	4621      	mov	r1, r4
 800b738:	4640      	mov	r0, r8
 800b73a:	f7ff fee7 	bl	800b50c <_printf_common>
 800b73e:	3001      	adds	r0, #1
 800b740:	d14a      	bne.n	800b7d8 <_printf_i+0x1f0>
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
 800b746:	b004      	add	sp, #16
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	f043 0320 	orr.w	r3, r3, #32
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	4832      	ldr	r0, [pc, #200]	@ (800b820 <_printf_i+0x238>)
 800b756:	2778      	movs	r7, #120	@ 0x78
 800b758:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	6831      	ldr	r1, [r6, #0]
 800b760:	061f      	lsls	r7, r3, #24
 800b762:	f851 5b04 	ldr.w	r5, [r1], #4
 800b766:	d402      	bmi.n	800b76e <_printf_i+0x186>
 800b768:	065f      	lsls	r7, r3, #25
 800b76a:	bf48      	it	mi
 800b76c:	b2ad      	uxthmi	r5, r5
 800b76e:	6031      	str	r1, [r6, #0]
 800b770:	07d9      	lsls	r1, r3, #31
 800b772:	bf44      	itt	mi
 800b774:	f043 0320 	orrmi.w	r3, r3, #32
 800b778:	6023      	strmi	r3, [r4, #0]
 800b77a:	b11d      	cbz	r5, 800b784 <_printf_i+0x19c>
 800b77c:	2310      	movs	r3, #16
 800b77e:	e7ad      	b.n	800b6dc <_printf_i+0xf4>
 800b780:	4826      	ldr	r0, [pc, #152]	@ (800b81c <_printf_i+0x234>)
 800b782:	e7e9      	b.n	800b758 <_printf_i+0x170>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	f023 0320 	bic.w	r3, r3, #32
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	e7f6      	b.n	800b77c <_printf_i+0x194>
 800b78e:	4616      	mov	r6, r2
 800b790:	e7bd      	b.n	800b70e <_printf_i+0x126>
 800b792:	6833      	ldr	r3, [r6, #0]
 800b794:	6825      	ldr	r5, [r4, #0]
 800b796:	6961      	ldr	r1, [r4, #20]
 800b798:	1d18      	adds	r0, r3, #4
 800b79a:	6030      	str	r0, [r6, #0]
 800b79c:	062e      	lsls	r6, r5, #24
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	d501      	bpl.n	800b7a6 <_printf_i+0x1be>
 800b7a2:	6019      	str	r1, [r3, #0]
 800b7a4:	e002      	b.n	800b7ac <_printf_i+0x1c4>
 800b7a6:	0668      	lsls	r0, r5, #25
 800b7a8:	d5fb      	bpl.n	800b7a2 <_printf_i+0x1ba>
 800b7aa:	8019      	strh	r1, [r3, #0]
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	6123      	str	r3, [r4, #16]
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	e7bc      	b.n	800b72e <_printf_i+0x146>
 800b7b4:	6833      	ldr	r3, [r6, #0]
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	6032      	str	r2, [r6, #0]
 800b7ba:	681e      	ldr	r6, [r3, #0]
 800b7bc:	6862      	ldr	r2, [r4, #4]
 800b7be:	2100      	movs	r1, #0
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7f4 fd0d 	bl	80001e0 <memchr>
 800b7c6:	b108      	cbz	r0, 800b7cc <_printf_i+0x1e4>
 800b7c8:	1b80      	subs	r0, r0, r6
 800b7ca:	6060      	str	r0, [r4, #4]
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7d6:	e7aa      	b.n	800b72e <_printf_i+0x146>
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	4632      	mov	r2, r6
 800b7dc:	4649      	mov	r1, r9
 800b7de:	4640      	mov	r0, r8
 800b7e0:	47d0      	blx	sl
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	d0ad      	beq.n	800b742 <_printf_i+0x15a>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	079b      	lsls	r3, r3, #30
 800b7ea:	d413      	bmi.n	800b814 <_printf_i+0x22c>
 800b7ec:	68e0      	ldr	r0, [r4, #12]
 800b7ee:	9b03      	ldr	r3, [sp, #12]
 800b7f0:	4298      	cmp	r0, r3
 800b7f2:	bfb8      	it	lt
 800b7f4:	4618      	movlt	r0, r3
 800b7f6:	e7a6      	b.n	800b746 <_printf_i+0x15e>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	4632      	mov	r2, r6
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4640      	mov	r0, r8
 800b800:	47d0      	blx	sl
 800b802:	3001      	adds	r0, #1
 800b804:	d09d      	beq.n	800b742 <_printf_i+0x15a>
 800b806:	3501      	adds	r5, #1
 800b808:	68e3      	ldr	r3, [r4, #12]
 800b80a:	9903      	ldr	r1, [sp, #12]
 800b80c:	1a5b      	subs	r3, r3, r1
 800b80e:	42ab      	cmp	r3, r5
 800b810:	dcf2      	bgt.n	800b7f8 <_printf_i+0x210>
 800b812:	e7eb      	b.n	800b7ec <_printf_i+0x204>
 800b814:	2500      	movs	r5, #0
 800b816:	f104 0619 	add.w	r6, r4, #25
 800b81a:	e7f5      	b.n	800b808 <_printf_i+0x220>
 800b81c:	0800bc4c 	.word	0x0800bc4c
 800b820:	0800bc5d 	.word	0x0800bc5d

0800b824 <__swbuf_r>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	460e      	mov	r6, r1
 800b828:	4614      	mov	r4, r2
 800b82a:	4605      	mov	r5, r0
 800b82c:	b118      	cbz	r0, 800b836 <__swbuf_r+0x12>
 800b82e:	6a03      	ldr	r3, [r0, #32]
 800b830:	b90b      	cbnz	r3, 800b836 <__swbuf_r+0x12>
 800b832:	f7ff fa33 	bl	800ac9c <__sinit>
 800b836:	69a3      	ldr	r3, [r4, #24]
 800b838:	60a3      	str	r3, [r4, #8]
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	071a      	lsls	r2, r3, #28
 800b83e:	d501      	bpl.n	800b844 <__swbuf_r+0x20>
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	b943      	cbnz	r3, 800b856 <__swbuf_r+0x32>
 800b844:	4621      	mov	r1, r4
 800b846:	4628      	mov	r0, r5
 800b848:	f000 f82a 	bl	800b8a0 <__swsetup_r>
 800b84c:	b118      	cbz	r0, 800b856 <__swbuf_r+0x32>
 800b84e:	f04f 37ff 	mov.w	r7, #4294967295
 800b852:	4638      	mov	r0, r7
 800b854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	6922      	ldr	r2, [r4, #16]
 800b85a:	1a98      	subs	r0, r3, r2
 800b85c:	6963      	ldr	r3, [r4, #20]
 800b85e:	b2f6      	uxtb	r6, r6
 800b860:	4283      	cmp	r3, r0
 800b862:	4637      	mov	r7, r6
 800b864:	dc05      	bgt.n	800b872 <__swbuf_r+0x4e>
 800b866:	4621      	mov	r1, r4
 800b868:	4628      	mov	r0, r5
 800b86a:	f7ff fcbd 	bl	800b1e8 <_fflush_r>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d1ed      	bne.n	800b84e <__swbuf_r+0x2a>
 800b872:	68a3      	ldr	r3, [r4, #8]
 800b874:	3b01      	subs	r3, #1
 800b876:	60a3      	str	r3, [r4, #8]
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	6022      	str	r2, [r4, #0]
 800b87e:	701e      	strb	r6, [r3, #0]
 800b880:	6962      	ldr	r2, [r4, #20]
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	429a      	cmp	r2, r3
 800b886:	d004      	beq.n	800b892 <__swbuf_r+0x6e>
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	07db      	lsls	r3, r3, #31
 800b88c:	d5e1      	bpl.n	800b852 <__swbuf_r+0x2e>
 800b88e:	2e0a      	cmp	r6, #10
 800b890:	d1df      	bne.n	800b852 <__swbuf_r+0x2e>
 800b892:	4621      	mov	r1, r4
 800b894:	4628      	mov	r0, r5
 800b896:	f7ff fca7 	bl	800b1e8 <_fflush_r>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	d0d9      	beq.n	800b852 <__swbuf_r+0x2e>
 800b89e:	e7d6      	b.n	800b84e <__swbuf_r+0x2a>

0800b8a0 <__swsetup_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4b29      	ldr	r3, [pc, #164]	@ (800b948 <__swsetup_r+0xa8>)
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	6818      	ldr	r0, [r3, #0]
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	b118      	cbz	r0, 800b8b4 <__swsetup_r+0x14>
 800b8ac:	6a03      	ldr	r3, [r0, #32]
 800b8ae:	b90b      	cbnz	r3, 800b8b4 <__swsetup_r+0x14>
 800b8b0:	f7ff f9f4 	bl	800ac9c <__sinit>
 800b8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b8:	0719      	lsls	r1, r3, #28
 800b8ba:	d422      	bmi.n	800b902 <__swsetup_r+0x62>
 800b8bc:	06da      	lsls	r2, r3, #27
 800b8be:	d407      	bmi.n	800b8d0 <__swsetup_r+0x30>
 800b8c0:	2209      	movs	r2, #9
 800b8c2:	602a      	str	r2, [r5, #0]
 800b8c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	e033      	b.n	800b938 <__swsetup_r+0x98>
 800b8d0:	0758      	lsls	r0, r3, #29
 800b8d2:	d512      	bpl.n	800b8fa <__swsetup_r+0x5a>
 800b8d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8d6:	b141      	cbz	r1, 800b8ea <__swsetup_r+0x4a>
 800b8d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8dc:	4299      	cmp	r1, r3
 800b8de:	d002      	beq.n	800b8e6 <__swsetup_r+0x46>
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f7ff fafd 	bl	800aee0 <_free_r>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6063      	str	r3, [r4, #4]
 800b8f6:	6923      	ldr	r3, [r4, #16]
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	f043 0308 	orr.w	r3, r3, #8
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	6923      	ldr	r3, [r4, #16]
 800b904:	b94b      	cbnz	r3, 800b91a <__swsetup_r+0x7a>
 800b906:	89a3      	ldrh	r3, [r4, #12]
 800b908:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b90c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b910:	d003      	beq.n	800b91a <__swsetup_r+0x7a>
 800b912:	4621      	mov	r1, r4
 800b914:	4628      	mov	r0, r5
 800b916:	f000 f883 	bl	800ba20 <__smakebuf_r>
 800b91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91e:	f013 0201 	ands.w	r2, r3, #1
 800b922:	d00a      	beq.n	800b93a <__swsetup_r+0x9a>
 800b924:	2200      	movs	r2, #0
 800b926:	60a2      	str	r2, [r4, #8]
 800b928:	6962      	ldr	r2, [r4, #20]
 800b92a:	4252      	negs	r2, r2
 800b92c:	61a2      	str	r2, [r4, #24]
 800b92e:	6922      	ldr	r2, [r4, #16]
 800b930:	b942      	cbnz	r2, 800b944 <__swsetup_r+0xa4>
 800b932:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b936:	d1c5      	bne.n	800b8c4 <__swsetup_r+0x24>
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	0799      	lsls	r1, r3, #30
 800b93c:	bf58      	it	pl
 800b93e:	6962      	ldrpl	r2, [r4, #20]
 800b940:	60a2      	str	r2, [r4, #8]
 800b942:	e7f4      	b.n	800b92e <__swsetup_r+0x8e>
 800b944:	2000      	movs	r0, #0
 800b946:	e7f7      	b.n	800b938 <__swsetup_r+0x98>
 800b948:	2000001c 	.word	0x2000001c

0800b94c <_raise_r>:
 800b94c:	291f      	cmp	r1, #31
 800b94e:	b538      	push	{r3, r4, r5, lr}
 800b950:	4605      	mov	r5, r0
 800b952:	460c      	mov	r4, r1
 800b954:	d904      	bls.n	800b960 <_raise_r+0x14>
 800b956:	2316      	movs	r3, #22
 800b958:	6003      	str	r3, [r0, #0]
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b962:	b112      	cbz	r2, 800b96a <_raise_r+0x1e>
 800b964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b968:	b94b      	cbnz	r3, 800b97e <_raise_r+0x32>
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 f830 	bl	800b9d0 <_getpid_r>
 800b970:	4622      	mov	r2, r4
 800b972:	4601      	mov	r1, r0
 800b974:	4628      	mov	r0, r5
 800b976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b97a:	f000 b817 	b.w	800b9ac <_kill_r>
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d00a      	beq.n	800b998 <_raise_r+0x4c>
 800b982:	1c59      	adds	r1, r3, #1
 800b984:	d103      	bne.n	800b98e <_raise_r+0x42>
 800b986:	2316      	movs	r3, #22
 800b988:	6003      	str	r3, [r0, #0]
 800b98a:	2001      	movs	r0, #1
 800b98c:	e7e7      	b.n	800b95e <_raise_r+0x12>
 800b98e:	2100      	movs	r1, #0
 800b990:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b994:	4620      	mov	r0, r4
 800b996:	4798      	blx	r3
 800b998:	2000      	movs	r0, #0
 800b99a:	e7e0      	b.n	800b95e <_raise_r+0x12>

0800b99c <raise>:
 800b99c:	4b02      	ldr	r3, [pc, #8]	@ (800b9a8 <raise+0xc>)
 800b99e:	4601      	mov	r1, r0
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f7ff bfd3 	b.w	800b94c <_raise_r>
 800b9a6:	bf00      	nop
 800b9a8:	2000001c 	.word	0x2000001c

0800b9ac <_kill_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4d07      	ldr	r5, [pc, #28]	@ (800b9cc <_kill_r+0x20>)
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4608      	mov	r0, r1
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	f7f6 fb41 	bl	8002040 <_kill>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	d102      	bne.n	800b9c8 <_kill_r+0x1c>
 800b9c2:	682b      	ldr	r3, [r5, #0]
 800b9c4:	b103      	cbz	r3, 800b9c8 <_kill_r+0x1c>
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20004e48 	.word	0x20004e48

0800b9d0 <_getpid_r>:
 800b9d0:	f7f6 bb2e 	b.w	8002030 <_getpid>

0800b9d4 <__swhatbuf_r>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	b096      	sub	sp, #88	@ 0x58
 800b9e0:	4615      	mov	r5, r2
 800b9e2:	461e      	mov	r6, r3
 800b9e4:	da0d      	bge.n	800ba02 <__swhatbuf_r+0x2e>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9ec:	f04f 0100 	mov.w	r1, #0
 800b9f0:	bf14      	ite	ne
 800b9f2:	2340      	movne	r3, #64	@ 0x40
 800b9f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	6031      	str	r1, [r6, #0]
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	b016      	add	sp, #88	@ 0x58
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	466a      	mov	r2, sp
 800ba04:	f000 f848 	bl	800ba98 <_fstat_r>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	dbec      	blt.n	800b9e6 <__swhatbuf_r+0x12>
 800ba0c:	9901      	ldr	r1, [sp, #4]
 800ba0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba16:	4259      	negs	r1, r3
 800ba18:	4159      	adcs	r1, r3
 800ba1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba1e:	e7eb      	b.n	800b9f8 <__swhatbuf_r+0x24>

0800ba20 <__smakebuf_r>:
 800ba20:	898b      	ldrh	r3, [r1, #12]
 800ba22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba24:	079d      	lsls	r5, r3, #30
 800ba26:	4606      	mov	r6, r0
 800ba28:	460c      	mov	r4, r1
 800ba2a:	d507      	bpl.n	800ba3c <__smakebuf_r+0x1c>
 800ba2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	2301      	movs	r3, #1
 800ba36:	6163      	str	r3, [r4, #20]
 800ba38:	b003      	add	sp, #12
 800ba3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba3c:	ab01      	add	r3, sp, #4
 800ba3e:	466a      	mov	r2, sp
 800ba40:	f7ff ffc8 	bl	800b9d4 <__swhatbuf_r>
 800ba44:	9f00      	ldr	r7, [sp, #0]
 800ba46:	4605      	mov	r5, r0
 800ba48:	4639      	mov	r1, r7
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff fabc 	bl	800afc8 <_malloc_r>
 800ba50:	b948      	cbnz	r0, 800ba66 <__smakebuf_r+0x46>
 800ba52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba56:	059a      	lsls	r2, r3, #22
 800ba58:	d4ee      	bmi.n	800ba38 <__smakebuf_r+0x18>
 800ba5a:	f023 0303 	bic.w	r3, r3, #3
 800ba5e:	f043 0302 	orr.w	r3, r3, #2
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	e7e2      	b.n	800ba2c <__smakebuf_r+0xc>
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	6020      	str	r0, [r4, #0]
 800ba6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba6e:	81a3      	strh	r3, [r4, #12]
 800ba70:	9b01      	ldr	r3, [sp, #4]
 800ba72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba76:	b15b      	cbz	r3, 800ba90 <__smakebuf_r+0x70>
 800ba78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f000 f81d 	bl	800babc <_isatty_r>
 800ba82:	b128      	cbz	r0, 800ba90 <__smakebuf_r+0x70>
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	f043 0301 	orr.w	r3, r3, #1
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	431d      	orrs	r5, r3
 800ba94:	81a5      	strh	r5, [r4, #12]
 800ba96:	e7cf      	b.n	800ba38 <__smakebuf_r+0x18>

0800ba98 <_fstat_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d07      	ldr	r5, [pc, #28]	@ (800bab8 <_fstat_r+0x20>)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	602b      	str	r3, [r5, #0]
 800baa6:	f7f6 fb2b 	bl	8002100 <_fstat>
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	d102      	bne.n	800bab4 <_fstat_r+0x1c>
 800baae:	682b      	ldr	r3, [r5, #0]
 800bab0:	b103      	cbz	r3, 800bab4 <_fstat_r+0x1c>
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	bd38      	pop	{r3, r4, r5, pc}
 800bab6:	bf00      	nop
 800bab8:	20004e48 	.word	0x20004e48

0800babc <_isatty_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4d06      	ldr	r5, [pc, #24]	@ (800bad8 <_isatty_r+0x1c>)
 800bac0:	2300      	movs	r3, #0
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f6 fb2a 	bl	8002120 <_isatty>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_isatty_r+0x1a>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_isatty_r+0x1a>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	20004e48 	.word	0x20004e48

0800badc <_init>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr

0800bae8 <_fini>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	bf00      	nop
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr
